<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fire Salamander - Version L√©g√®re</title>
    <style>
        /* CSS inline pour √©viter les probl√®mes de chargement */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 40px 20px;
            background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
            color: white;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(255, 107, 53, 0.3);
        }
        
        .header h1 {
            font-size: 3rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .header .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
        }
        
        .card {
            background: white;
            border-radius: 15px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            transition: transform 0.3s ease;
        }
        
        .card:hover {
            transform: translateY(-5px);
        }
        
        .card h2 {
            color: #ff6b35;
            margin-bottom: 20px;
            font-size: 1.8rem;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #555;
        }
        
        .form-input, .form-select {
            width: 100%;
            padding: 12px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s ease;
        }
        
        .form-input:focus, .form-select:focus {
            outline: none;
            border-color: #ff6b35;
            box-shadow: 0 0 0 3px rgba(255, 107, 53, 0.1);
        }
        
        .btn {
            background: linear-gradient(135deg, #ff6b35 0%, #f7931e 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(255, 107, 53, 0.4);
        }
        
        .btn:active {
            transform: translateY(0);
        }
        
        .status {
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
            font-weight: 500;
        }
        
        .status-ok {
            background: #d4edda;
            color: #155724;
            border-left: 4px solid #28a745;
        }
        
        .status-error {
            background: #f8d7da;
            color: #721c24;
            border-left: 4px solid #dc3545;
        }
        
        .status-warning {
            background: #fff3cd;
            color: #856404;
            border-left: 4px solid #ffc107;
        }
        
        .progress-bar {
            width: 100%;
            height: 6px;
            background: #e0e0e0;
            border-radius: 3px;
            overflow: hidden;
            margin: 15px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b35, #f7931e);
            width: 0%;
            transition: width 0.3s ease;
        }
        
        .results {
            background: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-top: 20px;
        }
        
        .score {
            font-size: 2rem;
            font-weight: bold;
            color: #ff6b35;
            text-align: center;
            margin: 20px 0;
        }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 30px;
            margin-top: 30px;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .card {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üî• Fire Salamander</h1>
            <div class="subtitle">Analyseur SEO Simplifi√©</div>
        </div>
        
        <div class="grid">
            <div class="card">
                <h2>üîç Analyse Rapide</h2>
                <form id="analysisForm">
                    <div class="form-group">
                        <label for="url">URL √† analyser</label>
                        <input type="url" id="url" class="form-input" 
                               placeholder="https://example.com" required>
                    </div>
                    
                    <div class="form-group">
                        <label for="type">Type d'analyse</label>
                        <select id="type" class="form-select">
                            <option value="quick">Analyse Rapide</option>
                            <option value="seo">SEO Complet</option>
                            <option value="semantic">S√©mantique</option>
                            <option value="full">Analyse Compl√®te</option>
                        </select>
                    </div>
                    
                    <button type="submit" class="btn">
                        <span>üöÄ</span>
                        Lancer l'Analyse
                    </button>
                </form>
                
                <div id="progress" style="display: none;">
                    <div class="progress-bar">
                        <div class="progress-fill" id="progressBar"></div>
                    </div>
                    <div id="progressText">Initialisation...</div>
                </div>
                
                <div id="results" class="results" style="display: none;"></div>
            </div>
            
            <div class="card">
                <h2>‚ö° √âtat du Syst√®me</h2>
                <div id="systemStatus">V√©rification en cours...</div>
                
                <button type="button" class="btn" onclick="checkSystem()" style="margin-top: 20px;">
                    <span>üîÑ</span>
                    Actualiser
                </button>
            </div>
        </div>
        
        <div class="card">
            <h2>üìä Test de Performance</h2>
            <p>Cette interface l√©g√®re permet de tester si le probl√®me vient du poids de la page originale.</p>
            
            <div class="grid">
                <div>
                    <h3>Interface Originale</h3>
                    <a href="http://localhost:8080" target="_blank" class="btn">
                        <span>üåê</span>
                        Ouvrir l'Interface Compl√®te
                    </a>
                </div>
                
                <div>
                    <h3>Outils de Diagnostic</h3>
                    <a href="test_display.html" target="_blank" class="btn">
                        <span>üîß</span>
                        Outils de Test
                    </a>
                </div>
            </div>
        </div>
    </div>

    <script>
        // V√©rifier l'√©tat du syst√®me
        async function checkSystem() {
            const statusDiv = document.getElementById('systemStatus');
            statusDiv.innerHTML = 'V√©rification en cours...';
            
            try {
                // Test API Health
                const healthResponse = await fetch('http://localhost:8080/api/v1/health');
                const healthData = await healthResponse.json();
                
                // Test Stats
                const statsResponse = await fetch('http://localhost:8080/api/v1/stats');
                const statsData = await statsResponse.json();
                
                statusDiv.innerHTML = `
                    <div class="status status-ok">
                        <strong>‚úÖ Syst√®me Op√©rationnel</strong><br>
                        Status: ${healthData.data.status}<br>
                        T√¢ches totales: ${statsData.data.total_tasks}<br>
                        Uptime: ${healthData.data.version}
                    </div>
                `;
                
            } catch (error) {
                statusDiv.innerHTML = `
                    <div class="status status-error">
                        <strong>‚ùå Erreur de Connexion</strong><br>
                        ${error.message}
                    </div>
                `;
            }
        }
        
        // G√©rer le formulaire d'analyse
        document.getElementById('analysisForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const url = document.getElementById('url').value;
            const type = document.getElementById('type').value;
            const progress = document.getElementById('progress');
            const results = document.getElementById('results');
            const progressBar = document.getElementById('progressBar');
            const progressText = document.getElementById('progressText');
            
            // Afficher la barre de progression
            progress.style.display = 'block';
            results.style.display = 'none';
            
            try {
                // Simulation de progression
                const steps = [
                    { percent: 20, text: 'Connexion √† l\'URL...' },
                    { percent: 40, text: 'Extraction du contenu...' },
                    { percent: 60, text: 'Analyse en cours...' },
                    { percent: 80, text: 'Calcul des scores...' },
                    { percent: 100, text: 'Finalisation...' }
                ];
                
                for (const step of steps) {
                    progressBar.style.width = step.percent + '%';
                    progressText.textContent = step.text;
                    await new Promise(resolve => setTimeout(resolve, 500));
                }
                
                // Appel API r√©el
                const response = await fetch(`http://localhost:8080/api/v1/analyze/${type}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ url: url })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    results.innerHTML = `
                        <h3>‚úÖ Analyse R√©ussie!</h3>
                        <div class="score">${(data.data.overall_score * 100).toFixed(1)}/100</div>
                        <p><strong>URL:</strong> ${data.data.url}</p>
                        <p><strong>Temps de traitement:</strong> ${(data.data.processing_time / 1000000000).toFixed(2)}s</p>
                        <div class="status status-ok">
                            Analyse termin√©e avec succ√®s. L'interface l√©g√®re fonctionne correctement!
                        </div>
                    `;
                } else {
                    results.innerHTML = `
                        <div class="status status-error">
                            <strong>Erreur:</strong> ${data.error}
                        </div>
                    `;
                }
                
            } catch (error) {
                results.innerHTML = `
                    <div class="status status-error">
                        <strong>Erreur r√©seau:</strong> ${error.message}
                    </div>
                `;
            }
            
            progress.style.display = 'none';
            results.style.display = 'block';
        });
        
        // V√©rifier le syst√®me au chargement
        window.onload = () => {
            checkSystem();
        };
    </script>
</body>
</html>