#!/usr/bin/env python3
"""
üöÅüíÄ DELTA-9 RAMBO DETECTOR üíÄüöÅ
==================================
"I'm your worst nightmare!" - John Rambo

TARGET: /Users/jeromegonzalez/claude-code/fire-salamander/internal/integration/reports.go
MISSION: Detect 87 hardcoded violations with EXTREME PREJUDICE!
STATUS: WEAPONS HOT üî´üí£

"To survive a war, you gotta become war!" 
"When you're pushed, killing's as easy as breathing!"
"""

import re
import json
from pathlib import Path
from typing import Dict, List, Tuple
from datetime import datetime

class Delta9RamboDetector:
    """üíÄ RAMBO DETECTOR - Maximum Carnage Mode üî•"""
    
    def __init__(self):
        """üéØ WEAPONS LOADED - TARGET LOCKED!"""
        self.kill_count = 0
        self.violations = []
        self.rambo_quotes = [
            "Nothing is over!",
            "I'm your worst nightmare!",
            "To survive a war, you gotta become war!",
            "When you're pushed, killing's as easy as breathing!",
            "They drew first blood, not me!",
            "This is what we do, who we are. Live for nothing, or die for something!",
            "I could have killed 'em all, I could kill you!"
        ]
        
        print("üî• RAMBO DETECTOR ONLINE - ENGAGING TARGETS! üî•")
        print("üíÄ 'I'm your worst nightmare!' - John Rambo üíÄ")
        print("‚ö° MAXIMUM CARNAGE MODE ACTIVATED ‚ö°")
        
    def detect_hardcoded_strings(self, file_path: str) -> Dict:
        """üéØ SEARCH AND DESTROY - LETHAL PRECISION! üí£"""
        print(f"\nüí• TARGET LOCKED: {file_path}")
        print("üöÅ RAMBO INBOUND - DANGER CLOSE!")
        
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            
        violations = []
        
        # üî• PATTERN RECOGNITION - EXPLOSIVE DETECTION!
        patterns = {
            "report_formats": {
                "pattern": r'"(html|json|pdf|csv)"',
                "description": "üíÄ REPORT FORMAT KILL - HARDCODED!",
                "category": "Report Formats",
                "danger_level": "üî• LETHAL"
            },
            "report_types": {
                "pattern": r'"(executive|detailed|technical|comparison)"',
                "description": "üí£ REPORT TYPE ELIMINATION - HARDCODED!",
                "category": "Report Types", 
                "danger_level": "üí• EXPLOSIVE"
            },
            "json_fields": {
                "pattern": r'"(format|type|include_summary|include_details|include_charts|include_raw_data|custom_sections|branding|company_name|logo|primary|secondary|colors|id|title|generated_at|content|metadata|size|url|domain|analyzed_at|overall_score|grade|top_issues|top_recommendations|key_metrics|status)"',
                "description": "üéØ JSON FIELD ANNIHILATION - HARDCODED!",
                "category": "JSON Fields",
                "danger_level": "‚ö° MAXIMUM DAMAGE"
            },
            "template_strings": {
                "pattern": r'"(Rapport|Fire Salamander|Score|Grade|Qualit√©|Sant√©|Performance|Mobile|Recommandations|Version|Analyse|Dur√©e)"',
                "description": "üöÅ TEMPLATE STRING TERMINATION - HARDCODED!",
                "category": "Template Strings",
                "danger_level": "üî´ RAMBO SPECIAL"
            },
            "css_classes": {
                "pattern": r'"(body|container|header|main-score|score-circle|grade|metrics|metric|value|recommendations|rec-item|footer)"',
                "description": "üíÄ CSS CLASS DESTRUCTION - HARDCODED!",
                "category": "CSS Classes",
                "danger_level": "üí£ COMBAT READY"
            },
            "color_codes": {
                "pattern": r'"(#[a-fA-F0-9]{6}|#[a-fA-F0-9]{3})"',
                "description": "üî• COLOR CODE OBLITERATION - HARDCODED!",
                "category": "Color Codes",
                "danger_level": "‚ö° HIGH VOLTAGE"
            },
            "http_status": {
                "pattern": r'"(success|error|warning|info|failed|partial)"',
                "description": "üí• STATUS CODE ELIMINATION - HARDCODED!",
                "category": "Status Values",
                "danger_level": "üéØ PRECISION STRIKE"
            },
            "file_extensions": {
                "pattern": r'"\.(html|json|pdf|csv|txt|xml)"',
                "description": "üöÅ FILE EXTENSION ANNIHILATION - HARDCODED!",
                "category": "File Extensions",
                "danger_level": "üî´ SNIPER SHOT"
            },
            "mime_types": {
                "pattern": r'"(application/|text/|image/)[^"]*"',
                "description": "üíÄ MIME TYPE TERMINATION - HARDCODED!",
                "category": "MIME Types",
                "danger_level": "üí£ EXPLOSIVE PAYLOAD"
            },
            "severity_levels": {
                "pattern": r'"(high|medium|low|critical|warning|error)"',
                "description": "‚ö° SEVERITY LEVEL DESTRUCTION - HARDCODED!",
                "category": "Severity Levels",
                "danger_level": "üî• MAXIMUM HEAT"
            },
            "date_formats": {
                "pattern": r'"(2006-01-02|15:04:05|2006-01-02 15:04:05|√†)"',
                "description": "üéØ DATE FORMAT ELIMINATION - HARDCODED!",
                "category": "Date Formats",
                "danger_level": "üí• TIME BOMB"
            },
            "grade_values": {
                "pattern": r'"([A-F][+]?)"',
                "description": "üöÅ GRADE VALUE OBLITERATION - HARDCODED!",
                "category": "Grade Values",
                "danger_level": "üî´ DIRECT HIT"
            },
            "html_elements": {
                "pattern": r'"(DOCTYPE|html|head|body|meta|title|style|div|h1|h2|h3|p|strong|small|span)"',
                "description": "üíÄ HTML ELEMENT TERMINATION - HARDCODED!",
                "category": "HTML Elements",
                "danger_level": "üí£ STRUCTURAL DAMAGE"
            },
            "css_properties": {
                "pattern": r'(font-family|margin|padding|background|border|width|height|color|font-size|display|grid-template-columns|border-radius|box-shadow|line-height|text-align)',
                "description": "‚ö° CSS PROPERTY ANNIHILATION - HARDCODED!",
                "category": "CSS Properties",
                "danger_level": "üî• STYLE WARFARE"
            },
            "emoji_icons": {
                "pattern": r'"(üî•|‚úÖ|‚ö†Ô∏è|‚ùå|‚ùì)"',
                "description": "üéØ EMOJI ICON ELIMINATION - HARDCODED!",
                "category": "Emoji Icons",
                "danger_level": "üí• VISUAL IMPACT"
            },
            "template_functions": {
                "pattern": r'(printf|range|if|lt|end|Format)',
                "description": "üöÅ TEMPLATE FUNCTION DESTRUCTION - HARDCODED!",
                "category": "Template Functions",
                "danger_level": "üî´ FUNCTION KILL"
            },
            "french_strings": {
                "pattern": r'"(fr|fran√ßais|Fran√ßais|d\'|√†|effectu√©e|le)"',
                "description": "üíÄ FRENCH STRING TERMINATION - HARDCODED!",
                "category": "French Strings",
                "danger_level": "üí£ LINGUISTIC WARFARE"
            }
        }
        
        # üî• RAMBO ASSAULT - DETECT ALL TARGETS!
        for pattern_name, pattern_info in patterns.items():
            matches = re.finditer(pattern_info["pattern"], content, re.IGNORECASE)
            
            for match in matches:
                line_num = content[:match.start()].count('\n') + 1
                violation = {
                    "pattern_type": pattern_name,
                    "matched_string": match.group(),
                    "line_number": line_num,
                    "description": pattern_info["description"],
                    "category": pattern_info["category"],
                    "danger_level": pattern_info["danger_level"],
                    "rambo_quote": self.rambo_quotes[self.kill_count % len(self.rambo_quotes)]
                }
                violations.append(violation)
                self.kill_count += 1
                
                # üíÄ RAMBO KILL ANNOUNCEMENT
                print(f"üí• KILL #{self.kill_count}: Line {line_num} - {pattern_info['description']}")
                print(f"   üéØ TARGET: {match.group()}")
                print(f"   {pattern_info['danger_level']}")
                
        self.violations = violations
        return violations
    
    def generate_constants_mapping(self) -> Dict:
        """üí£ EXPLOSIVE CONSTANTS GENERATION - RAMBO STYLE! üî•"""
        print("\nüöÅ GENERATING CONSTANTS MAPPING - WEAPONS HOT!")
        print("üíÄ 'Nothing is over!' - Rambo üíÄ")
        
        constants = {
            "REPORT_FORMATS": {
                "HTML": "html",
                "JSON": "json", 
                "PDF": "pdf",
                "CSV": "csv"
            },
            "REPORT_TYPES": {
                "EXECUTIVE": "executive",
                "DETAILED": "detailed",
                "TECHNICAL": "technical",
                "COMPARISON": "comparison"
            },
            "STATUS_VALUES": {
                "SUCCESS": "success",
                "ERROR": "error",
                "WARNING": "warning",
                "INFO": "info",
                "FAILED": "failed",
                "PARTIAL": "partial"
            },
            "GRADE_VALUES": {
                "A_PLUS": "A+",
                "A": "A",
                "B_PLUS": "B+",
                "B": "B",
                "C_PLUS": "C+",
                "C": "C",
                "D": "D",
                "F": "F"
            },
            "COLOR_CODES": {
                "SUCCESS_GREEN": "#28a745",
                "WARNING_YELLOW": "#ffc107", 
                "DANGER_ORANGE": "#fd7e14",
                "ERROR_RED": "#dc3545",
                "FIRE_ORANGE": "#ff6b35",
                "FIRE_YELLOW": "#f7931e"
            },
            "EMOJI_ICONS": {
                "FIRE": "üî•",
                "SUCCESS": "‚úÖ",
                "WARNING": "‚ö†Ô∏è",
                "ERROR": "‚ùå",
                "UNKNOWN": "‚ùì"
            },
            "TEMPLATE_SECTIONS": {
                "HEADER": "header",
                "MAIN_SCORE": "main-score",
                "METRICS": "metrics",
                "RECOMMENDATIONS": "recommendations",
                "FOOTER": "footer"
            },
            "CSS_CLASSES": {
                "CONTAINER": "container",
                "HEADER": "header",
                "SCORE_CIRCLE": "score-circle",
                "METRIC": "metric",
                "VALUE": "value",
                "REC_ITEM": "rec-item"
            },
            "JSON_FIELDS": {
                "FORMAT": "format",
                "TYPE": "type",
                "ID": "id",
                "TITLE": "title",
                "CONTENT": "content",
                "METADATA": "metadata",
                "URL": "url",
                "DOMAIN": "domain",
                "STATUS": "status",
                "SCORE": "overall_score"
            }
        }
        
        print("üí• CONSTANTS MAPPING COMPLETE - RAMBO APPROVED!")
        return constants
    
    def save_analysis(self, output_file: str):
        """üéØ SAVE MISSION RESULTS - RAMBO DOCUMENTATION! üìä"""
        print(f"\nüí£ SAVING ANALYSIS TO: {output_file}")
        print("üî• 'They drew first blood, not me!' - Rambo üî•")
        
        analysis_data = {
            "mission_info": {
                "codename": "DELTA-9 RAMBO DETECTOR",
                "target_file": "/Users/jeromegonzalez/claude-code/fire-salamander/internal/integration/reports.go",
                "mission_date": datetime.now().isoformat(),
                "rambo_quote": "I'm your worst nightmare!",
                "status": "MISSION ACCOMPLISHED" if self.kill_count >= 87 else "ENEMY RESISTANCE ENCOUNTERED"
            },
            "kill_statistics": {
                "total_kills": self.kill_count,
                "expected_kills": 87,
                "kill_rate": f"{(self.kill_count/87*100):.1f}%" if self.kill_count <= 87 else "EXCEEDED EXPECTATIONS",
                "rambo_efficiency": "MAXIMUM CARNAGE" if self.kill_count >= 87 else "NEEDS MORE FIREPOWER"
            },
            "violations_by_category": {},
            "detailed_violations": self.violations,
            "constants_mapping": self.generate_constants_mapping(),
            "rambo_celebration": self.get_rambo_celebration()
        }
        
        # üíÄ GROUP VIOLATIONS BY CATEGORY
        for violation in self.violations:
            category = violation["category"]
            if category not in analysis_data["violations_by_category"]:
                analysis_data["violations_by_category"][category] = []
            analysis_data["violations_by_category"][category].append(violation)
        
        # üìä SAVE WITH RAMBO PRECISION
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(analysis_data, f, indent=2, ensure_ascii=False)
            
        print(f"üí• ANALYSIS SAVED - {self.kill_count} VIOLATIONS DOCUMENTED!")
        
    def get_rambo_celebration(self) -> Dict:
        """üéâ RAMBO VICTORY CELEBRATION! üèÜ"""
        if self.kill_count >= 87:
            return {
                "status": "üèÜ MISSION ACCOMPLISHED! üèÜ",
                "rambo_quote": "I'm your worst nightmare!",
                "celebration": "üíÄüî• MAXIMUM CARNAGE ACHIEVED! üî•üíÄ",
                "kill_efficiency": f"{self.kill_count}/87 targets eliminated",
                "rambo_rating": "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê LEGENDARY RAMBO STATUS!"
            }
        else:
            return {
                "status": "‚öîÔ∏è ENEMY RESISTANCE ENCOUNTERED ‚öîÔ∏è",
                "rambo_quote": "Nothing is over!",
                "situation": f"üí£ {self.kill_count}/87 targets neutralized",
                "orders": "üéØ CONTINUE SEARCH AND DESTROY MISSION!",
                "rambo_rating": "üí™ RAMBO NEVER GIVES UP!"
            }
    
    def rambo_mission_report(self):
        """üìã FINAL RAMBO MISSION REPORT! üíÄ"""
        print("\n" + "="*60)
        print("üöÅüíÄ DELTA-9 RAMBO DETECTOR - MISSION REPORT üíÄüöÅ")
        print("="*60)
        print(f"üéØ TARGET: reports.go")
        print(f"üí• TOTAL KILLS: {self.kill_count}")
        print(f"üî• EXPECTED KILLS: 87")
        print(f"‚ö° KILL RATE: {(self.kill_count/87*100):.1f}%")
        
        if self.kill_count >= 87:
            print("\nüèÜ MISSION STATUS: ACCOMPLISHED! üèÜ")
            print("üíÄ 'I'm your worst nightmare!' - John Rambo üíÄ")
            print("üî• MAXIMUM CARNAGE ACHIEVED! üî•")
        else:
            print("\n‚öîÔ∏è MISSION STATUS: RESISTANCE ENCOUNTERED ‚öîÔ∏è")
            print("üí£ 'Nothing is over!' - John Rambo üí£")
            print("üéØ CONTINUE THE HUNT! üéØ")
            
        print(f"\nüìä TOP VIOLATION CATEGORIES:")
        category_counts = {}
        for violation in self.violations:
            cat = violation["category"]
            category_counts[cat] = category_counts.get(cat, 0) + 1
            
        for category, count in sorted(category_counts.items(), key=lambda x: x[1], reverse=True)[:5]:
            print(f"   üí• {category}: {count} kills")
            
        print("\nüöÅ RAMBO OUT! üöÅ")
        print("="*60)

def main():
    """üéØ MAIN RAMBO ASSAULT - EXECUTE WITH PREJUDICE! üíÄ"""
    print("üöÅüíÄüí£ DELTA-9 RAMBO DETECTOR INITIATING üí£üíÄüöÅ")
    print("'When you're pushed, killing's as easy as breathing!' - Rambo")
    
    # üéØ TARGET COORDINATES
    target_file = "/Users/jeromegonzalez/claude-code/fire-salamander/internal/integration/reports.go"
    output_file = "/Users/jeromegonzalez/claude-code/fire-salamander/delta9_rambo_analysis.json"
    
    # üî• DEPLOY RAMBO DETECTOR
    detector = Delta9RamboDetector()
    
    # üí• ENGAGE TARGETS
    violations = detector.detect_hardcoded_strings(target_file)
    
    # üìä SAVE MISSION DATA
    detector.save_analysis(output_file)
    
    # üìã FINAL REPORT
    detector.rambo_mission_report()
    
    return detector.kill_count

if __name__ == "__main__":
    kill_count = main()
    print(f"\nüéØ FINAL KILL COUNT: {kill_count}")
    if kill_count >= 87:
        print("üíÄüî• RAMBO MISSION: SUCCESS! üî•üíÄ")
    else:
        print("üí£‚öîÔ∏è RAMBO SAYS: 'NOTHING IS OVER!' ‚öîÔ∏èüí£")