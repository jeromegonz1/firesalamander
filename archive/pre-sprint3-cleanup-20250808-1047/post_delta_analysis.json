{
  "analysis_info": {
    "timestamp": "2025-08-08T00:43:34.569310",
    "analyzer_version": "POST_DELTA_v1.0",
    "mission": "Évaluation impact corrections DELTA",
    "scan_path": "/Users/jeromegonzalez/claude-code/fire-salamander"
  },
  "summary": {
    "total_violations": 693,
    "files_affected": 36,
    "categories_found": 10,
    "severity_breakdown": {
      "Medium": 605,
      "High": 4,
      "Low": 48,
      "Critical": 36
    }
  },
  "comparison_with_initial": {
    "initial_violations": 4582,
    "current_violations": 693,
    "violations_eliminated": 3889,
    "reduction_percentage": 84.88,
    "remaining_work": 693,
    "completion_percentage": 84.88,
    "progress_status": "EXCELLENT"
  },
  "priority_action_plan": {
    "immediate_actions": {
      "critical_violations": 36,
      "high_priority_violations": 4,
      "top_files_to_fix": [
        [
          "tests/agents/data/data_integrity_agent.go",
          63
        ],
        [
          "internal/integration/api.go",
          59
        ],
        [
          "internal/integration/orchestrator.go",
          53
        ],
        [
          "cmd/fire-salamander/main.go",
          50
        ],
        [
          "internal/web/server.go",
          46
        ]
      ],
      "priority_categories": [
        [
          "log_messages",
          309
        ],
        [
          "http_methods",
          157
        ],
        [
          "error_messages",
          111
        ],
        [
          "api_endpoints",
          36
        ],
        [
          "json_fields",
          30
        ]
      ]
    },
    "recommended_phases": [
      {
        "phase": "PHASE 1 - CRITIQUE",
        "focus": "Éliminer toutes les violations CRITICAL",
        "target_violations": 36,
        "estimated_effort": "2-4 heures"
      },
      {
        "phase": "PHASE 2 - HAUTE PRIORITÉ",
        "focus": "Traiter les violations HIGH",
        "target_violations": 4,
        "estimated_effort": "4-6 heures"
      },
      {
        "phase": "PHASE 3 - NETTOYAGE",
        "focus": "Optimiser les violations MEDIUM/LOW",
        "target_violations": 653,
        "estimated_effort": "6-8 heures"
      }
    ]
  },
  "detailed_stats": {
    "violations_by_category": {
      "http_methods": 157,
      "log_messages": 309,
      "server_config": 4,
      "error_messages": 111,
      "template_names": 6,
      "http_headers": 9,
      "content_types": 19,
      "api_endpoints": 36,
      "file_extensions": 12,
      "json_fields": 30
    },
    "violations_by_file": {
      "main.go": 4,
      "cmd/fire-salamander/main.go": 50,
      "cmd/server/main.go": 37,
      "cmd/firesalamander/main.go": 13,
      "tests/agents/frontend/playwright_agent.go": 18,
      "tests/agents/security/security_agent.go": 14,
      "tests/agents/qa/qa_agent.go": 26,
      "tests/agents/performance/k6_agent.go": 17,
      "tests/agents/data/data_integrity_agent.go": 63,
      "internal/messages/messages.go": 1,
      "internal/logger/logger.go": 7,
      "internal/config/config.go": 18,
      "internal/config/version.go": 1,
      "internal/web/server.go": 46,
      "internal/integration/reports.go": 16,
      "internal/integration/storage.go": 43,
      "internal/integration/orchestrator.go": 53,
      "internal/integration/api.go": 59,
      "internal/crawler/cache.go": 10,
      "internal/crawler/sitemap.go": 11,
      "internal/crawler/crawler.go": 23,
      "internal/crawler/fetcher.go": 28,
      "internal/crawler/robots.go": 13,
      "internal/semantic/seo_scorer.go": 0,
      "internal/semantic/content_extractor.go": 5,
      "internal/semantic/ngram_analyzer.go": 7,
      "internal/semantic/types.go": 0,
      "internal/semantic/analyzer.go": 10,
      "internal/semantic/ai_enricher.go": 19,
      "internal/api/models.go": 0,
      "internal/api/handlers.go": 16,
      "internal/api/simulator.go": 5,
      "internal/seo/technical_auditor.go": 9,
      "internal/seo/performance_analyzer.go": 10,
      "internal/seo/analyzer.go": 23,
      "internal/seo/recommendation_engine.go": 2,
      "internal/seo/tag_analyzer.go": 2,
      "internal/debug/phase_tests.go": 9,
      "internal/debug/checker.go": 5
    },
    "top_violating_files": [
      [
        "tests/agents/data/data_integrity_agent.go",
        63
      ],
      [
        "internal/integration/api.go",
        59
      ],
      [
        "internal/integration/orchestrator.go",
        53
      ],
      [
        "cmd/fire-salamander/main.go",
        50
      ],
      [
        "internal/web/server.go",
        46
      ],
      [
        "internal/integration/storage.go",
        43
      ],
      [
        "cmd/server/main.go",
        37
      ],
      [
        "internal/crawler/fetcher.go",
        28
      ],
      [
        "tests/agents/qa/qa_agent.go",
        26
      ],
      [
        "internal/crawler/crawler.go",
        23
      ],
      [
        "internal/seo/analyzer.go",
        23
      ],
      [
        "internal/semantic/ai_enricher.go",
        19
      ],
      [
        "tests/agents/frontend/playwright_agent.go",
        18
      ],
      [
        "internal/config/config.go",
        18
      ],
      [
        "tests/agents/performance/k6_agent.go",
        17
      ],
      [
        "internal/integration/reports.go",
        16
      ],
      [
        "internal/api/handlers.go",
        16
      ],
      [
        "tests/agents/security/security_agent.go",
        14
      ],
      [
        "cmd/firesalamander/main.go",
        13
      ],
      [
        "internal/crawler/robots.go",
        13
      ]
    ]
  },
  "violations": [
    {
      "file": "main.go",
      "line": 15,
      "category": "http_methods",
      "value": "Load",
      "context": "    func main() {\\n    // Load configuration from environment (NO HARDCODING!)\\n>>> cfg, err := config.Load()\\n    if err != nil {\\n    log.Fatalf(\"Failed to load configuration: %v\", err)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "main.go",
      "line": 17,
      "category": "log_messages",
      "value": "Failed to load configuration: %v",
      "context": "    cfg, err := config.Load()\\n    if err != nil {\\n>>> log.Fatalf(\"Failed to load configuration: %v\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "main.go",
      "line": 20,
      "category": "log_messages",
      "value": "Fire Salamander MVP starting on port %d...",
      "context": "    }\\n    \\n>>> log.Printf(\"Fire Salamander MVP starting on port %d...\", cfg.Server.Port)\\n    \\n    // TODO: Start HTTP server with TDD",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "main.go",
      "line": 20,
      "category": "log_messages",
      "value": "Fire Salamander MVP starting on port %d...",
      "context": "    }\\n    \\n>>> log.Printf(\"Fire Salamander MVP starting on port %d...\", cfg.Server.Port)\\n    \\n    // TODO: Start HTTP server with TDD",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 43,
      "category": "log_messages",
      "value": "Fire Salamander v%s\\n",
      "context": "    // Show version\\n    if *showVersion {\\n>>> fmt.Printf(\"Fire Salamander v%s\\n\", version)\\n    return\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 60,
      "category": "log_messages",
      "value": "❌ Erreur chargement configuration: %v",
      "context": "    cfg, err := loadConfig(*configPath, *port)\\n    if err != nil {\\n>>> log.Fatalf(\"❌ Erreur chargement configuration: %v\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 63,
      "category": "log_messages",
      "value": "📋 Configuration chargée depuis: %s",
      "context": "    }\\n    \\n>>> log.Printf(\"📋 Configuration chargée depuis: %s\", *configPath)\\n    log.Printf(\"🔧 Mode: %s\", getRunMode(*webOnly, *apiOnly))\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 63,
      "category": "log_messages",
      "value": "📋 Configuration chargée depuis: %s",
      "context": "    }\\n    \\n>>> log.Printf(\"📋 Configuration chargée depuis: %s\", *configPath)\\n    log.Printf(\"🔧 Mode: %s\", getRunMode(*webOnly, *apiOnly))\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 80,
      "category": "log_messages",
      "value": "🚀 Initialisation de l",
      "context": "    // Initialize orchestrator (unless web-only mode)\\n    if !*webOnly {\\n>>> log.Printf(\"🚀 Initialisation de l'orchestrateur Fire Salamander...\")\\n    \\n    orchestrator, err = integration.NewOrchestrator(cfg)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 80,
      "category": "log_messages",
      "value": "🚀 Initialisation de l",
      "context": "    // Initialize orchestrator (unless web-only mode)\\n    if !*webOnly {\\n>>> log.Printf(\"🚀 Initialisation de l'orchestrateur Fire Salamander...\")\\n    \\n    orchestrator, err = integration.NewOrchestrator(cfg)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 84,
      "category": "log_messages",
      "value": "❌ Erreur création orchestrateur: %v",
      "context": "    orchestrator, err = integration.NewOrchestrator(cfg)\\n    if err != nil {\\n>>> log.Fatalf(\"❌ Erreur création orchestrateur: %v\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 89,
      "category": "log_messages",
      "value": "❌ Erreur démarrage orchestrateur: %v",
      "context": "    // Start orchestrator\\n    if err := orchestrator.Start(ctx); err != nil {\\n>>> log.Fatalf(\"❌ Erreur démarrage orchestrateur: %v\", err)\\n    }\\n    log.Printf(\"✅ Orchestrateur démarré avec succès\")",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 91,
      "category": "log_messages",
      "value": "✅ Orchestrateur démarré avec succès",
      "context": "    log.Fatalf(\"❌ Erreur démarrage orchestrateur: %v\", err)\\n    }\\n>>> log.Printf(\"✅ Orchestrateur démarré avec succès\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 91,
      "category": "log_messages",
      "value": "✅ Orchestrateur démarré avec succès",
      "context": "    log.Fatalf(\"❌ Erreur démarrage orchestrateur: %v\", err)\\n    }\\n>>> log.Printf(\"✅ Orchestrateur démarré avec succès\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 97,
      "category": "log_messages",
      "value": "🔌 Démarrage du serveur API uniquement...",
      "context": "    if *apiOnly {\\n    // API only mode\\n>>> log.Printf(\"🔌 Démarrage du serveur API uniquement...\")\\n    apiServer = integration.NewAPIServer(orchestrator, cfg)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 97,
      "category": "log_messages",
      "value": "🔌 Démarrage du serveur API uniquement...",
      "context": "    if *apiOnly {\\n    // API only mode\\n>>> log.Printf(\"🔌 Démarrage du serveur API uniquement...\")\\n    apiServer = integration.NewAPIServer(orchestrator, cfg)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 101,
      "category": "log_messages",
      "value": "❌ Erreur démarrage API: %v",
      "context": "    \\n    if err := apiServer.Start(); err != nil {\\n>>> log.Fatalf(\"❌ Erreur démarrage API: %v\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 104,
      "category": "log_messages",
      "value": "✅ Serveur API démarré sur le port %d",
      "context": "    }\\n    \\n>>> log.Printf(\"✅ Serveur API démarré sur le port %d\", cfg.Server.Port)\\n    log.Printf(constants.LogAPIAvailableFormat, cfg.Server.Port)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 104,
      "category": "log_messages",
      "value": "✅ Serveur API démarré sur le port %d",
      "context": "    }\\n    \\n>>> log.Printf(\"✅ Serveur API démarré sur le port %d\", cfg.Server.Port)\\n    log.Printf(constants.LogAPIAvailableFormat, cfg.Server.Port)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 109,
      "category": "log_messages",
      "value": "🌐 Démarrage du serveur web Fire Salamander...",
      "context": "    } else {\\n    // Web mode (default) or web-only mode\\n>>> log.Printf(\"🌐 Démarrage du serveur web Fire Salamander...\")\\n    webServer = web.NewWebServer(orchestrator, cfg)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 109,
      "category": "log_messages",
      "value": "🌐 Démarrage du serveur web Fire Salamander...",
      "context": "    } else {\\n    // Web mode (default) or web-only mode\\n>>> log.Printf(\"🌐 Démarrage du serveur web Fire Salamander...\")\\n    webServer = web.NewWebServer(orchestrator, cfg)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 113,
      "category": "log_messages",
      "value": "❌ Erreur démarrage serveur web: %v",
      "context": "    \\n    if err := webServer.Start(); err != nil {\\n>>> log.Fatalf(\"❌ Erreur démarrage serveur web: %v\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 116,
      "category": "log_messages",
      "value": "✅ Serveur web démarré sur le port %d",
      "context": "    }\\n    \\n>>> log.Printf(\"✅ Serveur web démarré sur le port %d\", cfg.Server.Port)\\n    log.Printf(constants.LogInterfaceAvailableFormat, cfg.Server.Port)\\n    log.Printf(constants.LogAPIIntegratedFormat, cfg.Server.Port)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 116,
      "category": "log_messages",
      "value": "✅ Serveur web démarré sur le port %d",
      "context": "    }\\n    \\n>>> log.Printf(\"✅ Serveur web démarré sur le port %d\", cfg.Server.Port)\\n    log.Printf(constants.LogInterfaceAvailableFormat, cfg.Server.Port)\\n    log.Printf(constants.LogAPIIntegratedFormat, cfg.Server.Port)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 134,
      "category": "log_messages",
      "value": "🌐 Arrêt du serveur web...",
      "context": "    // Shutdown services\\n    if webServer != nil {\\n>>> log.Printf(\"🌐 Arrêt du serveur web...\")\\n    if err := webServer.Stop(shutdownCtx); err != nil {\\n    log.Printf(\"⚠️ Erreur arrêt serveur web: %v\", err)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 134,
      "category": "log_messages",
      "value": "🌐 Arrêt du serveur web...",
      "context": "    // Shutdown services\\n    if webServer != nil {\\n>>> log.Printf(\"🌐 Arrêt du serveur web...\")\\n    if err := webServer.Stop(shutdownCtx); err != nil {\\n    log.Printf(\"⚠️ Erreur arrêt serveur web: %v\", err)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 135,
      "category": "http_methods",
      "value": "Stop",
      "context": "    if webServer != nil {\\n    log.Printf(\"🌐 Arrêt du serveur web...\")\\n>>> if err := webServer.Stop(shutdownCtx); err != nil {\\n    log.Printf(\"⚠️ Erreur arrêt serveur web: %v\", err)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 136,
      "category": "log_messages",
      "value": "⚠️ Erreur arrêt serveur web: %v",
      "context": "    log.Printf(\"🌐 Arrêt du serveur web...\")\\n    if err := webServer.Stop(shutdownCtx); err != nil {\\n>>> log.Printf(\"⚠️ Erreur arrêt serveur web: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 136,
      "category": "log_messages",
      "value": "⚠️ Erreur arrêt serveur web: %v",
      "context": "    log.Printf(\"🌐 Arrêt du serveur web...\")\\n    if err := webServer.Stop(shutdownCtx); err != nil {\\n>>> log.Printf(\"⚠️ Erreur arrêt serveur web: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 141,
      "category": "log_messages",
      "value": "🔌 Arrêt du serveur API...",
      "context": "    \\n    if apiServer != nil {\\n>>> log.Printf(\"🔌 Arrêt du serveur API...\")\\n    if err := apiServer.Stop(shutdownCtx); err != nil {\\n    log.Printf(\"⚠️ Erreur arrêt serveur API: %v\", err)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 141,
      "category": "log_messages",
      "value": "🔌 Arrêt du serveur API...",
      "context": "    \\n    if apiServer != nil {\\n>>> log.Printf(\"🔌 Arrêt du serveur API...\")\\n    if err := apiServer.Stop(shutdownCtx); err != nil {\\n    log.Printf(\"⚠️ Erreur arrêt serveur API: %v\", err)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 142,
      "category": "http_methods",
      "value": "Stop",
      "context": "    if apiServer != nil {\\n    log.Printf(\"🔌 Arrêt du serveur API...\")\\n>>> if err := apiServer.Stop(shutdownCtx); err != nil {\\n    log.Printf(\"⚠️ Erreur arrêt serveur API: %v\", err)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 143,
      "category": "log_messages",
      "value": "⚠️ Erreur arrêt serveur API: %v",
      "context": "    log.Printf(\"🔌 Arrêt du serveur API...\")\\n    if err := apiServer.Stop(shutdownCtx); err != nil {\\n>>> log.Printf(\"⚠️ Erreur arrêt serveur API: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 143,
      "category": "log_messages",
      "value": "⚠️ Erreur arrêt serveur API: %v",
      "context": "    log.Printf(\"🔌 Arrêt du serveur API...\")\\n    if err := apiServer.Stop(shutdownCtx); err != nil {\\n>>> log.Printf(\"⚠️ Erreur arrêt serveur API: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 149,
      "category": "http_methods",
      "value": "Stop",
      "context": "    if orchestrator != nil {\\n    log.Printf(\"🚀 Arrêt de l'orchestrateur...\")\\n>>> if err := orchestrator.Stop(); err != nil {\\n    log.Printf(\"⚠️ Erreur arrêt orchestrateur: %v\", err)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 150,
      "category": "log_messages",
      "value": "⚠️ Erreur arrêt orchestrateur: %v",
      "context": "    log.Printf(\"🚀 Arrêt de l'orchestrateur...\")\\n    if err := orchestrator.Stop(); err != nil {\\n>>> log.Printf(\"⚠️ Erreur arrêt orchestrateur: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 150,
      "category": "log_messages",
      "value": "⚠️ Erreur arrêt orchestrateur: %v",
      "context": "    log.Printf(\"🚀 Arrêt de l'orchestrateur...\")\\n    if err := orchestrator.Stop(); err != nil {\\n>>> log.Printf(\"⚠️ Erreur arrêt orchestrateur: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 157,
      "category": "log_messages",
      "value": "✅ Fire Salamander arrêté proprement",
      "context": "    cancel()\\n    \\n>>> log.Printf(\"✅ Fire Salamander arrêté proprement\")\\n    log.Printf(\"👋 Merci d'avoir utilisé Fire Salamander!\")\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 157,
      "category": "log_messages",
      "value": "✅ Fire Salamander arrêté proprement",
      "context": "    cancel()\\n    \\n>>> log.Printf(\"✅ Fire Salamander arrêté proprement\")\\n    log.Printf(\"👋 Merci d'avoir utilisé Fire Salamander!\")\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 164,
      "category": "http_methods",
      "value": "Load",
      "context": "    func loadConfig(configPath string, port int) (*config.Config, error) {\\n    // Try to load from file\\n>>> cfg, err := config.Load()\\n    if err != nil {\\n    // If file doesn't exist, create default config",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 168,
      "category": "log_messages",
      "value": "📝 Fichier de configuration non trouvé, utilisation de la configuration par défaut",
      "context": "    // If file doesn't exist, create default config\\n    if os.IsNotExist(err) {\\n>>> log.Printf(\"📝 Fichier de configuration non trouvé, utilisation de la configuration par défaut\")\\n    cfg = &config.Config{Server: config.ServerConfig{Port: 8080, Host: \"localhost\"}}\\n    } else {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 168,
      "category": "log_messages",
      "value": "📝 Fichier de configuration non trouvé, utilisation de la configuration par défaut",
      "context": "    // If file doesn't exist, create default config\\n    if os.IsNotExist(err) {\\n>>> log.Printf(\"📝 Fichier de configuration non trouvé, utilisation de la configuration par défaut\")\\n    cfg = &config.Config{Server: config.ServerConfig{Port: 8080, Host: \"localhost\"}}\\n    } else {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 169,
      "category": "server_config",
      "value": "localhost",
      "context": "    if os.IsNotExist(err) {\\n    log.Printf(\"📝 Fichier de configuration non trouvé, utilisation de la configuration par défaut\")\\n>>> cfg = &config.Config{Server: config.ServerConfig{Port: 8080, Host: \"localhost\"}}\\n    } else {\\n    return nil, fmt.Errorf(\"erreur lecture configuration: %w\", err)",
      "severity": "High",
      "description": "Configuration serveur hardcodée"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 171,
      "category": "error_messages",
      "value": "erreur lecture configuration: %w",
      "context": "    cfg = &config.Config{Server: config.ServerConfig{Port: 8080, Host: \"localhost\"}}\\n    } else {\\n>>> return nil, fmt.Errorf(\"erreur lecture configuration: %w\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 204,
      "category": "log_messages",
      "value": "🚀 Orchestrateur: Actif (%d workers)\\n",
      "context": "    \\n    if !webOnly {\\n>>> fmt.Printf(\"🚀 Orchestrateur: Actif (%d workers)\\n\", cfg.Crawler.Workers)\\n    fmt.Printf(\"🔍 Analyses disponibles: Sémantique, SEO, Complète, Rapide\\n\")\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 205,
      "category": "log_messages",
      "value": "🔍 Analyses disponibles: Sémantique, SEO, Complète, Rapide\\n",
      "context": "    if !webOnly {\\n    fmt.Printf(\"🚀 Orchestrateur: Actif (%d workers)\\n\", cfg.Crawler.Workers)\\n>>> fmt.Printf(\"🔍 Analyses disponibles: Sémantique, SEO, Complète, Rapide\\n\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 210,
      "category": "log_messages",
      "value": "   - Dashboard de monitoring\\n",
      "context": "    if !apiOnly {\\n    fmt.Printf(constants.InterfaceWebFormat, cfg.Server.Port)\\n>>> fmt.Printf(\"   - Dashboard de monitoring\\n\")\\n    fmt.Printf(\"   - Outil d'analyse interactif\\n\")\\n    fmt.Printf(\"   - Historique et rapports\\n\")",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 212,
      "category": "log_messages",
      "value": "   - Historique et rapports\\n",
      "context": "    fmt.Printf(\"   - Dashboard de monitoring\\n\")\\n    fmt.Printf(\"   - Outil d'analyse interactif\\n\")\\n>>> fmt.Printf(\"   - Historique et rapports\\n\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 216,
      "category": "log_messages",
      "value": "   - POST /analyze (analyse complète)\\n",
      "context": "    \\n    fmt.Printf(constants.APIRESTFormat, cfg.Server.Port)\\n>>> fmt.Printf(\"   - POST /analyze (analyse complète)\\n\")\\n    fmt.Printf(\"   - POST /analyze/quick (analyse rapide)\\n\")\\n    fmt.Printf(\"   - POST /analyze/seo (analyse SEO)\\n\")",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 217,
      "category": "log_messages",
      "value": "   - POST /analyze/quick (analyse rapide)\\n",
      "context": "    fmt.Printf(constants.APIRESTFormat, cfg.Server.Port)\\n    fmt.Printf(\"   - POST /analyze (analyse complète)\\n\")\\n>>> fmt.Printf(\"   - POST /analyze/quick (analyse rapide)\\n\")\\n    fmt.Printf(\"   - POST /analyze/seo (analyse SEO)\\n\")\\n    fmt.Printf(\"   - POST /analyze/semantic (analyse sémantique)\\n\")",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 218,
      "category": "log_messages",
      "value": "   - POST /analyze/seo (analyse SEO)\\n",
      "context": "    fmt.Printf(\"   - POST /analyze (analyse complète)\\n\")\\n    fmt.Printf(\"   - POST /analyze/quick (analyse rapide)\\n\")\\n>>> fmt.Printf(\"   - POST /analyze/seo (analyse SEO)\\n\")\\n    fmt.Printf(\"   - POST /analyze/semantic (analyse sémantique)\\n\")\\n    fmt.Printf(\"   - GET  /health (santé du service)\\n\")",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 219,
      "category": "log_messages",
      "value": "   - POST /analyze/semantic (analyse sémantique)\\n",
      "context": "    fmt.Printf(\"   - POST /analyze/quick (analyse rapide)\\n\")\\n    fmt.Printf(\"   - POST /analyze/seo (analyse SEO)\\n\")\\n>>> fmt.Printf(\"   - POST /analyze/semantic (analyse sémantique)\\n\")\\n    fmt.Printf(\"   - GET  /health (santé du service)\\n\")\\n    fmt.Printf(\"   - GET  /stats (statistiques)\\n\")",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 220,
      "category": "log_messages",
      "value": "   - GET  /health (santé du service)\\n",
      "context": "    fmt.Printf(\"   - POST /analyze/seo (analyse SEO)\\n\")\\n    fmt.Printf(\"   - POST /analyze/semantic (analyse sémantique)\\n\")\\n>>> fmt.Printf(\"   - GET  /health (santé du service)\\n\")\\n    fmt.Printf(\"   - GET  /stats (statistiques)\\n\")\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/fire-salamander/main.go",
      "line": 221,
      "category": "log_messages",
      "value": "   - GET  /stats (statistiques)\\n",
      "context": "    fmt.Printf(\"   - POST /analyze/semantic (analyse sémantique)\\n\")\\n    fmt.Printf(\"   - GET  /health (santé du service)\\n\")\\n>>> fmt.Printf(\"   - GET  /stats (statistiques)\\n\")\\n    \\n    fmt.Println()",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 94,
      "category": "http_methods",
      "value": "Stat",
      "context": "    \\n    // Vérifier que le répertoire templates existe\\n>>> if _, err := os.Stat(templateDir); os.IsNotExist(err) {\\n    return fmt.Errorf(\"templates directory not found: %w\", err)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 95,
      "category": "error_messages",
      "value": "templates directory not found: %w",
      "context": "    // Vérifier que le répertoire templates existe\\n    if _, err := os.Stat(templateDir); os.IsNotExist(err) {\\n>>> return fmt.Errorf(\"templates directory not found: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 101,
      "category": "template_names",
      "value": "home.html",
      "context": "    \\n    // Charger chaque template individuellement\\n>>> homeTemplate, err = template.ParseFiles(filepath.Join(templateDir, \"home.html\"))\\n    if err != nil {\\n    return fmt.Errorf(\"failed to parse home template: %w\", err)",
      "severity": "Low",
      "description": "Noms de templates hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 103,
      "category": "error_messages",
      "value": "failed to parse home template: %w",
      "context": "    homeTemplate, err = template.ParseFiles(filepath.Join(templateDir, \"home.html\"))\\n    if err != nil {\\n>>> return fmt.Errorf(\"failed to parse home template: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 106,
      "category": "template_names",
      "value": "analyzing.html",
      "context": "    }\\n    \\n>>> analyzingTemplate, err = template.ParseFiles(filepath.Join(templateDir, \"analyzing.html\"))\\n    if err != nil {\\n    return fmt.Errorf(\"failed to parse analyzing template: %w\", err)",
      "severity": "Low",
      "description": "Noms de templates hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 108,
      "category": "error_messages",
      "value": "failed to parse analyzing template: %w",
      "context": "    analyzingTemplate, err = template.ParseFiles(filepath.Join(templateDir, \"analyzing.html\"))\\n    if err != nil {\\n>>> return fmt.Errorf(\"failed to parse analyzing template: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 111,
      "category": "template_names",
      "value": "results.html",
      "context": "    }\\n    \\n>>> resultsTemplate, err = template.ParseFiles(filepath.Join(templateDir, \"results.html\"))\\n    if err != nil {\\n    return fmt.Errorf(\"failed to parse results template: %w\", err)",
      "severity": "Low",
      "description": "Noms de templates hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 113,
      "category": "error_messages",
      "value": "failed to parse results template: %w",
      "context": "    resultsTemplate, err = template.ParseFiles(filepath.Join(templateDir, \"results.html\"))\\n    if err != nil {\\n>>> return fmt.Errorf(\"failed to parse results template: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 128,
      "category": "http_headers",
      "value": "Content-Type",
      "context": "    // Mode test - utiliser HTML simple\\n    if homeTemplate == nil {\\n>>> w.Header().Set(\"Content-Type\", \"text/html\")\\n    fmt.Fprintf(w, `<!DOCTYPE html><html><head><title>Fire Salamander</title></head><body><h1>Analysez votre SEO</h1></body></html>`)\\n    return",
      "severity": "Medium",
      "description": "Headers HTTP hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 128,
      "category": "content_types",
      "value": "text/html",
      "context": "    // Mode test - utiliser HTML simple\\n    if homeTemplate == nil {\\n>>> w.Header().Set(\"Content-Type\", \"text/html\")\\n    fmt.Fprintf(w, `<!DOCTYPE html><html><head><title>Fire Salamander</title></head><body><h1>Analysez votre SEO</h1></body></html>`)\\n    return",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 128,
      "category": "http_methods",
      "value": "Set",
      "context": "    // Mode test - utiliser HTML simple\\n    if homeTemplate == nil {\\n>>> w.Header().Set(\"Content-Type\", \"text/html\")\\n    fmt.Fprintf(w, `<!DOCTYPE html><html><head><title>Fire Salamander</title></head><body><h1>Analysez votre SEO</h1></body></html>`)\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 133,
      "category": "template_names",
      "value": "home.html",
      "context": "    }\\n    \\n>>> err := homeTemplate.ExecuteTemplate(w, \"home.html\", data)\\n    if err != nil {\\n    http.Error(w, fmt.Sprintf(\"Erreur template: %v\", err), http.StatusInternalServerError)",
      "severity": "Low",
      "description": "Noms de templates hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 135,
      "category": "log_messages",
      "value": "Erreur template: %v",
      "context": "    err := homeTemplate.ExecuteTemplate(w, \"home.html\", data)\\n    if err != nil {\\n>>> http.Error(w, fmt.Sprintf(\"Erreur template: %v\", err), http.StatusInternalServerError)\\n    return\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 203,
      "category": "http_headers",
      "value": "Content-Type",
      "context": "    // Mode test - utiliser HTML simple\\n    if analyzingTemplate == nil {\\n>>> w.Header().Set(\"Content-Type\", \"text/html\")\\n    fmt.Fprintf(w, `<!DOCTYPE html><html><head><title>Analyse en cours</title></head><body><h1>Analyse en cours</h1><p>%s (%d%%)</p></body></html>`, data.URL, data.Progress)\\n    return",
      "severity": "Medium",
      "description": "Headers HTTP hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 203,
      "category": "content_types",
      "value": "text/html",
      "context": "    // Mode test - utiliser HTML simple\\n    if analyzingTemplate == nil {\\n>>> w.Header().Set(\"Content-Type\", \"text/html\")\\n    fmt.Fprintf(w, `<!DOCTYPE html><html><head><title>Analyse en cours</title></head><body><h1>Analyse en cours</h1><p>%s (%d%%)</p></body></html>`, data.URL, data.Progress)\\n    return",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 203,
      "category": "http_methods",
      "value": "Set",
      "context": "    // Mode test - utiliser HTML simple\\n    if analyzingTemplate == nil {\\n>>> w.Header().Set(\"Content-Type\", \"text/html\")\\n    fmt.Fprintf(w, `<!DOCTYPE html><html><head><title>Analyse en cours</title></head><body><h1>Analyse en cours</h1><p>%s (%d%%)</p></body></html>`, data.URL, data.Progress)\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 208,
      "category": "template_names",
      "value": "analyzing.html",
      "context": "    }\\n    \\n>>> err := analyzingTemplate.ExecuteTemplate(w, \"analyzing.html\", data)\\n    if err != nil {\\n    http.Error(w, fmt.Sprintf(\"Erreur template: %v\", err), http.StatusInternalServerError)",
      "severity": "Low",
      "description": "Noms de templates hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 210,
      "category": "log_messages",
      "value": "Erreur template: %v",
      "context": "    err := analyzingTemplate.ExecuteTemplate(w, \"analyzing.html\", data)\\n    if err != nil {\\n>>> http.Error(w, fmt.Sprintf(\"Erreur template: %v\", err), http.StatusInternalServerError)\\n    return\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 269,
      "category": "http_headers",
      "value": "Content-Type",
      "context": "    // Mode test - utiliser HTML simple\\n    if resultsTemplate == nil {\\n>>> w.Header().Set(\"Content-Type\", \"text/html\")\\n    fmt.Fprintf(w, `<!DOCTYPE html><html><head><title>Résultats SEO</title></head><body><h1>Score Global SEO</h1><p>%s</p></body></html>`, extractDomain(urlParam))\\n    return",
      "severity": "Medium",
      "description": "Headers HTTP hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 269,
      "category": "content_types",
      "value": "text/html",
      "context": "    // Mode test - utiliser HTML simple\\n    if resultsTemplate == nil {\\n>>> w.Header().Set(\"Content-Type\", \"text/html\")\\n    fmt.Fprintf(w, `<!DOCTYPE html><html><head><title>Résultats SEO</title></head><body><h1>Score Global SEO</h1><p>%s</p></body></html>`, extractDomain(urlParam))\\n    return",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 269,
      "category": "http_methods",
      "value": "Set",
      "context": "    // Mode test - utiliser HTML simple\\n    if resultsTemplate == nil {\\n>>> w.Header().Set(\"Content-Type\", \"text/html\")\\n    fmt.Fprintf(w, `<!DOCTYPE html><html><head><title>Résultats SEO</title></head><body><h1>Score Global SEO</h1><p>%s</p></body></html>`, extractDomain(urlParam))\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 274,
      "category": "template_names",
      "value": "results.html",
      "context": "    }\\n    \\n>>> err := resultsTemplate.ExecuteTemplate(w, \"results.html\", data)\\n    if err != nil {\\n    http.Error(w, fmt.Sprintf(\"Erreur template: %v\", err), http.StatusInternalServerError)",
      "severity": "Low",
      "description": "Noms de templates hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 276,
      "category": "log_messages",
      "value": "Erreur template: %v",
      "context": "    err := resultsTemplate.ExecuteTemplate(w, \"results.html\", data)\\n    if err != nil {\\n>>> http.Error(w, fmt.Sprintf(\"Erreur template: %v\", err), http.StatusInternalServerError)\\n    return\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 302,
      "category": "api_endpoints",
      "value": "/analyze",
      "context": "    homeHandler(w, r)\\n    })\\n>>> mux.HandleFunc(\"/analyze\", analyzeHandler)\\n    mux.HandleFunc(\"/results\", resultsHandler)\\n    ",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 303,
      "category": "api_endpoints",
      "value": "/results",
      "context": "    })\\n    mux.HandleFunc(\"/analyze\", analyzeHandler)\\n>>> mux.HandleFunc(\"/results\", resultsHandler)\\n    \\n    // Routes API",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 306,
      "category": "api_endpoints",
      "value": "/api/analyze",
      "context": "    \\n    // Routes API\\n>>> mux.HandleFunc(\"/api/analyze\", api.AnalyzeHandler)\\n    mux.HandleFunc(\"/api/status/\", api.StatusHandler)\\n    mux.HandleFunc(\"/api/results/\", api.ResultsHandler)",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 306,
      "category": "api_endpoints",
      "value": "/api/analyze",
      "context": "    \\n    // Routes API\\n>>> mux.HandleFunc(\"/api/analyze\", api.AnalyzeHandler)\\n    mux.HandleFunc(\"/api/status/\", api.StatusHandler)\\n    mux.HandleFunc(\"/api/results/\", api.ResultsHandler)",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 307,
      "category": "api_endpoints",
      "value": "/api/status/",
      "context": "    // Routes API\\n    mux.HandleFunc(\"/api/analyze\", api.AnalyzeHandler)\\n>>> mux.HandleFunc(\"/api/status/\", api.StatusHandler)\\n    mux.HandleFunc(\"/api/results/\", api.ResultsHandler)\\n    ",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 307,
      "category": "api_endpoints",
      "value": "/api/status/",
      "context": "    // Routes API\\n    mux.HandleFunc(\"/api/analyze\", api.AnalyzeHandler)\\n>>> mux.HandleFunc(\"/api/status/\", api.StatusHandler)\\n    mux.HandleFunc(\"/api/results/\", api.ResultsHandler)\\n    ",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 308,
      "category": "api_endpoints",
      "value": "/api/results/",
      "context": "    mux.HandleFunc(\"/api/analyze\", api.AnalyzeHandler)\\n    mux.HandleFunc(\"/api/status/\", api.StatusHandler)\\n>>> mux.HandleFunc(\"/api/results/\", api.ResultsHandler)\\n    \\n    return mux",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 308,
      "category": "api_endpoints",
      "value": "/api/results/",
      "context": "    mux.HandleFunc(\"/api/analyze\", api.AnalyzeHandler)\\n    mux.HandleFunc(\"/api/status/\", api.StatusHandler)\\n>>> mux.HandleFunc(\"/api/results/\", api.ResultsHandler)\\n    \\n    return mux",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 315,
      "category": "http_methods",
      "value": "Load",
      "context": "    func main() {\\n    // Charger la configuration\\n>>> cfg, err := config.Load()\\n    if err != nil {\\n    log.Fatalf(\"Erreur chargement config: %v\", err)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/server/main.go",
      "line": 317,
      "category": "log_messages",
      "value": "Erreur chargement config: %v",
      "context": "    cfg, err := config.Load()\\n    if err != nil {\\n>>> log.Fatalf(\"Erreur chargement config: %v\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 322,
      "category": "log_messages",
      "value": "Erreur chargement templates: %v",
      "context": "    // Charger les templates\\n    if err := loadTemplates(); err != nil {\\n>>> log.Fatalf(\"Erreur chargement templates: %v\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 330,
      "category": "log_messages",
      "value": "📊 Interface SEO disponible à l",
      "context": "    addr := fmt.Sprintf(\"%s:%d\", cfg.Server.Host, cfg.Server.Port)\\n    log.Printf(constants.ServerStartedFormat, addr)\\n>>> log.Printf(\"📊 Interface SEO disponible à l'adresse ci-dessus\")\\n    \\n    // Démarrage du serveur",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 330,
      "category": "log_messages",
      "value": "📊 Interface SEO disponible à l",
      "context": "    addr := fmt.Sprintf(\"%s:%d\", cfg.Server.Host, cfg.Server.Port)\\n    log.Printf(constants.ServerStartedFormat, addr)\\n>>> log.Printf(\"📊 Interface SEO disponible à l'adresse ci-dessus\")\\n    \\n    // Démarrage du serveur",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/server/main.go",
      "line": 334,
      "category": "log_messages",
      "value": "Erreur serveur: %v",
      "context": "    // Démarrage du serveur\\n    if err := http.ListenAndServe(addr, server); err != nil {\\n>>> log.Fatalf(\"Erreur serveur: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 31,
      "category": "http_methods",
      "value": "Load",
      "context": "    \\n    // Load configuration\\n>>> cfg, err := config.Load()\\n    if err != nil {\\n    mainLogger.Fatal(\"Failed to load configuration\", map[string]interface{}{",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 33,
      "category": "log_messages",
      "value": "Failed to load configuration",
      "context": "    cfg, err := config.Load()\\n    if err != nil {\\n>>> mainLogger.Fatal(\"Failed to load configuration\", map[string]interface{}{\\n    \"error\": err.Error(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 38,
      "category": "log_messages",
      "value": "Configuration loaded",
      "context": "    }\\n    \\n>>> mainLogger.Info(\"Configuration loaded\", map[string]interface{}{\\n    \"env\":  cfg.Env,\\n    \"port\": cfg.Server.Port,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 46,
      "category": "log_messages",
      "value": "Failed to create orchestrator",
      "context": "    orchestrator, err := integration.NewOrchestrator(cfg)\\n    if err != nil {\\n>>> mainLogger.Fatal(\"Failed to create orchestrator\", map[string]interface{}{\\n    \"error\": err.Error(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 54,
      "category": "log_messages",
      "value": "Failed to start orchestrator",
      "context": "    ctx := context.Background()\\n    if err := orchestrator.Start(ctx); err != nil {\\n>>> mainLogger.Fatal(\"Failed to start orchestrator\", map[string]interface{}{\\n    \"error\": err.Error(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 62,
      "category": "log_messages",
      "value": "Failed to start web server",
      "context": "    webServer := web.NewWebServer(orchestrator, cfg)\\n    if err := webServer.Start(); err != nil {\\n>>> mainLogger.Fatal(\"Failed to start web server\", map[string]interface{}{\\n    \"error\": err.Error(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 67,
      "category": "log_messages",
      "value": "🔥 Fire Salamander started successfully",
      "context": "    }\\n    \\n>>> mainLogger.Info(\"🔥 Fire Salamander started successfully\", map[string]interface{}{\\n    \"version\": config.Version(),\\n    \"port\":    cfg.Server.Port,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 77,
      "category": "log_messages",
      "value": "Shutdown signal received, stopping gracefully...",
      "context": "    <-sigChan\\n    \\n>>> mainLogger.Info(\"Shutdown signal received, stopping gracefully...\")\\n    \\n    // Graceful shutdown",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 84,
      "category": "http_methods",
      "value": "Stop",
      "context": "    \\n    // Stop web server\\n>>> if err := webServer.Stop(shutdownCtx); err != nil {\\n    mainLogger.Error(\"Error stopping web server\", map[string]interface{}{\\n    \"error\": err.Error(),",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 85,
      "category": "log_messages",
      "value": "Error stopping web server",
      "context": "    // Stop web server\\n    if err := webServer.Stop(shutdownCtx); err != nil {\\n>>> mainLogger.Error(\"Error stopping web server\", map[string]interface{}{\\n    \"error\": err.Error(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 91,
      "category": "http_methods",
      "value": "Stop",
      "context": "    \\n    // Stop orchestrator\\n>>> if err := orchestrator.Stop(); err != nil {\\n    mainLogger.Error(\"Error stopping orchestrator\", map[string]interface{}{\\n    \"error\": err.Error(),",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 92,
      "category": "log_messages",
      "value": "Error stopping orchestrator",
      "context": "    // Stop orchestrator\\n    if err := orchestrator.Stop(); err != nil {\\n>>> mainLogger.Error(\"Error stopping orchestrator\", map[string]interface{}{\\n    \"error\": err.Error(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "cmd/firesalamander/main.go",
      "line": 97,
      "category": "log_messages",
      "value": "🔥 Fire Salamander stopped gracefully",
      "context": "    }\\n    \\n>>> mainLogger.Info(\"🔥 Fire Salamander stopped gracefully\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 115,
      "category": "log_messages",
      "value": "🎭 Starting Playwright frontend tests",
      "context": "    // RunFullTest executes comprehensive frontend tests\\n    func (pa *PlaywrightAgent) RunFullTest(ctx context.Context) (*PlaywrightResults, error) {\\n>>> log.Info(\"🎭 Starting Playwright frontend tests\")\\n    \\n    // 1. Test responsive design",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 119,
      "category": "log_messages",
      "value": "Responsive design test failed",
      "context": "    // 1. Test responsive design\\n    if err := pa.testResponsiveDesign(ctx); err != nil {\\n>>> log.Error(\"Responsive design test failed\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 124,
      "category": "log_messages",
      "value": "Accessibility test failed",
      "context": "    // 2. Test accessibility\\n    if err := pa.testAccessibility(ctx); err != nil {\\n>>> log.Error(\"Accessibility test failed\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 129,
      "category": "log_messages",
      "value": "Performance test failed",
      "context": "    // 3. Test performance\\n    if err := pa.testPerformance(ctx); err != nil {\\n>>> log.Error(\"Performance test failed\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 134,
      "category": "log_messages",
      "value": "Visual regression test failed",
      "context": "    // 4. Visual regression testing\\n    if err := pa.testVisualRegression(ctx); err != nil {\\n>>> log.Error(\"Visual regression test failed\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 139,
      "category": "log_messages",
      "value": "Cross-browser test failed",
      "context": "    // 5. Cross-browser testing\\n    if err := pa.testCrossBrowser(ctx); err != nil {\\n>>> log.Error(\"Cross-browser test failed\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 143,
      "category": "http_methods",
      "value": "calculateStatus",
      "context": "    \\n    // Calculate overall status\\n>>> pa.calculateStatus()\\n    \\n    // Generate report",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 147,
      "category": "log_messages",
      "value": "Failed to generate report",
      "context": "    // Generate report\\n    if err := pa.generateReport(); err != nil {\\n>>> log.Error(\"Failed to generate report\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 150,
      "category": "log_messages",
      "value": "Frontend tests completed",
      "context": "    }\\n    \\n>>> log.Info(\"Frontend tests completed\", map[string]interface{}{\\n    \"status\":         pa.results.Status,\\n    \"total_tests\":    pa.results.TotalTests,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 164,
      "category": "log_messages",
      "value": "Testing responsive design",
      "context": "    // testResponsiveDesign tests responsive design across viewports\\n    func (pa *PlaywrightAgent) testResponsiveDesign(ctx context.Context) error {\\n>>> log.Debug(\"Testing responsive design\")\\n    \\n    viewports := map[string][2]int{",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 177,
      "category": "log_messages",
      "value": "tests/screenshots/%s_%s_home.png",
      "context": "    screenshot := Screenshot{\\n    Name:     fmt.Sprintf(\"%s_%s_home\", viewport, browser),\\n>>> Path:     fmt.Sprintf(\"tests/screenshots/%s_%s_home.png\", viewport, browser),\\n    Viewport: viewport,\\n    Browser:  browser,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 186,
      "category": "log_messages",
      "value": "Captured screenshot",
      "context": "    pa.results.PassedTests++\\n    \\n>>> log.Debug(\"Captured screenshot\", map[string]interface{}{\\n    \"viewport\": viewport,\\n    \"browser\":  browser,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 199,
      "category": "log_messages",
      "value": "Testing accessibility with axe-core",
      "context": "    // testAccessibility tests accessibility compliance\\n    func (pa *PlaywrightAgent) testAccessibility(ctx context.Context) error {\\n>>> log.Debug(\"Testing accessibility with axe-core\")\\n    \\n    // Simulate axe-core analysis via MCP",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 229,
      "category": "log_messages",
      "value": "Testing Core Web Vitals",
      "context": "    // testPerformance tests Core Web Vitals\\n    func (pa *PlaywrightAgent) testPerformance(ctx context.Context) error {\\n>>> log.Debug(\"Testing Core Web Vitals\")\\n    \\n    // Simulate Lighthouse performance audit via MCP",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 249,
      "category": "log_messages",
      "value": "Running visual regression tests",
      "context": "    // testVisualRegression performs visual regression testing\\n    func (pa *PlaywrightAgent) testVisualRegression(ctx context.Context) error {\\n>>> log.Debug(\"Running visual regression tests\")\\n    \\n    // Simulate Percy visual comparison",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 267,
      "category": "log_messages",
      "value": "Testing cross-browser compatibility",
      "context": "    // testCrossBrowser tests compatibility across browsers\\n    func (pa *PlaywrightAgent) testCrossBrowser(ctx context.Context) error {\\n>>> log.Debug(\"Testing cross-browser compatibility\")\\n    \\n    // Test key user flows on each browser",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 282,
      "category": "log_messages",
      "value": "Cross-browser test passed",
      "context": "    pa.results.PassedTests++\\n    \\n>>> log.Debug(\"Cross-browser test passed\", map[string]interface{}{\\n    \"browser\":   browser,\\n    \"test_case\": testCase,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/frontend/playwright_agent.go",
      "line": 320,
      "category": "log_messages",
      "value": "Validating SEPTEO design compliance",
      "context": "    // ValidateSEPTEODesign validates SEPTEO brand compliance\\n    func (pa *PlaywrightAgent) ValidateSEPTEODesign(ctx context.Context) error {\\n>>> log.Debug(\"Validating SEPTEO design compliance\")\\n    \\n    // Check primary color usage (#ff6136)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 176,
      "category": "error_messages",
      "value": "failed to install gosec: %w",
      "context": "    cmd := exec.Command(constants.SecurityCmdGo, constants.SecurityCmdInstall, constants.SecurityCmdInstallGosec)\\n    if err := cmd.Run(); err != nil {\\n>>> return fmt.Errorf(\"failed to install gosec: %w\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 211,
      "category": "http_methods",
      "value": "Output",
      "context": "    \\n    cmd := exec.Command(constants.SecurityToolNancy, constants.SecurityArgSleuth, \"--format\", constants.SecurityArgJSON)\\n>>> output, err := cmd.Output()\\n    \\n    if err != nil {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 214,
      "category": "log_messages",
      "value": "nancy found vulnerable dependencies",
      "context": "    \\n    if err != nil {\\n>>> log.Debug(\"nancy found vulnerable dependencies\", map[string]interface{}{\"output\": string(output)})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 228,
      "category": "log_messages",
      "value": "Failed to install govulncheck",
      "context": "    cmd := exec.Command(\"go\", \"install\", \"golang.org/x/vuln/cmd/govulncheck@latest\")\\n    if err := cmd.Run(); err != nil {\\n>>> log.Warn(\"Failed to install govulncheck\", map[string]interface{}{\"error\": err.Error()})\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 234,
      "category": "http_methods",
      "value": "Output",
      "context": "    // Run govulncheck\\n    cmd = exec.Command(\"govulncheck\", \"-json\", \"./...\")\\n>>> output, err := cmd.Output()\\n    \\n    if err != nil {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 237,
      "category": "log_messages",
      "value": "govulncheck found vulnerabilities",
      "context": "    \\n    if err != nil {\\n>>> log.Debug(\"govulncheck found vulnerabilities\", map[string]interface{}{\"output\": string(output)})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 259,
      "category": "log_messages",
      "value": "Scanning for hardcoded secrets",
      "context": "    // scanForSecrets scans for hardcoded secrets\\n    func (sa *SecurityAgent) scanForSecrets(ctx context.Context) error {\\n>>> log.Debug(\"Scanning for hardcoded secrets\")\\n    \\n    // Use truffleHog or gitleaks for secret scanning",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 284,
      "category": "file_extensions",
      "value": ".go",
      "context": "    \\n    // Only scan text files\\n>>> if !strings.HasSuffix(path, \".go\") &&\\n    !strings.HasSuffix(path, \".yaml\") &&\\n    !strings.HasSuffix(path, \".yml\") &&",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 285,
      "category": "file_extensions",
      "value": ".yaml",
      "context": "    // Only scan text files\\n    if !strings.HasSuffix(path, \".go\") &&\\n>>> !strings.HasSuffix(path, \".yaml\") &&\\n    !strings.HasSuffix(path, \".yml\") &&\\n    !strings.HasSuffix(path, \".env\") {",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 286,
      "category": "file_extensions",
      "value": ".yml",
      "context": "    if !strings.HasSuffix(path, \".go\") &&\\n    !strings.HasSuffix(path, \".yaml\") &&\\n>>> !strings.HasSuffix(path, \".yml\") &&\\n    !strings.HasSuffix(path, \".env\") {\\n    return nil",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 287,
      "category": "file_extensions",
      "value": ".env",
      "context": "    !strings.HasSuffix(path, \".yaml\") &&\\n    !strings.HasSuffix(path, \".yml\") &&\\n>>> !strings.HasSuffix(path, \".env\") {\\n    return nil\\n    }",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 302,
      "category": "log_messages",
      "value": "Running dynamic security analysis",
      "context": "    // runDynamicAnalysis performs dynamic security testing\\n    func (sa *SecurityAgent) runDynamicAnalysis(ctx context.Context, baseURL string) error {\\n>>> log.Debug(\"Running dynamic security analysis\", map[string]interface{}{\"target\": baseURL})\\n    \\n    // Test for common OWASP Top 10 vulnerabilities",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 320,
      "category": "log_messages",
      "value": "Running OWASP test",
      "context": "    for _, test := range tests {\\n    // Simulate security test\\n>>> log.Debug(\"Running OWASP test\", map[string]interface{}{\"test\": test})\\n    \\n    // For demo purposes, add a low-severity finding",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/security/security_agent.go",
      "line": 342,
      "category": "log_messages",
      "value": "Checking HTTP security headers",
      "context": "    // checkSecurityHeaders analyzes HTTP security headers\\n    func (sa *SecurityAgent) checkSecurityHeaders(ctx context.Context, baseURL string) error {\\n>>> log.Debug(\"Checking HTTP security headers\")\\n    \\n    // Simulate HTTP security headers check",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 142,
      "category": "log_messages",
      "value": "QA Agent initialized",
      "context": "    }\\n    \\n>>> log.Info(\"QA Agent initialized\", map[string]interface{}{\\n    \"min_coverage\": config.MinCoverage,\\n    \"tools\":        getEnabledTools(config),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 155,
      "category": "log_messages",
      "value": "🔍 Starting full QA analysis",
      "context": "    // RunFullAnalysis exécute une analyse complète de qualité\\n    func (qa *QAAgent) RunFullAnalysis() (*QAStats, error) {\\n>>> log.Info(\"🔍 Starting full QA analysis\")\\n    \\n    qa.stats = &QAStats{",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 163,
      "category": "log_messages",
      "value": "Running unit tests",
      "context": "    \\n    // 1. Tests unitaires\\n>>> log.Debug(\"Running unit tests\")\\n    if err := qa.runUnitTests(); err != nil {\\n    log.Error(constants.MsgUnitTestsFailed, map[string]interface{}{\"error\": err.Error()})",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 169,
      "category": "log_messages",
      "value": "Analyzing test coverage",
      "context": "    \\n    // 2. Coverage analysis\\n>>> log.Debug(\"Analyzing test coverage\")\\n    if err := qa.analyzeCoverage(); err != nil {\\n    log.Error(constants.MsgCoverageAnalysisFailed, map[string]interface{}{\"error\": err.Error()})",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 184,
      "category": "log_messages",
      "value": "Running golangci-lint",
      "context": "    // 4. Linting\\n    if qa.config.EnableLint {\\n>>> log.Debug(\"Running golangci-lint\")\\n    if err := qa.runLinting(); err != nil {\\n    log.Warn(\"Linting issues found\", map[string]interface{}{\"error\": err.Error()})",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 186,
      "category": "log_messages",
      "value": "Linting issues found",
      "context": "    log.Debug(\"Running golangci-lint\")\\n    if err := qa.runLinting(); err != nil {\\n>>> log.Warn(\"Linting issues found\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 194,
      "category": "log_messages",
      "value": "Security analysis issues",
      "context": "    log.Debug(constants.MsgRunningSecurityCheck)\\n    if err := qa.runSecurityAnalysis(); err != nil {\\n>>> log.Warn(\"Security analysis issues\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 200,
      "category": "log_messages",
      "value": "Analyzing code complexity",
      "context": "    // 6. Complexity analysis\\n    if qa.config.EnableComplexity {\\n>>> log.Debug(\"Analyzing code complexity\")\\n    if err := qa.analyzeComplexity(); err != nil {\\n    log.Warn(\"Complexity analysis issues\", map[string]interface{}{\"error\": err.Error()})",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 202,
      "category": "log_messages",
      "value": "Complexity analysis issues",
      "context": "    log.Debug(\"Analyzing code complexity\")\\n    if err := qa.analyzeComplexity(); err != nil {\\n>>> log.Warn(\"Complexity analysis issues\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 211,
      "category": "log_messages",
      "value": "Failed to generate report",
      "context": "    // Générer le rapport\\n    if err := qa.generateReport(); err != nil {\\n>>> log.Error(\"Failed to generate report\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 214,
      "category": "log_messages",
      "value": "QA analysis completed",
      "context": "    }\\n    \\n>>> log.Info(\"QA analysis completed\", map[string]interface{}{\\n    \"overall_score\": qa.stats.OverallScore,\\n    \"status\":        qa.stats.Status,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 226,
      "category": "http_methods",
      "value": "Output",
      "context": "    func (qa *QAAgent) runUnitTests() error {\\n    cmd := exec.Command(constants.GoTool, constants.TestTool, constants.TestArgV, \"-json\", constants.VetArgAll)\\n>>> output, err := cmd.Output()\\n    if err != nil {\\n    return fmt.Errorf(\"failed to run tests: %w\", err)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 228,
      "category": "error_messages",
      "value": "failed to run tests: %w",
      "context": "    output, err := cmd.Output()\\n    if err != nil {\\n>>> return fmt.Errorf(\"failed to run tests: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 241,
      "category": "error_messages",
      "value": "failed to generate coverage: %w",
      "context": "    cmd := exec.Command(constants.GoTool, constants.TestTool, \"-coverprofile=\" + constants.CoverageProfileFile, constants.VetArgAll)\\n    if err := cmd.Run(); err != nil {\\n>>> return fmt.Errorf(\"failed to generate coverage: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 246,
      "category": "http_methods",
      "value": "Output",
      "context": "    // Analyser le coverage par package\\n    cmd = exec.Command(constants.GoTool, \"tool\", \"cover\", \"-func=\" + constants.CoverageProfileFile)\\n>>> output, err := cmd.Output()\\n    if err != nil {\\n    return fmt.Errorf(\"failed to analyze coverage: %w\", err)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 248,
      "category": "error_messages",
      "value": "failed to analyze coverage: %w",
      "context": "    output, err := cmd.Output()\\n    if err != nil {\\n>>> return fmt.Errorf(\"failed to analyze coverage: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 276,
      "category": "log_messages",
      "value": "golangci-lint not found, skipping lint analysis",
      "context": "    // Vérifier si golangci-lint est installé\\n    if _, err := exec.LookPath(\"golangci-lint\"); err != nil {\\n>>> log.Warn(\"golangci-lint not found, skipping lint analysis\")\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 281,
      "category": "http_methods",
      "value": "Output",
      "context": "    \\n    cmd := exec.Command(\"golangci-lint\", \"run\", \"--out-format\", \"json\")\\n>>> output, err := cmd.Output()\\n    \\n    if err != nil {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 285,
      "category": "error_messages",
      "value": "linting issues found",
      "context": "    if err != nil {\\n    qa.parseLintResults(output)\\n>>> return fmt.Errorf(\"linting issues found\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 295,
      "category": "log_messages",
      "value": "gosec not found, skipping security analysis",
      "context": "    // Utiliser gosec si disponible\\n    if _, err := exec.LookPath(\"gosec\"); err != nil {\\n>>> log.Warn(\"gosec not found, skipping security analysis\")\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 300,
      "category": "http_methods",
      "value": "Output",
      "context": "    \\n    cmd := exec.Command(\"gosec\", \"-fmt\", \"json\", \"./...\")\\n>>> output, err := cmd.Output()\\n    \\n    if err != nil {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 304,
      "category": "error_messages",
      "value": "security issues found",
      "context": "    if err != nil {\\n    qa.parseSecurityResults(output)\\n>>> return fmt.Errorf(\"security issues found\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 314,
      "category": "log_messages",
      "value": "gocyclo not found, skipping complexity analysis",
      "context": "    // Utiliser gocyclo si disponible\\n    if _, err := exec.LookPath(\"gocyclo\"); err != nil {\\n>>> log.Warn(\"gocyclo not found, skipping complexity analysis\")\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 319,
      "category": "http_methods",
      "value": "Output",
      "context": "    \\n    cmd := exec.Command(\"gocyclo\", \"-over\", \"10\", \".\")\\n>>> output, err := cmd.Output()\\n    \\n    if err == nil && len(output) > 0 {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 323,
      "category": "error_messages",
      "value": "high complexity functions found",
      "context": "    if err == nil && len(output) > 0 {\\n    qa.parseComplexityResults(string(output))\\n>>> return fmt.Errorf(\"high complexity functions found\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/qa/qa_agent.go",
      "line": 369,
      "category": "file_extensions",
      "value": ".go",
      "context": "    }\\n    }\\n>>> } else if strings.Contains(line, \".go\") && strings.Contains(line, \"%\") {\\n    // Coverage par fichier/package\\n    parts := strings.Fields(line)",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 16,
      "category": "log_messages",
      "value": "PERFORMANCE-AGENT",
      "context": "    )\\n    \\n>>> var log = logger.New(\"PERFORMANCE-AGENT\")\\n    \\n    // K6Agent performs load testing with k6",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 131,
      "category": "log_messages",
      "value": "⚡ Starting k6 performance testing",
      "context": "    // RunPerformanceTest executes comprehensive performance testing\\n    func (k6 *K6Agent) RunPerformanceTest(ctx context.Context) (*K6Results, error) {\\n>>> log.Info(\"⚡ Starting k6 performance testing\")\\n    \\n    // 1. Create k6 test script",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 136,
      "category": "error_messages",
      "value": "failed to create k6 script: %w",
      "context": "    scriptPath, err := k6.createK6Script()\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"failed to create k6 script: %w\", err)\\n    }\\n    defer os.Remove(scriptPath)",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 142,
      "category": "log_messages",
      "value": "Load test failed",
      "context": "    // 2. Run load test\\n    if err := k6.runLoadTest(ctx, scriptPath); err != nil {\\n>>> log.Error(\"Load test failed\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 147,
      "category": "log_messages",
      "value": "Stress test failed",
      "context": "    // 3. Run stress test\\n    if err := k6.runStressTest(ctx, scriptPath); err != nil {\\n>>> log.Error(\"Stress test failed\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 152,
      "category": "log_messages",
      "value": "Memory leak detection failed",
      "context": "    // 4. Check for memory leaks\\n    if err := k6.checkMemoryLeaks(ctx); err != nil {\\n>>> log.Error(\"Memory leak detection failed\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 157,
      "category": "log_messages",
      "value": "CPU profiling failed",
      "context": "    // 5. CPU profiling\\n    if err := k6.profileCPU(ctx); err != nil {\\n>>> log.Error(\"CPU profiling failed\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 165,
      "category": "log_messages",
      "value": "Failed to generate performance report",
      "context": "    // Generate report\\n    if err := k6.generateReport(); err != nil {\\n>>> log.Error(\"Failed to generate performance report\", map[string]interface{}{\"error\": err.Error()})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 168,
      "category": "log_messages",
      "value": "Performance testing completed",
      "context": "    }\\n    \\n>>> log.Info(\"Performance testing completed\", map[string]interface{}{\\n    \"score\":          k6.results.Score,\\n    \"p99_response\":   k6.results.ResponseTimes.P99,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 231,
      "category": "http_methods",
      "value": "add",
      "context": "    \\n    // Record metrics\\n>>> responseTime.add(response.timings.duration);\\n    errorRate.add(response.status !== 200);\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 232,
      "category": "http_methods",
      "value": "add",
      "context": "    // Record metrics\\n    responseTime.add(response.timings.duration);\\n>>> errorRate.add(response.status !== 200);\\n    \\n    // Validate response",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 265,
      "category": "log_messages",
      "value": "Running k6 load test",
      "context": "    // runLoadTest executes the main load test\\n    func (k6 *K6Agent) runLoadTest(ctx context.Context, scriptPath string) error {\\n>>> log.Debug(\"Running k6 load test\")\\n    \\n    // Check if k6 is installed",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 269,
      "category": "error_messages",
      "value": "k6 not found - install with: brew install k6",
      "context": "    // Check if k6 is installed\\n    if _, err := exec.LookPath(\"k6\"); err != nil {\\n>>> return fmt.Errorf(\"k6 not found - install with: brew install k6\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 287,
      "category": "log_messages",
      "value": "Running k6 stress test",
      "context": "    // runStressTest executes stress testing with higher load\\n    func (k6 *K6Agent) runStressTest(ctx context.Context, scriptPath string) error {\\n>>> log.Debug(\"Running k6 stress test\")\\n    \\n    // Create stress test script with higher VUs",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 310,
      "category": "log_messages",
      "value": "Stress test output",
      "context": "    \\n    if err != nil {\\n>>> log.Debug(\"Stress test output\", map[string]interface{}{\"output\": string(output)})\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 318,
      "category": "log_messages",
      "value": "Checking for memory leaks",
      "context": "    // checkMemoryLeaks monitors memory usage during testing\\n    func (k6 *K6Agent) checkMemoryLeaks(ctx context.Context) error {\\n>>> log.Debug(\"Checking for memory leaks\")\\n    \\n    // Simulate memory leak detection",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/performance/k6_agent.go",
      "line": 336,
      "category": "log_messages",
      "value": "Profiling CPU usage",
      "context": "    // profileCPU performs CPU profiling\\n    func (k6 *K6Agent) profileCPU(ctx context.Context) error {\\n>>> log.Debug(\"Profiling CPU usage\")\\n    \\n    // Simulate CPU profiling results",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 105,
      "category": "log_messages",
      "value": "🔍 Starting data integrity audit",
      "context": "    // RunFullDataIntegrityAudit lance un audit complet de l'intégrité des données\\n    func (d *DataIntegrityAgent) RunFullDataIntegrityAudit() error {\\n>>> log.Println(\"🔍 Starting data integrity audit\")\\n    \\n    // 1. Vérifier l'existence de la base de données",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 109,
      "category": "error_messages",
      "value": "database check failed: %w",
      "context": "    // 1. Vérifier l'existence de la base de données\\n    if err := d.checkDatabaseExists(); err != nil {\\n>>> return fmt.Errorf(\"database check failed: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 114,
      "category": "error_messages",
      "value": "database connection failed: %w",
      "context": "    // 2. Se connecter à la base de données\\n    if err := d.connectToDatabase(); err != nil {\\n>>> return fmt.Errorf(\"database connection failed: %w\", err)\\n    }\\n    defer d.DB.Close()",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 116,
      "category": "http_methods",
      "value": "Close",
      "context": "    return fmt.Errorf(\"database connection failed: %w\", err)\\n    }\\n>>> defer d.DB.Close()\\n    \\n    // 3. Validation du schéma",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 138,
      "category": "log_messages",
      "value": "⚠️ Failed to generate report: %v",
      "context": "    // 9. Générer le rapport\\n    if err := d.generateReport(); err != nil {\\n>>> log.Printf(\"⚠️ Failed to generate report: %v\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 138,
      "category": "log_messages",
      "value": "⚠️ Failed to generate report: %v",
      "context": "    // 9. Générer le rapport\\n    if err := d.generateReport(); err != nil {\\n>>> log.Printf(\"⚠️ Failed to generate report: %v\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 141,
      "category": "log_messages",
      "value": "✅ Data integrity audit completed - Score: %d/100",
      "context": "    }\\n    \\n>>> log.Printf(\"✅ Data integrity audit completed - Score: %d/100\", d.Stats.OverallScore)\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 141,
      "category": "log_messages",
      "value": "✅ Data integrity audit completed - Score: %d/100",
      "context": "    }\\n    \\n>>> log.Printf(\"✅ Data integrity audit completed - Score: %d/100\", d.Stats.OverallScore)\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 147,
      "category": "http_methods",
      "value": "Stat",
      "context": "    // checkDatabaseExists vérifie que la base de données existe\\n    func (d *DataIntegrityAgent) checkDatabaseExists() error {\\n>>> if _, err := os.Stat(d.Config.DatabasePath); os.IsNotExist(err) {\\n    // Si la DB n'existe pas, créer une base vide pour les tests\\n    log.Println(\"📁 Database not found, creating test database\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 149,
      "category": "log_messages",
      "value": "📁 Database not found, creating test database",
      "context": "    if _, err := os.Stat(d.Config.DatabasePath); os.IsNotExist(err) {\\n    // Si la DB n'existe pas, créer une base vide pour les tests\\n>>> log.Println(\"📁 Database not found, creating test database\")\\n    return d.createTestDatabase()\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 161,
      "category": "http_methods",
      "value": "Close",
      "context": "    return err\\n    }\\n>>> defer db.Close()\\n    \\n    // Créer quelques tables de test basiques",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 229,
      "category": "log_messages",
      "value": "✅ Connected to database",
      "context": "    }\\n    \\n>>> log.Println(\"✅ Connected to database\")\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 235,
      "category": "log_messages",
      "value": "🏗️ Validating database schema",
      "context": "    // validateSchema valide la structure du schéma de base de données\\n    func (d *DataIntegrityAgent) validateSchema() {\\n>>> log.Println(\"🏗️ Validating database schema\")\\n    \\n    var results []TestResult",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 249,
      "category": "log_messages",
      "value": "Table Exists: %s",
      "context": "    if err != nil {\\n    results = append(results, TestResult{\\n>>> Test:        fmt.Sprintf(\"Table Exists: %s\", tableName),\\n    Status:      constants.StatusError,\\n    Description: fmt.Sprintf(\"Error checking table: %v\", err),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 251,
      "category": "log_messages",
      "value": "Error checking table: %v",
      "context": "    Test:        fmt.Sprintf(\"Table Exists: %s\", tableName),\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking table: %v\", err),\\n    Severity:    constants.SeverityHigh,\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 256,
      "category": "log_messages",
      "value": "Table Exists: %s",
      "context": "    } else if count == 0 {\\n    results = append(results, TestResult{\\n>>> Test:        fmt.Sprintf(\"Table Exists: %s\", tableName),\\n    Status:      constants.StatusFailed,\\n    Description: fmt.Sprintf(\"Required table '%s' is missing\", tableName),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 258,
      "category": "log_messages",
      "value": "Required table ",
      "context": "    Test:        fmt.Sprintf(\"Table Exists: %s\", tableName),\\n    Status:      constants.StatusFailed,\\n>>> Description: fmt.Sprintf(\"Required table '%s' is missing\", tableName),\\n    Severity:    constants.SeverityHigh,\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 271,
      "category": "log_messages",
      "value": "Table Exists: %s",
      "context": "    } else {\\n    results = append(results, TestResult{\\n>>> Test:        fmt.Sprintf(\"Table Exists: %s\", tableName),\\n    Status:      constants.StatusPassed,\\n    Description: fmt.Sprintf(\"Table '%s' exists\", tableName),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 297,
      "category": "log_messages",
      "value": "Error checking constraints: %v",
      "context": "    Test:        constants.TestConstraintsCheck,\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking constraints: %v\", err),\\n    })\\n    return",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 301,
      "category": "http_methods",
      "value": "Close",
      "context": "    return\\n    }\\n>>> defer rows.Close()\\n    \\n    constraintCount := 0",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 316,
      "category": "log_messages",
      "value": "Found %d tables with CHECK constraints",
      "context": "    Test:        constants.TestDataConstraints,\\n    Status:      constants.StatusPassed,\\n>>> Description: fmt.Sprintf(\"Found %d tables with CHECK constraints\", constraintCount),\\n    Value:       fmt.Sprintf(\"%d\", constraintCount),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 331,
      "category": "log_messages",
      "value": "🔍 Testing data consistency",
      "context": "    // testDataConsistency teste la cohérence des données\\n    func (d *DataIntegrityAgent) testDataConsistency() {\\n>>> log.Println(\"🔍 Testing data consistency\")\\n    \\n    var results []TestResult",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 361,
      "category": "log_messages",
      "value": "Error checking NULL values: %v",
      "context": "    Test:        \"NULL Values - crawl_sessions.url\",\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking NULL values: %v\", err),\\n    })\\n    } else if nullCount > 0 {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 367,
      "category": "log_messages",
      "value": "Found %d records with NULL/empty URL",
      "context": "    Test:        \"NULL Values - crawl_sessions.url\",\\n    Status:      constants.StatusFailed,\\n>>> Description: fmt.Sprintf(\"Found %d records with NULL/empty URL\", nullCount),\\n    Value:       fmt.Sprintf(\"%d\", nullCount),\\n    Severity:    constants.SeverityHigh,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 405,
      "category": "log_messages",
      "value": "Error checking duplicates: %v",
      "context": "    Test:        \"Unique Constraints - pages\",\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking duplicates: %v\", err),\\n    })\\n    return",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 409,
      "category": "http_methods",
      "value": "Close",
      "context": "    return\\n    }\\n>>> defer rows.Close()\\n    \\n    duplicateCount := 0",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 424,
      "category": "log_messages",
      "value": "Found %d duplicate page records",
      "context": "    Test:        \"Unique Constraints - pages\",\\n    Status:      constants.StatusFailed,\\n>>> Description: fmt.Sprintf(\"Found %d duplicate page records\", duplicateCount),\\n    Value:       fmt.Sprintf(\"%d\", duplicateCount),\\n    Severity:    constants.SeverityMedium,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 462,
      "category": "log_messages",
      "value": "Error checking timestamps: %v",
      "context": "    Test:        constants.TestTimestampConsistency,\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking timestamps: %v\", err),\\n    })\\n    } else if inconsistentCount > 0 {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 468,
      "category": "log_messages",
      "value": "Found %d sessions with finish time before start time",
      "context": "    Test:        constants.TestTimestampConsistency,\\n    Status:      constants.StatusFailed,\\n>>> Description: fmt.Sprintf(\"Found %d sessions with finish time before start time\", inconsistentCount),\\n    Value:       fmt.Sprintf(\"%d\", inconsistentCount),\\n    Severity:    constants.SeverityMedium,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 505,
      "category": "log_messages",
      "value": "Error checking page counts: %v",
      "context": "    Test:        \"Numeric Consistency - Page Counts\",\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking page counts: %v\", err),\\n    })\\n    } else if inconsistentCount > 0 {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 511,
      "category": "log_messages",
      "value": "Found %d sessions where crawled > found",
      "context": "    Test:        \"Numeric Consistency - Page Counts\",\\n    Status:      constants.StatusFailed,\\n>>> Description: fmt.Sprintf(\"Found %d sessions where crawled > found\", inconsistentCount),\\n    Value:       fmt.Sprintf(\"%d\", inconsistentCount),\\n    Severity:    constants.SeverityMedium,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 526,
      "category": "log_messages",
      "value": "🔗 Testing referential integrity",
      "context": "    // testReferentialIntegrity teste l'intégrité référentielle\\n    func (d *DataIntegrityAgent) testReferentialIntegrity() {\\n>>> log.Println(\"🔗 Testing referential integrity\")\\n    \\n    var results []TestResult",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 550,
      "category": "log_messages",
      "value": "Foreign Key - %s.%s",
      "context": "    err := d.DB.QueryRow(query).Scan(&orphanCount)\\n    \\n>>> testName := fmt.Sprintf(\"Foreign Key - %s.%s\", childTable, childCol)\\n    \\n    if err != nil {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 556,
      "category": "log_messages",
      "value": "Error checking foreign key: %v",
      "context": "    Test:        testName,\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking foreign key: %v\", err),\\n    })\\n    } else if orphanCount > 0 {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 562,
      "category": "log_messages",
      "value": "Found %d orphaned records",
      "context": "    Test:        testName,\\n    Status:      constants.StatusFailed,\\n>>> Description: fmt.Sprintf(\"Found %d orphaned records\", orphanCount),\\n    Value:       fmt.Sprintf(\"%d\", orphanCount),\\n    Severity:    constants.SeverityHigh,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 571,
      "category": "log_messages",
      "value": "Orphaned records referencing non-existent %s",
      "context": "    Table:    childTable,\\n    Column:   childCol,\\n>>> Issue:    fmt.Sprintf(\"Orphaned records referencing non-existent %s\", parentTable),\\n    Impact:   constants.MsgDataInconsistencyAndPotentialErrors,\\n    Severity: constants.SeverityHigh,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 587,
      "category": "log_messages",
      "value": "📊 Testing data quality",
      "context": "    // testDataQuality teste la qualité des données\\n    func (d *DataIntegrityAgent) testDataQuality() {\\n>>> log.Println(\"📊 Testing data quality\")\\n    \\n    var results []TestResult",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 618,
      "category": "log_messages",
      "value": "Error checking URL quality: %v",
      "context": "    Test:        constants.TestURLQuality,\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking URL quality: %v\", err),\\n    })\\n    } else if malformedCount > 0 {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 624,
      "category": "log_messages",
      "value": "Found %d potentially malformed URLs",
      "context": "    Test:        constants.TestURLQuality,\\n    Status:      constants.StatusWarning,\\n>>> Description: fmt.Sprintf(\"Found %d potentially malformed URLs\", malformedCount),\\n    Value:       fmt.Sprintf(\"%d\", malformedCount),\\n    Severity:    constants.SeverityMedium,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 653,
      "category": "log_messages",
      "value": "Error checking status codes: %v",
      "context": "    Test:        constants.TestHTTPStatusCodes,\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking status codes: %v\", err),\\n    })\\n    } else if invalidCodes > 0 {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 659,
      "category": "log_messages",
      "value": "Found %d records with invalid status codes",
      "context": "    Test:        constants.TestHTTPStatusCodes,\\n    Status:      constants.StatusWarning,\\n>>> Description: fmt.Sprintf(\"Found %d records with invalid status codes\", invalidCodes),\\n    Value:       fmt.Sprintf(\"%d\", invalidCodes),\\n    Severity:    constants.SeverityMedium,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 688,
      "category": "log_messages",
      "value": "Error checking SEO scores: %v",
      "context": "    Test:        constants.TestSEOScoreValidity,\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Error checking SEO scores: %v\", err),\\n    })\\n    } else if invalidScores > 0 {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 694,
      "category": "log_messages",
      "value": "Found %d scores outside valid range (0-100)",
      "context": "    Test:        constants.TestSEOScoreValidity,\\n    Status:      constants.StatusFailed,\\n>>> Description: fmt.Sprintf(\"Found %d scores outside valid range (0-100)\", invalidScores),\\n    Value:       fmt.Sprintf(\"%d\", invalidScores),\\n    Severity:    constants.SeverityMedium,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 709,
      "category": "log_messages",
      "value": "⚡ Testing database performance",
      "context": "    // testPerformance teste les performances de la base de données\\n    func (d *DataIntegrityAgent) testPerformance() {\\n>>> log.Println(\"⚡ Testing database performance\")\\n    \\n    var results []TestResult",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 741,
      "category": "log_messages",
      "value": "Query Performance - %s",
      "context": "    if err != nil {\\n    *results = append(*results, TestResult{\\n>>> Test:        fmt.Sprintf(\"Query Performance - %s\", testName),\\n    Status:      constants.StatusError,\\n    Description: fmt.Sprintf(\"Query failed: %v\", err),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 743,
      "category": "log_messages",
      "value": "Query failed: %v",
      "context": "    Test:        fmt.Sprintf(\"Query Performance - %s\", testName),\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Query failed: %v\", err),\\n    })\\n    } else if duration > constants.SlowResponseTime {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 747,
      "category": "log_messages",
      "value": "Query Performance - %s",
      "context": "    } else if duration > constants.SlowResponseTime {\\n    *results = append(*results, TestResult{\\n>>> Test:        fmt.Sprintf(\"Query Performance - %s\", testName),\\n    Status:      constants.StatusWarning,\\n    Description: fmt.Sprintf(\"Slow query: %v\", duration),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 755,
      "category": "log_messages",
      "value": "Query Performance - %s",
      "context": "    } else {\\n    *results = append(*results, TestResult{\\n>>> Test:        fmt.Sprintf(\"Query Performance - %s\", testName),\\n    Status:      constants.StatusPassed,\\n    Description: fmt.Sprintf(\"Good performance: %v\", duration),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 757,
      "category": "log_messages",
      "value": "Good performance: %v",
      "context": "    Test:        fmt.Sprintf(\"Query Performance - %s\", testName),\\n    Status:      constants.StatusPassed,\\n>>> Description: fmt.Sprintf(\"Good performance: %v\", duration),\\n    Value:       duration.String(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 766,
      "category": "http_methods",
      "value": "Stat",
      "context": "    // testDatabaseSize teste la taille de la base de données\\n    func (d *DataIntegrityAgent) testDatabaseSize(results *[]TestResult) {\\n>>> fileInfo, err := os.Stat(d.Config.DatabasePath)\\n    if err != nil {\\n    *results = append(*results, TestResult{",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 771,
      "category": "log_messages",
      "value": "Cannot check database size: %v",
      "context": "    Test:        constants.TestDatabaseSize,\\n    Status:      constants.StatusError,\\n>>> Description: fmt.Sprintf(\"Cannot check database size: %v\", err),\\n    })\\n    return",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 780,
      "category": "log_messages",
      "value": "Database size: %.2f MB",
      "context": "    \\n    status := constants.StatusPassed\\n>>> description := fmt.Sprintf(\"Database size: %.2f MB\", sizeMB)\\n    \\n    if sizeMB > 1000 { // Plus de 1GB",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 869,
      "category": "log_messages",
      "value": "📊 Data integrity report generated: %s",
      "context": "    }\\n    \\n>>> log.Printf(\"📊 Data integrity report generated: %s\", jsonPath)\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 869,
      "category": "log_messages",
      "value": "📊 Data integrity report generated: %s",
      "context": "    }\\n    \\n>>> log.Printf(\"📊 Data integrity report generated: %s\", jsonPath)\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 964,
      "category": "log_messages",
      "value": "<br><strong>Count:</strong> %d",
      "context": "    func() string {\\n    if issue.Count > 0 {\\n>>> return fmt.Sprintf(\"<br><strong>Count:</strong> %d\", issue.Count)\\n    }\\n    return \"\"",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 994,
      "category": "log_messages",
      "value": "<br><strong>Value:</strong> %s",
      "context": "    func() string {\\n    if result.Value != \"\" {\\n>>> return fmt.Sprintf(\"<br><strong>Value:</strong> %s\", result.Value)\\n    }\\n    return \"\"",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 1000,
      "category": "log_messages",
      "value": "<br><strong>Expected:</strong> %s",
      "context": "    func() string {\\n    if result.Expected != \"\" {\\n>>> return fmt.Sprintf(\"<br><strong>Expected:</strong> %s\", result.Expected)\\n    }\\n    return \"\"",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 1017,
      "category": "log_messages",
      "value": "🔥 Fire Salamander - Data Integrity Agent",
      "context": "    \\n    func main() {\\n>>> log.Println(\"🔥 Fire Salamander - Data Integrity Agent\")\\n    \\n    // Parse command line arguments",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 1054,
      "category": "log_messages",
      "value": "❌ Data integrity audit failed: %v",
      "context": "    \\n    if err := agent.RunFullDataIntegrityAudit(); err != nil {\\n>>> log.Printf(\"❌ Data integrity audit failed: %v\", err)\\n    os.Exit(1)\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 1054,
      "category": "log_messages",
      "value": "❌ Data integrity audit failed: %v",
      "context": "    \\n    if err := agent.RunFullDataIntegrityAudit(); err != nil {\\n>>> log.Printf(\"❌ Data integrity audit failed: %v\", err)\\n    os.Exit(1)\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 1058,
      "category": "log_messages",
      "value": "\\n📊 Data Integrity Audit Results:\\n",
      "context": "    }\\n    \\n>>> fmt.Printf(\"\\n📊 Data Integrity Audit Results:\\n\")\\n    fmt.Printf(\"Score: %d/100 (%s)\\n\", agent.Stats.OverallScore, agent.Stats.Status)\\n    fmt.Printf(\"Issues: %d\\n\", len(agent.Stats.Issues))",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 1059,
      "category": "log_messages",
      "value": "Score: %d/100 (%s)\\n",
      "context": "    \\n    fmt.Printf(\"\\n📊 Data Integrity Audit Results:\\n\")\\n>>> fmt.Printf(\"Score: %d/100 (%s)\\n\", agent.Stats.OverallScore, agent.Stats.Status)\\n    fmt.Printf(\"Issues: %d\\n\", len(agent.Stats.Issues))\\n    fmt.Printf(\"Report: %s/data_integrity_report.html\\n\", outputPath)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "tests/agents/data/data_integrity_agent.go",
      "line": 1061,
      "category": "log_messages",
      "value": "Report: %s/data_integrity_report.html\\n",
      "context": "    fmt.Printf(\"Score: %d/100 (%s)\\n\", agent.Stats.OverallScore, agent.Stats.Status)\\n    fmt.Printf(\"Issues: %d\\n\", len(agent.Stats.Issues))\\n>>> fmt.Printf(\"Report: %s/data_integrity_report.html\\n\", outputPath)\\n    \\n    // Exit code basé sur le score",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/messages/messages.go",
      "line": 56,
      "category": "api_endpoints",
      "value": "https://your-site.com",
      "context": "    UIAnalyzeButton      = \"ANALYZE MY SITE\"\\n    UIAnalyzing          = \"ANALYZING...\"\\n>>> UIPlaceholderURL     = \"https://your-site.com\"\\n    UIURLRequiredHTTPS   = \"URL must start with https://\"\\n    UIConnectionError    = \"Connection error. Please try again.\"",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/logger/logger.go",
      "line": 133,
      "category": "log_messages",
      "value": "%s%s [%s] %s%s %s",
      "context": "    \\n    // Format base\\n>>> output := fmt.Sprintf(\"%s%s [%s] %s%s %s\",\\n    color, icon, entry.Level, entry.Component, resetColor, entry.Message)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/logger/logger.go",
      "line": 144,
      "category": "log_messages",
      "value": " \\033[90m(%s:%d)\\033[0m",
      "context": "    // Ajouter info debug\\n    if debugMode && entry.File != \"\" {\\n>>> output += fmt.Sprintf(\" \\033[90m(%s:%d)\\033[0m\", entry.File, entry.Line)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/logger/logger.go",
      "line": 192,
      "category": "http_methods",
      "value": "log",
      "context": "    d = data[0]\\n    }\\n>>> l.log(DEBUG, message, d)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/logger/logger.go",
      "line": 200,
      "category": "http_methods",
      "value": "log",
      "context": "    d = data[0]\\n    }\\n>>> l.log(INFO, message, d)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/logger/logger.go",
      "line": 208,
      "category": "http_methods",
      "value": "log",
      "context": "    d = data[0]\\n    }\\n>>> l.log(WARN, message, d)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/logger/logger.go",
      "line": 216,
      "category": "http_methods",
      "value": "log",
      "context": "    d = data[0]\\n    }\\n>>> l.log(ERROR, message, d)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/logger/logger.go",
      "line": 224,
      "category": "http_methods",
      "value": "log",
      "context": "    d = data[0]\\n    }\\n>>> l.log(FATAL, message, d)\\n    os.Exit(1)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/config/config.go",
      "line": 69,
      "category": "error_messages",
      "value": "failed to parse PORT environment variable: %w",
      "context": "    p, err := strconv.Atoi(port)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"failed to parse PORT environment variable: %w\", err)\\n    }\\n    cfg.Server.Port = p",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 79,
      "category": "server_config",
      "value": "localhost",
      "context": "    cfg.Server.Host = host\\n    } else {\\n>>> cfg.Server.Host = \"localhost\" // Default from .env.example\\n    }\\n    ",
      "severity": "High",
      "description": "Configuration serveur hardcodée"
    },
    {
      "file": "internal/config/config.go",
      "line": 110,
      "category": "error_messages",
      "value": "failed to parse MAX_PAGES_CRAWL environment variable: %w",
      "context": "    mp, err := strconv.Atoi(maxPages)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"failed to parse MAX_PAGES_CRAWL environment variable: %w\", err)\\n    }\\n    if mp <= 0 {",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 113,
      "category": "error_messages",
      "value": "max pages crawl must be positive, got %d",
      "context": "    }\\n    if mp <= 0 {\\n>>> return nil, fmt.Errorf(\"max pages crawl must be positive, got %d\", mp)\\n    }\\n    cfg.MaxPagesCrawl = mp",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 124,
      "category": "error_messages",
      "value": "failed to parse TIMEOUT_SECONDS environment variable: %w",
      "context": "    t, err := strconv.Atoi(timeout)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"failed to parse TIMEOUT_SECONDS environment variable: %w\", err)\\n    }\\n    cfg.TimeoutSeconds = t",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 135,
      "category": "error_messages",
      "value": "failed to parse MAX_CONCURRENT_REQUESTS environment variable: %w",
      "context": "    c, err := strconv.Atoi(concurrent)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"failed to parse MAX_CONCURRENT_REQUESTS environment variable: %w\", err)\\n    }\\n    cfg.MaxConcurrent = c",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 175,
      "category": "error_messages",
      "value": "configuration validation failed: %w",
      "context": "    // Validate configuration before returning\\n    if err := cfg.Validate(); err != nil {\\n>>> return nil, fmt.Errorf(\"configuration validation failed: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 186,
      "category": "error_messages",
      "value": "port must be between 1 and 65535, got %d",
      "context": "    // Validate server configuration\\n    if c.Server.Port < 1 || c.Server.Port > 65535 {\\n>>> return fmt.Errorf(\"port must be between 1 and 65535, got %d\", c.Server.Port)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 190,
      "category": "error_messages",
      "value": "host cannot be empty",
      "context": "    \\n    if c.Server.Host == \"\" {\\n>>> return fmt.Errorf(\"host cannot be empty\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 195,
      "category": "error_messages",
      "value": "app name cannot be empty",
      "context": "    // Validate app configuration\\n    if c.App.Name == \"\" {\\n>>> return fmt.Errorf(\"app name cannot be empty\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 200,
      "category": "error_messages",
      "value": "crawler workers must be positive, got %d",
      "context": "    // Validate crawler configuration\\n    if c.Crawler.Workers <= 0 {\\n>>> return fmt.Errorf(\"crawler workers must be positive, got %d\", c.Crawler.Workers)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 204,
      "category": "error_messages",
      "value": "crawler rate limit cannot be empty",
      "context": "    \\n    if c.Crawler.RateLimit == \"\" {\\n>>> return fmt.Errorf(\"crawler rate limit cannot be empty\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 209,
      "category": "error_messages",
      "value": "max pages crawl must be positive, got %d",
      "context": "    // Validate positive values\\n    if c.MaxPagesCrawl <= 0 {\\n>>> return fmt.Errorf(\"max pages crawl must be positive, got %d\", c.MaxPagesCrawl)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 213,
      "category": "error_messages",
      "value": "timeout seconds must be positive, got %d",
      "context": "    \\n    if c.TimeoutSeconds <= 0 {\\n>>> return fmt.Errorf(\"timeout seconds must be positive, got %d\", c.TimeoutSeconds)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 217,
      "category": "error_messages",
      "value": "max concurrent requests must be positive, got %d",
      "context": "    \\n    if c.MaxConcurrent <= 0 {\\n>>> return fmt.Errorf(\"max concurrent requests must be positive, got %d\", c.MaxConcurrent)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 222,
      "category": "error_messages",
      "value": "database path cannot be empty",
      "context": "    // Validate required paths are not empty\\n    if c.DBPath == \"\" {\\n>>> return fmt.Errorf(\"database path cannot be empty\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 226,
      "category": "error_messages",
      "value": "reports directory cannot be empty",
      "context": "    \\n    if c.ReportsDir == \"\" {\\n>>> return fmt.Errorf(\"reports directory cannot be empty\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/config.go",
      "line": 237,
      "category": "error_messages",
      "value": "invalid environment ",
      "context": "    }\\n    if !validEnvs[c.Env] {\\n>>> return fmt.Errorf(\"invalid environment '%s', must be one of: development, production, test, staging\", c.Env)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/config/version.go",
      "line": 25,
      "category": "log_messages",
      "value": "Fire Salamander %s",
      "context": "    \\n    func VersionFull() string {\\n>>> return fmt.Sprintf(\"Fire Salamander %s\", VersionShort())\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 96,
      "category": "http_methods",
      "value": "Stat",
      "context": "    // Essayer de servir comme fichier statique\\n    staticFS, _ := fs.Sub(staticFiles, constants.StaticDirectory)\\n>>> if _, err := fs.Stat(staticFS, r.URL.Path[1:]); err == nil {\\n    http.FileServer(http.FS(staticFS)).ServeHTTP(w, r)\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 118,
      "category": "http_methods",
      "value": "Set",
      "context": "    \\n    // Définir les headers appropriés\\n>>> w.Header().Set(constants.HeaderContentType, constants.ContentTypeHTMLCharset)\\n    w.Header().Set(constants.HeaderCacheControl, constants.HeaderValueNoCache)\\n    w.Header().Set(constants.HeaderXFrameOptions, constants.HeaderValueDeny)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 119,
      "category": "http_methods",
      "value": "Set",
      "context": "    // Définir les headers appropriés\\n    w.Header().Set(constants.HeaderContentType, constants.ContentTypeHTMLCharset)\\n>>> w.Header().Set(constants.HeaderCacheControl, constants.HeaderValueNoCache)\\n    w.Header().Set(constants.HeaderXFrameOptions, constants.HeaderValueDeny)\\n    w.Header().Set(constants.HeaderXContentType, constants.HeaderValueNoSniff)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 120,
      "category": "http_methods",
      "value": "Set",
      "context": "    w.Header().Set(constants.HeaderContentType, constants.ContentTypeHTMLCharset)\\n    w.Header().Set(constants.HeaderCacheControl, constants.HeaderValueNoCache)\\n>>> w.Header().Set(constants.HeaderXFrameOptions, constants.HeaderValueDeny)\\n    w.Header().Set(constants.HeaderXContentType, constants.HeaderValueNoSniff)\\n    w.Header().Set(constants.HeaderContentLength, fmt.Sprintf(\"%d\", len(indexContent)))",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 121,
      "category": "http_methods",
      "value": "Set",
      "context": "    w.Header().Set(constants.HeaderCacheControl, constants.HeaderValueNoCache)\\n    w.Header().Set(constants.HeaderXFrameOptions, constants.HeaderValueDeny)\\n>>> w.Header().Set(constants.HeaderXContentType, constants.HeaderValueNoSniff)\\n    w.Header().Set(constants.HeaderContentLength, fmt.Sprintf(\"%d\", len(indexContent)))\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 122,
      "category": "http_methods",
      "value": "Set",
      "context": "    w.Header().Set(constants.HeaderXFrameOptions, constants.HeaderValueDeny)\\n    w.Header().Set(constants.HeaderXContentType, constants.HeaderValueNoSniff)\\n>>> w.Header().Set(constants.HeaderContentLength, fmt.Sprintf(\"%d\", len(indexContent)))\\n    \\n    // Écrire le contenu",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 134,
      "category": "http_methods",
      "value": "Set",
      "context": "    func (ws *WebServer) handleAPI(w http.ResponseWriter, r *http.Request) {\\n    // Ajouter les headers CORS\\n>>> w.Header().Set(constants.HeaderCORSOrigin, constants.HeaderValueCORSAll)\\n    w.Header().Set(constants.HeaderCORSMethods, constants.HeaderValueCORSMethods)\\n    w.Header().Set(constants.HeaderCORSHeaders, constants.HeaderValueCORSHeaders)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 135,
      "category": "http_methods",
      "value": "Set",
      "context": "    // Ajouter les headers CORS\\n    w.Header().Set(constants.HeaderCORSOrigin, constants.HeaderValueCORSAll)\\n>>> w.Header().Set(constants.HeaderCORSMethods, constants.HeaderValueCORSMethods)\\n    w.Header().Set(constants.HeaderCORSHeaders, constants.HeaderValueCORSHeaders)\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 136,
      "category": "http_methods",
      "value": "Set",
      "context": "    w.Header().Set(constants.HeaderCORSOrigin, constants.HeaderValueCORSAll)\\n    w.Header().Set(constants.HeaderCORSMethods, constants.HeaderValueCORSMethods)\\n>>> w.Header().Set(constants.HeaderCORSHeaders, constants.HeaderValueCORSHeaders)\\n    \\n    // Gérer les requêtes OPTIONS pour CORS",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 182,
      "category": "http_methods",
      "value": "Set",
      "context": "    }\\n    \\n>>> w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeJSON)\\n    \\n    health := map[string]interface{}{",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 186,
      "category": "json_fields",
      "value": "service",
      "context": "    health := map[string]interface{}{\\n    constants.ServerJSONFieldStatus:     \"healthy\",\\n>>> \"service\":    \"Fire Salamander Web Server\",\\n    \"version\":    constants.AppVersion,\\n    constants.ServerJSONFieldTimestamp:  time.Now().Format(time.RFC3339),",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 191,
      "category": "json_fields",
      "value": "web_server",
      "context": "    \"uptime\":     time.Since(time.Now()), // Placeholder - devrait être le vrai uptime\\n    \"components\": map[string]string{\\n>>> \"web_server\":    \"healthy\",\\n    \"static_files\":  \"healthy\",\\n    \"api_proxy\":     \"healthy\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 192,
      "category": "json_fields",
      "value": "static_files",
      "context": "    \"components\": map[string]string{\\n    \"web_server\":    \"healthy\",\\n>>> \"static_files\":  \"healthy\",\\n    \"api_proxy\":     \"healthy\",\\n    \"orchestrator\":  \"healthy\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 193,
      "category": "json_fields",
      "value": "api_proxy",
      "context": "    \"web_server\":    \"healthy\",\\n    \"static_files\":  \"healthy\",\\n>>> \"api_proxy\":     \"healthy\",\\n    \"orchestrator\":  \"healthy\",\\n    },",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 194,
      "category": "json_fields",
      "value": "orchestrator",
      "context": "    \"static_files\":  \"healthy\",\\n    \"api_proxy\":     \"healthy\",\\n>>> \"orchestrator\":  \"healthy\",\\n    },\\n    }",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 200,
      "category": "http_methods",
      "value": "GetStats",
      "context": "    // Vérifier la santé de l'orchestrateur\\n    if ws.orchestrator != nil {\\n>>> stats := ws.orchestrator.GetStats()\\n    if stats != nil {\\n    health[\"orchestrator_stats\"] = stats",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 212,
      "category": "json_fields",
      "value": "service",
      "context": "    fmt.Fprintf(w, `{\\n    constants.ServerJSONFieldStatus: \"%s\",\\n>>> \"service\": \"%s\",\\n    \"version\": \"%s\",\\n    constants.ServerJSONFieldTimestamp: \"%s\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 213,
      "category": "json_fields",
      "value": "version",
      "context": "    constants.ServerJSONFieldStatus: \"%s\",\\n    \"service\": \"%s\",\\n>>> \"version\": \"%s\",\\n    constants.ServerJSONFieldTimestamp: \"%s\",\\n    \"components\": %v",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 246,
      "category": "http_headers",
      "value": "Content-Disposition",
      "context": "    \\n    // Définir les headers de téléchargement\\n>>> w.Header().Set(\"Content-Disposition\", fmt.Sprintf(\"attachment; filename=%s\", filename))\\n    \\n    // Déterminer le type de contenu basé sur l'extension",
      "severity": "Medium",
      "description": "Headers HTTP hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 246,
      "category": "http_methods",
      "value": "Set",
      "context": "    \\n    // Définir les headers de téléchargement\\n>>> w.Header().Set(\"Content-Disposition\", fmt.Sprintf(\"attachment; filename=%s\", filename))\\n    \\n    // Déterminer le type de contenu basé sur l'extension",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 246,
      "category": "log_messages",
      "value": "attachment; filename=%s",
      "context": "    \\n    // Définir les headers de téléchargement\\n>>> w.Header().Set(\"Content-Disposition\", fmt.Sprintf(\"attachment; filename=%s\", filename))\\n    \\n    // Déterminer le type de contenu basé sur l'extension",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 252,
      "category": "http_methods",
      "value": "Set",
      "context": "    switch ext {\\n    case constants.ServerExtensionHTML:\\n>>> w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeHTML)\\n    case \".pdf\":\\n    w.Header().Set(constants.ServerHeaderContentType, \"application/pdf\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 253,
      "category": "file_extensions",
      "value": ".pdf",
      "context": "    case constants.ServerExtensionHTML:\\n    w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeHTML)\\n>>> case \".pdf\":\\n    w.Header().Set(constants.ServerHeaderContentType, \"application/pdf\")\\n    case constants.ServerExtensionJSON:",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 254,
      "category": "content_types",
      "value": "application/pdf",
      "context": "    w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeHTML)\\n    case \".pdf\":\\n>>> w.Header().Set(constants.ServerHeaderContentType, \"application/pdf\")\\n    case constants.ServerExtensionJSON:\\n    w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeJSON)",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 254,
      "category": "http_methods",
      "value": "Set",
      "context": "    w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeHTML)\\n    case \".pdf\":\\n>>> w.Header().Set(constants.ServerHeaderContentType, \"application/pdf\")\\n    case constants.ServerExtensionJSON:\\n    w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeJSON)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 256,
      "category": "http_methods",
      "value": "Set",
      "context": "    w.Header().Set(constants.ServerHeaderContentType, \"application/pdf\")\\n    case constants.ServerExtensionJSON:\\n>>> w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeJSON)\\n    case \".csv\":\\n    w.Header().Set(constants.ServerHeaderContentType, \"text/csv\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 257,
      "category": "file_extensions",
      "value": ".csv",
      "context": "    case constants.ServerExtensionJSON:\\n    w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeJSON)\\n>>> case \".csv\":\\n    w.Header().Set(constants.ServerHeaderContentType, \"text/csv\")\\n    default:",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 258,
      "category": "content_types",
      "value": "text/csv",
      "context": "    w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeJSON)\\n    case \".csv\":\\n>>> w.Header().Set(constants.ServerHeaderContentType, \"text/csv\")\\n    default:\\n    w.Header().Set(constants.ServerHeaderContentType, \"application/octet-stream\")",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 258,
      "category": "http_methods",
      "value": "Set",
      "context": "    w.Header().Set(constants.ServerHeaderContentType, constants.ServerContentTypeJSON)\\n    case \".csv\":\\n>>> w.Header().Set(constants.ServerHeaderContentType, \"text/csv\")\\n    default:\\n    w.Header().Set(constants.ServerHeaderContentType, \"application/octet-stream\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 260,
      "category": "content_types",
      "value": "application/octet-stream",
      "context": "    w.Header().Set(constants.ServerHeaderContentType, \"text/csv\")\\n    default:\\n>>> w.Header().Set(constants.ServerHeaderContentType, \"application/octet-stream\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 260,
      "category": "http_methods",
      "value": "Set",
      "context": "    w.Header().Set(constants.ServerHeaderContentType, \"text/csv\")\\n    default:\\n>>> w.Header().Set(constants.ServerHeaderContentType, \"application/octet-stream\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 276,
      "category": "file_extensions",
      "value": ".csv",
      "context": "    case constants.ServerExtensionJSON:\\n    return ws.generateJSONReport()\\n>>> case \".csv\":\\n    return ws.generateCSVReport()\\n    default:",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "internal/web/server.go",
      "line": 345,
      "category": "json_fields",
      "value": "title",
      "context": "    return `{\\n    \"report\": {\\n>>> \"title\": \"Rapport Fire Salamander\",\\n    \"generated_at\": \"` + time.Now().Format(time.RFC3339) + `\",\\n    \"version\": \"` + ws.config.App.Version + `\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 359,
      "category": "json_fields",
      "value": "title",
      "context": "    {\\n    constants.ServerJSONFieldID: \"optimize_images\",\\n>>> \"title\": \"Optimiser les images\",\\n    \"description\": \"Compresser les images pour améliorer les temps de chargement\",\\n    \"priority\": \"high\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 360,
      "category": "json_fields",
      "value": "description",
      "context": "    constants.ServerJSONFieldID: \"optimize_images\",\\n    \"title\": \"Optimiser les images\",\\n>>> \"description\": \"Compresser les images pour améliorer les temps de chargement\",\\n    \"priority\": \"high\",\\n    \"impact\": \"high\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 361,
      "category": "json_fields",
      "value": "priority",
      "context": "    \"title\": \"Optimiser les images\",\\n    \"description\": \"Compresser les images pour améliorer les temps de chargement\",\\n>>> \"priority\": \"high\",\\n    \"impact\": \"high\",\\n    \"effort\": \"medium\"",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 362,
      "category": "json_fields",
      "value": "impact",
      "context": "    \"description\": \"Compresser les images pour améliorer les temps de chargement\",\\n    \"priority\": \"high\",\\n>>> \"impact\": \"high\",\\n    \"effort\": \"medium\"\\n    },",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 367,
      "category": "json_fields",
      "value": "title",
      "context": "    {\\n    constants.ServerJSONFieldID: \"meta_descriptions\",\\n>>> \"title\": \"Améliorer les méta-descriptions\",\\n    \"description\": \"Ajouter des méta-descriptions optimisées sur les pages manquantes\",\\n    \"priority\": \"medium\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 368,
      "category": "json_fields",
      "value": "description",
      "context": "    constants.ServerJSONFieldID: \"meta_descriptions\",\\n    \"title\": \"Améliorer les méta-descriptions\",\\n>>> \"description\": \"Ajouter des méta-descriptions optimisées sur les pages manquantes\",\\n    \"priority\": \"medium\",\\n    \"impact\": \"medium\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 369,
      "category": "json_fields",
      "value": "priority",
      "context": "    \"title\": \"Améliorer les méta-descriptions\",\\n    \"description\": \"Ajouter des méta-descriptions optimisées sur les pages manquantes\",\\n>>> \"priority\": \"medium\",\\n    \"impact\": \"medium\",\\n    \"effort\": \"low\"",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 370,
      "category": "json_fields",
      "value": "impact",
      "context": "    \"description\": \"Ajouter des méta-descriptions optimisées sur les pages manquantes\",\\n    \"priority\": \"medium\",\\n>>> \"impact\": \"medium\",\\n    \"effort\": \"low\"\\n    }",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 377,
      "category": "json_fields",
      "value": "severity",
      "context": "    {\\n    constants.ServerJSONFieldType: \"content_seo_alignment\",\\n>>> \"severity\": \"info\",\\n    \"title\": \"Alignement contenu-SEO détecté\",\\n    \"description\": \"Le titre de la page est cohérent avec les mots-clés identifiés\"",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 378,
      "category": "json_fields",
      "value": "title",
      "context": "    constants.ServerJSONFieldType: \"content_seo_alignment\",\\n    \"severity\": \"info\",\\n>>> \"title\": \"Alignement contenu-SEO détecté\",\\n    \"description\": \"Le titre de la page est cohérent avec les mots-clés identifiés\"\\n    }",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 383,
      "category": "json_fields",
      "value": "analysis_duration",
      "context": "    ],\\n    \"metadata\": {\\n>>> \"analysis_duration\": \"15.2s\",\\n    \"pages_analyzed\": 1,\\n    \"issues_found\": 3,",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 438,
      "category": "json_fields",
      "value": "service",
      "context": "    func (ws *WebServer) GetStats() map[string]interface{} {\\n    stats := map[string]interface{}{\\n>>> \"service\":    \"web_server\",\\n    constants.ServerJSONFieldStatus:     \"running\",\\n    constants.ServerConfigPort:       ws.config.Server.Port,",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/web/server.go",
      "line": 447,
      "category": "http_methods",
      "value": "GetStats",
      "context": "    // Ajouter les stats de l'orchestrateur si disponible\\n    if ws.orchestrator != nil {\\n>>> if orchestratorStats := ws.orchestrator.GetStats(); orchestratorStats != nil {\\n    stats[\"orchestrator\"] = orchestratorStats\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 125,
      "category": "error_messages",
      "value": "format de rapport non supporté: %s",
      "context": "    content, err = rg.generateCSVReport(result, options)\\n    default:\\n>>> return nil, fmt.Errorf(\"format de rapport non supporté: %s\", options.Format)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 129,
      "category": "error_messages",
      "value": "erreur génération contenu: %w",
      "context": "    \\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur génération contenu: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 160,
      "category": "error_messages",
      "value": "erreur exécution template: %w",
      "context": "    var buf bytes.Buffer\\n    if err := tmpl.Execute(&buf, data); err != nil {\\n>>> return \"\", fmt.Errorf(\"erreur exécution template: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 187,
      "category": "error_messages",
      "value": "erreur encodage JSON: %w",
      "context": "    jsonBytes, err := json.MarshalIndent(reportData, \"\", \"  \")\\n    if err != nil {\\n>>> return \"\", fmt.Errorf(\"erreur encodage JSON: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 201,
      "category": "log_messages",
      "value": "Overall Score,%.1f,Global,\\n",
      "context": "    \\n    // Métriques principales\\n>>> csv.WriteString(fmt.Sprintf(\"Overall Score,%.1f,Global,\\n\", result.OverallScore))\\n    csv.WriteString(fmt.Sprintf(\"Content Quality,%.1f,Content,\\n\", result.UnifiedMetrics.ContentQualityScore))\\n    csv.WriteString(fmt.Sprintf(\"Technical Health,%.1f,Technical,\\n\", result.UnifiedMetrics.TechnicalHealthScore))",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 202,
      "category": "log_messages",
      "value": "Content Quality,%.1f,Content,\\n",
      "context": "    // Métriques principales\\n    csv.WriteString(fmt.Sprintf(\"Overall Score,%.1f,Global,\\n\", result.OverallScore))\\n>>> csv.WriteString(fmt.Sprintf(\"Content Quality,%.1f,Content,\\n\", result.UnifiedMetrics.ContentQualityScore))\\n    csv.WriteString(fmt.Sprintf(\"Technical Health,%.1f,Technical,\\n\", result.UnifiedMetrics.TechnicalHealthScore))\\n    csv.WriteString(fmt.Sprintf(\"SEO Readiness,%.1f,SEO,\\n\", result.UnifiedMetrics.SEOReadinessScore))",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 203,
      "category": "log_messages",
      "value": "Technical Health,%.1f,Technical,\\n",
      "context": "    csv.WriteString(fmt.Sprintf(\"Overall Score,%.1f,Global,\\n\", result.OverallScore))\\n    csv.WriteString(fmt.Sprintf(\"Content Quality,%.1f,Content,\\n\", result.UnifiedMetrics.ContentQualityScore))\\n>>> csv.WriteString(fmt.Sprintf(\"Technical Health,%.1f,Technical,\\n\", result.UnifiedMetrics.TechnicalHealthScore))\\n    csv.WriteString(fmt.Sprintf(\"SEO Readiness,%.1f,SEO,\\n\", result.UnifiedMetrics.SEOReadinessScore))\\n    csv.WriteString(fmt.Sprintf(\"Performance,%.1f,Performance,\\n\", result.UnifiedMetrics.PerformanceScore))",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 204,
      "category": "log_messages",
      "value": "SEO Readiness,%.1f,SEO,\\n",
      "context": "    csv.WriteString(fmt.Sprintf(\"Content Quality,%.1f,Content,\\n\", result.UnifiedMetrics.ContentQualityScore))\\n    csv.WriteString(fmt.Sprintf(\"Technical Health,%.1f,Technical,\\n\", result.UnifiedMetrics.TechnicalHealthScore))\\n>>> csv.WriteString(fmt.Sprintf(\"SEO Readiness,%.1f,SEO,\\n\", result.UnifiedMetrics.SEOReadinessScore))\\n    csv.WriteString(fmt.Sprintf(\"Performance,%.1f,Performance,\\n\", result.UnifiedMetrics.PerformanceScore))\\n    csv.WriteString(fmt.Sprintf(\"Mobile Friendliness,%.1f,Mobile,\\n\", result.UnifiedMetrics.MobileFriendlinessScore))",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 205,
      "category": "log_messages",
      "value": "Performance,%.1f,Performance,\\n",
      "context": "    csv.WriteString(fmt.Sprintf(\"Technical Health,%.1f,Technical,\\n\", result.UnifiedMetrics.TechnicalHealthScore))\\n    csv.WriteString(fmt.Sprintf(\"SEO Readiness,%.1f,SEO,\\n\", result.UnifiedMetrics.SEOReadinessScore))\\n>>> csv.WriteString(fmt.Sprintf(\"Performance,%.1f,Performance,\\n\", result.UnifiedMetrics.PerformanceScore))\\n    csv.WriteString(fmt.Sprintf(\"Mobile Friendliness,%.1f,Mobile,\\n\", result.UnifiedMetrics.MobileFriendlinessScore))\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 206,
      "category": "log_messages",
      "value": "Mobile Friendliness,%.1f,Mobile,\\n",
      "context": "    csv.WriteString(fmt.Sprintf(\"SEO Readiness,%.1f,SEO,\\n\", result.UnifiedMetrics.SEOReadinessScore))\\n    csv.WriteString(fmt.Sprintf(\"Performance,%.1f,Performance,\\n\", result.UnifiedMetrics.PerformanceScore))\\n>>> csv.WriteString(fmt.Sprintf(\"Mobile Friendliness,%.1f,Mobile,\\n\", result.UnifiedMetrics.MobileFriendlinessScore))\\n    \\n    // Scores par catégorie",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 210,
      "category": "log_messages",
      "value": "%s,%.1f,Category,\\n",
      "context": "    // Scores par catégorie\\n    for category, score := range result.CategoryScores {\\n>>> csv.WriteString(fmt.Sprintf(\"%s,%.1f,Category,\\n\", strings.Title(category), score))\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 386,
      "category": "log_messages",
      "value": "Erreur compilation template executive: %v",
      "context": "    rg.templates[\"executive_html\"], err = template.New(\"executive_html\").Parse(executiveHTML)\\n    if err != nil {\\n>>> panic(fmt.Sprintf(\"Erreur compilation template executive: %v\", err))\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 400,
      "category": "log_messages",
      "value": "Rapport Exécutif SEO - %s",
      "context": "    switch reportType {\\n    case ReportTypeExecutive:\\n>>> return fmt.Sprintf(\"Rapport Exécutif SEO - %s\", result.Domain)\\n    case ReportTypeDetailed:\\n    return fmt.Sprintf(\"Rapport Détaillé d'Analyse - %s\", result.Domain)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 402,
      "category": "log_messages",
      "value": "Rapport Détaillé d",
      "context": "    return fmt.Sprintf(\"Rapport Exécutif SEO - %s\", result.Domain)\\n    case ReportTypeDetailed:\\n>>> return fmt.Sprintf(\"Rapport Détaillé d'Analyse - %s\", result.Domain)\\n    case ReportTypeTechnical:\\n    return fmt.Sprintf(\"Rapport Technique SEO - %s\", result.Domain)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 404,
      "category": "log_messages",
      "value": "Rapport Technique SEO - %s",
      "context": "    return fmt.Sprintf(\"Rapport Détaillé d'Analyse - %s\", result.Domain)\\n    case ReportTypeTechnical:\\n>>> return fmt.Sprintf(\"Rapport Technique SEO - %s\", result.Domain)\\n    default:\\n    return fmt.Sprintf(\"Rapport Fire Salamander - %s\", result.Domain)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/reports.go",
      "line": 406,
      "category": "log_messages",
      "value": "Rapport Fire Salamander - %s",
      "context": "    return fmt.Sprintf(\"Rapport Technique SEO - %s\", result.Domain)\\n    default:\\n>>> return fmt.Sprintf(\"Rapport Fire Salamander - %s\", result.Domain)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 58,
      "category": "error_messages",
      "value": "erreur initialisation base de données: %w",
      "context": "    \\n    if err := storage.initDatabase(); err != nil {\\n>>> return nil, fmt.Errorf(\"erreur initialisation base de données: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 69,
      "category": "error_messages",
      "value": "erreur ouverture base: %w",
      "context": "    sm.db, err = sql.Open(\"sqlite3\", sm.dbPath)\\n    if err != nil {\\n>>> return fmt.Errorf(\"erreur ouverture base: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 74,
      "category": "error_messages",
      "value": "erreur ping base: %w",
      "context": "    // Tester la connexion\\n    if err := sm.db.Ping(); err != nil {\\n>>> return fmt.Errorf(\"erreur ping base: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 79,
      "category": "error_messages",
      "value": "erreur création tables: %w",
      "context": "    // Créer les tables\\n    if err := sm.createTables(); err != nil {\\n>>> return fmt.Errorf(\"erreur création tables: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 82,
      "category": "log_messages",
      "value": "Base de données initialisée: %s",
      "context": "    }\\n    \\n>>> log.Printf(\"Base de données initialisée: %s\", sm.dbPath)\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 82,
      "category": "log_messages",
      "value": "Base de données initialisée: %s",
      "context": "    }\\n    \\n>>> log.Printf(\"Base de données initialisée: %s\", sm.dbPath)\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 106,
      "category": "error_messages",
      "value": "erreur création table analyses: %w",
      "context": "    \\n    if _, err := sm.db.Exec(analysisTable); err != nil {\\n>>> return fmt.Errorf(\"erreur création table analyses: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 119,
      "category": "error_messages",
      "value": "erreur création index: %w",
      "context": "    for _, indexSQL := range indexes {\\n    if _, err := sm.db.Exec(indexSQL); err != nil {\\n>>> return fmt.Errorf(\"erreur création index: %w\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 131,
      "category": "error_messages",
      "value": "erreur sérialisation JSON: %w",
      "context": "    resultJSON, err := json.Marshal(result)\\n    if err != nil {\\n>>> return fmt.Errorf(\"erreur sérialisation JSON: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 155,
      "category": "error_messages",
      "value": "erreur insertion base: %w",
      "context": "    \\n    if err != nil {\\n>>> return fmt.Errorf(\"erreur insertion base: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 158,
      "category": "log_messages",
      "value": "Analyse sauvegardée: %s (Score: %.1f)",
      "context": "    }\\n    \\n>>> log.Printf(\"Analyse sauvegardée: %s (Score: %.1f)\", result.URL, result.OverallScore)\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 158,
      "category": "log_messages",
      "value": "Analyse sauvegardée: %s (Score: %.1f)",
      "context": "    }\\n    \\n>>> log.Printf(\"Analyse sauvegardée: %s (Score: %.1f)\", result.URL, result.OverallScore)\\n    return nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 172,
      "category": "error_messages",
      "value": "analyse non trouvée: %s",
      "context": "    if err != nil {\\n    if err == sql.ErrNoRows {\\n>>> return nil, fmt.Errorf(\"analyse non trouvée: %s\", taskID)\\n    }\\n    return nil, fmt.Errorf(\"erreur récupération: %w\", err)",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 174,
      "category": "error_messages",
      "value": "erreur récupération: %w",
      "context": "    return nil, fmt.Errorf(\"analyse non trouvée: %s\", taskID)\\n    }\\n>>> return nil, fmt.Errorf(\"erreur récupération: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 180,
      "category": "error_messages",
      "value": "erreur désérialisation: %w",
      "context": "    var result UnifiedAnalysisResult\\n    if err := json.Unmarshal([]byte(resultData), &result); err != nil {\\n>>> return nil, fmt.Errorf(\"erreur désérialisation: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 203,
      "category": "error_messages",
      "value": "erreur requête historique: %w",
      "context": "    rows, err := sm.db.Query(query, url, limit)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur requête historique: %w\", err)\\n    }\\n    defer rows.Close()",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 205,
      "category": "http_methods",
      "value": "Close",
      "context": "    return nil, fmt.Errorf(\"erreur requête historique: %w\", err)\\n    }\\n>>> defer rows.Close()\\n    \\n    var analyses []StoredAnalysis",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 224,
      "category": "error_messages",
      "value": "erreur lecture ligne: %w",
      "context": "    )\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur lecture ligne: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 234,
      "category": "error_messages",
      "value": "aucune analyse trouvée pour: %s",
      "context": "    \\n    if len(analyses) == 0 {\\n>>> return nil, fmt.Errorf(\"aucune analyse trouvée pour: %s\", url)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 270,
      "category": "error_messages",
      "value": "erreur requête domaine: %w",
      "context": "    rows, err := sm.db.Query(query, domain, limit)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur requête domaine: %w\", err)\\n    }\\n    defer rows.Close()",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 272,
      "category": "http_methods",
      "value": "Close",
      "context": "    return nil, fmt.Errorf(\"erreur requête domaine: %w\", err)\\n    }\\n>>> defer rows.Close()\\n    \\n    var analyses []StoredAnalysis",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 289,
      "category": "error_messages",
      "value": "erreur lecture ligne domaine: %w",
      "context": "    )\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur lecture ligne domaine: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 314,
      "category": "error_messages",
      "value": "erreur requête top analyses: %w",
      "context": "    rows, err := sm.db.Query(query, limit)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur requête top analyses: %w\", err)\\n    }\\n    defer rows.Close()",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 316,
      "category": "http_methods",
      "value": "Close",
      "context": "    return nil, fmt.Errorf(\"erreur requête top analyses: %w\", err)\\n    }\\n>>> defer rows.Close()\\n    \\n    var analyses []StoredAnalysis",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 333,
      "category": "error_messages",
      "value": "erreur lecture top ligne: %w",
      "context": "    )\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur lecture top ligne: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 358,
      "category": "error_messages",
      "value": "erreur requête analyses récentes: %w",
      "context": "    rows, err := sm.db.Query(query, limit)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur requête analyses récentes: %w\", err)\\n    }\\n    defer rows.Close()",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 360,
      "category": "http_methods",
      "value": "Close",
      "context": "    return nil, fmt.Errorf(\"erreur requête analyses récentes: %w\", err)\\n    }\\n>>> defer rows.Close()\\n    \\n    var analyses []StoredAnalysis",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 377,
      "category": "error_messages",
      "value": "erreur lecture récente ligne: %w",
      "context": "    )\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur lecture récente ligne: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 394,
      "category": "error_messages",
      "value": "erreur comptage analyses: %w",
      "context": "    err := sm.db.QueryRow(\"SELECT COUNT(*) FROM analyses\").Scan(&totalAnalyses)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur comptage analyses: %w\", err)\\n    }\\n    stats[\"total_analyses\"] = totalAnalyses",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 402,
      "category": "error_messages",
      "value": "erreur comptage domaines: %w",
      "context": "    err = sm.db.QueryRow(\"SELECT COUNT(DISTINCT domain) FROM analyses\").Scan(&uniqueDomains)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur comptage domaines: %w\", err)\\n    }\\n    stats[\"unique_domains\"] = uniqueDomains",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 410,
      "category": "error_messages",
      "value": "erreur calcul score moyen: %w",
      "context": "    err = sm.db.QueryRow(\"SELECT AVG(overall_score) FROM analyses\").Scan(&avgScore)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur calcul score moyen: %w\", err)\\n    }\\n    if avgScore.Valid {",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 422,
      "category": "error_messages",
      "value": "erreur dates analyses: %w",
      "context": "    err = sm.db.QueryRow(\"SELECT MIN(created_at), MAX(created_at) FROM analyses\").Scan(&firstAnalysisStr, &lastAnalysisStr)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur dates analyses: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 444,
      "category": "error_messages",
      "value": "erreur requête statuts: %w",
      "context": "    rows, err := sm.db.Query(statusQuery)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur requête statuts: %w\", err)\\n    }\\n    defer rows.Close()",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 446,
      "category": "http_methods",
      "value": "Close",
      "context": "    return nil, fmt.Errorf(\"erreur requête statuts: %w\", err)\\n    }\\n>>> defer rows.Close()\\n    \\n    statusCounts := make(map[string]int)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 453,
      "category": "error_messages",
      "value": "erreur lecture statut: %w",
      "context": "    var count int\\n    if err := rows.Scan(&status, &count); err != nil {\\n>>> return nil, fmt.Errorf(\"erreur lecture statut: %w\", err)\\n    }\\n    statusCounts[status] = count",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 468,
      "category": "http_methods",
      "value": "AddDate",
      "context": "    }\\n    \\n>>> cutoffDate := time.Now().AddDate(0, 0, -olderThanDays)\\n    \\n    result, err := sm.db.Exec(\"DELETE FROM analyses WHERE created_at < ?\", cutoffDate)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 472,
      "category": "error_messages",
      "value": "erreur suppression anciennes analyses: %w",
      "context": "    result, err := sm.db.Exec(\"DELETE FROM analyses WHERE created_at < ?\", cutoffDate)\\n    if err != nil {\\n>>> return 0, fmt.Errorf(\"erreur suppression anciennes analyses: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 477,
      "category": "error_messages",
      "value": "erreur récupération lignes supprimées: %w",
      "context": "    rowsAffected, err := result.RowsAffected()\\n    if err != nil {\\n>>> return 0, fmt.Errorf(\"erreur récupération lignes supprimées: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 480,
      "category": "log_messages",
      "value": "Nettoyage terminé: %d analyses supprimées (plus de %d jours)",
      "context": "    }\\n    \\n>>> log.Printf(\"Nettoyage terminé: %d analyses supprimées (plus de %d jours)\", rowsAffected, olderThanDays)\\n    return int(rowsAffected), nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 480,
      "category": "log_messages",
      "value": "Nettoyage terminé: %d analyses supprimées (plus de %d jours)",
      "context": "    }\\n    \\n>>> log.Printf(\"Nettoyage terminé: %d analyses supprimées (plus de %d jours)\", rowsAffected, olderThanDays)\\n    return int(rowsAffected), nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 487,
      "category": "http_methods",
      "value": "Close",
      "context": "    func (sm *StorageManager) Close() error {\\n    if sm.db != nil {\\n>>> return sm.db.Close()\\n    }\\n    return nil",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 545,
      "category": "error_messages",
      "value": "analyse avec ID %d non trouvée",
      "context": "    if err != nil {\\n    if err == sql.ErrNoRows {\\n>>> return nil, fmt.Errorf(\"analyse avec ID %d non trouvée\", analysisID)\\n    }\\n    return nil, fmt.Errorf(\"erreur récupération analyse: %w\", err)",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/storage.go",
      "line": 547,
      "category": "error_messages",
      "value": "erreur récupération analyse: %w",
      "context": "    return nil, fmt.Errorf(\"analyse avec ID %d non trouvée\", analysisID)\\n    }\\n>>> return nil, fmt.Errorf(\"erreur récupération analyse: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 213,
      "category": "error_messages",
      "value": "erreur initialisation crawler: %w",
      "context": "    crawlerInstance, err := crawler.New(crawlerConfig)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur initialisation crawler: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 222,
      "category": "error_messages",
      "value": "erreur initialisation storage: %w",
      "context": "    storage, err := NewStorageManager(\"fire_salamander.db\")\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur initialisation storage: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 247,
      "category": "error_messages",
      "value": "orchestrateur déjà en cours d",
      "context": "    \\n    if o.isRunning {\\n>>> return fmt.Errorf(\"orchestrateur déjà en cours d'exécution\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 254,
      "category": "http_methods",
      "value": "Add",
      "context": "    // Démarrer les workers\\n    for i := 0; i < o.workers; i++ {\\n>>> o.workerPool.Add(1)\\n    go o.worker(ctx, i)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 259,
      "category": "log_messages",
      "value": "Orchestrateur Fire Salamander démarré avec succès",
      "context": "    \\n    o.isRunning = true\\n>>> log.Printf(\"Orchestrateur Fire Salamander démarré avec succès\")\\n    \\n    return nil",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 259,
      "category": "log_messages",
      "value": "Orchestrateur Fire Salamander démarré avec succès",
      "context": "    \\n    o.isRunning = true\\n>>> log.Printf(\"Orchestrateur Fire Salamander démarré avec succès\")\\n    \\n    return nil",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 282,
      "category": "log_messages",
      "value": "Orchestrateur Fire Salamander arrêté",
      "context": "    \\n    o.isRunning = false\\n>>> log.Printf(\"Orchestrateur Fire Salamander arrêté\")\\n    \\n    return nil",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 282,
      "category": "log_messages",
      "value": "Orchestrateur Fire Salamander arrêté",
      "context": "    \\n    o.isRunning = false\\n>>> log.Printf(\"Orchestrateur Fire Salamander arrêté\")\\n    \\n    return nil",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 305,
      "category": "log_messages",
      "value": "Tâche %s ajoutée à la queue pour %s",
      "context": "    select {\\n    case o.taskQueue <- task:\\n>>> log.Printf(\"Tâche %s ajoutée à la queue pour %s\", taskID, targetURL)\\n    case <-ctx.Done():\\n    return nil, ctx.Err()",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 305,
      "category": "log_messages",
      "value": "Tâche %s ajoutée à la queue pour %s",
      "context": "    select {\\n    case o.taskQueue <- task:\\n>>> log.Printf(\"Tâche %s ajoutée à la queue pour %s\", taskID, targetURL)\\n    case <-ctx.Done():\\n    return nil, ctx.Err()",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 323,
      "category": "log_messages",
      "value": "Worker %d démarré",
      "context": "    defer o.workerPool.Done()\\n    \\n>>> log.Printf(\"Worker %d démarré\", workerID)\\n    \\n    for {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 323,
      "category": "log_messages",
      "value": "Worker %d démarré",
      "context": "    defer o.workerPool.Done()\\n    \\n>>> log.Printf(\"Worker %d démarré\", workerID)\\n    \\n    for {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 329,
      "category": "log_messages",
      "value": "Worker %d: queue fermée, arrêt",
      "context": "    case task, ok := <-o.taskQueue:\\n    if !ok {\\n>>> log.Printf(\"Worker %d: queue fermée, arrêt\", workerID)\\n    return\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 329,
      "category": "log_messages",
      "value": "Worker %d: queue fermée, arrêt",
      "context": "    case task, ok := <-o.taskQueue:\\n    if !ok {\\n>>> log.Printf(\"Worker %d: queue fermée, arrêt\", workerID)\\n    return\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 333,
      "category": "log_messages",
      "value": "Worker %d: traitement tâche %s pour %s",
      "context": "    }\\n    \\n>>> log.Printf(\"Worker %d: traitement tâche %s pour %s\", workerID, task.ID, task.URL)\\n    result := o.processTask(ctx, task)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 333,
      "category": "log_messages",
      "value": "Worker %d: traitement tâche %s pour %s",
      "context": "    }\\n    \\n>>> log.Printf(\"Worker %d: traitement tâche %s pour %s\", workerID, task.ID, task.URL)\\n    result := o.processTask(ctx, task)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 340,
      "category": "log_messages",
      "value": "Worker %d: impossible d",
      "context": "    case task.ResultChan <- result:\\n    default:\\n>>> log.Printf(\"Worker %d: impossible d'envoyer le résultat pour %s\", workerID, task.ID)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 340,
      "category": "log_messages",
      "value": "Worker %d: impossible d",
      "context": "    case task.ResultChan <- result:\\n    default:\\n>>> log.Printf(\"Worker %d: impossible d'envoyer le résultat pour %s\", workerID, task.ID)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 344,
      "category": "log_messages",
      "value": "Worker %d: signal d",
      "context": "    \\n    case <-o.shutdownChan:\\n>>> log.Printf(\"Worker %d: signal d'arrêt reçu\", workerID)\\n    return\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 344,
      "category": "log_messages",
      "value": "Worker %d: signal d",
      "context": "    \\n    case <-o.shutdownChan:\\n>>> log.Printf(\"Worker %d: signal d'arrêt reçu\", workerID)\\n    return\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 348,
      "category": "log_messages",
      "value": "Worker %d: contexte annulé",
      "context": "    \\n    case <-ctx.Done():\\n>>> log.Printf(\"Worker %d: contexte annulé\", workerID)\\n    return\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 348,
      "category": "log_messages",
      "value": "Worker %d: contexte annulé",
      "context": "    \\n    case <-ctx.Done():\\n>>> log.Printf(\"Worker %d: contexte annulé\", workerID)\\n    return\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 381,
      "category": "http_methods",
      "value": "Add",
      "context": "    // 1. Crawling (si demandé)\\n    if task.Options.IncludeCrawling && (task.Type == AnalysisTypeFull || task.Type == AnalysisTypeQuick) {\\n>>> wg.Add(1)\\n    go func() {\\n    defer wg.Done()",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 400,
      "category": "http_methods",
      "value": "Add",
      "context": "    // 2. Analyse sémantique\\n    if task.Type == AnalysisTypeFull || task.Type == AnalysisTypeSemantic {\\n>>> wg.Add(1)\\n    go func() {\\n    defer wg.Done()",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 419,
      "category": "http_methods",
      "value": "Add",
      "context": "    // 3. Analyse SEO\\n    if task.Type == AnalysisTypeFull || task.Type == AnalysisTypeSEO || task.Type == AnalysisTypeQuick {\\n>>> wg.Add(1)\\n    go func() {\\n    defer wg.Done()",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 457,
      "category": "log_messages",
      "value": "Analyse partielle - %d erreurs",
      "context": "    } else if crawlResult != nil || semanticResult != nil || seoResult != nil {\\n    result.Status = AnalysisStatusPartial\\n>>> result.Warnings = append(result.Warnings, fmt.Sprintf(\"Analyse partielle - %d erreurs\", len(result.Errors)))\\n    } else {\\n    result.Status = AnalysisStatusFailed",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 464,
      "category": "http_methods",
      "value": "updateStats",
      "context": "    \\n    // Mettre à jour les statistiques\\n>>> o.updateStats(result)\\n    \\n    log.Printf(\"Tâche %s terminée - Statut: %s, Durée: %v, Score: %.1f\",",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 466,
      "category": "log_messages",
      "value": "Tâche %s terminée - Statut: %s, Durée: %v, Score: %.1f",
      "context": "    o.updateStats(result)\\n    \\n>>> log.Printf(\"Tâche %s terminée - Statut: %s, Durée: %v, Score: %.1f\",\\n    task.ID, result.Status, result.ProcessingTime, result.OverallScore)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 466,
      "category": "log_messages",
      "value": "Tâche %s terminée - Statut: %s, Durée: %v, Score: %.1f",
      "context": "    o.updateStats(result)\\n    \\n>>> log.Printf(\"Tâche %s terminée - Statut: %s, Durée: %v, Score: %.1f\",\\n    task.ID, result.Status, result.ProcessingTime, result.OverallScore)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 474,
      "category": "log_messages",
      "value": "Début crawling pour %s",
      "context": "    // performCrawling effectue le crawling\\n    func (o *Orchestrator) performCrawling(ctx context.Context, task *AnalysisTask) (*crawler.CrawlResult, error) {\\n>>> log.Printf(\"Début crawling pour %s\", task.URL)\\n    \\n    // Configuration du crawler basée sur les options",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 474,
      "category": "log_messages",
      "value": "Début crawling pour %s",
      "context": "    // performCrawling effectue le crawling\\n    func (o *Orchestrator) performCrawling(ctx context.Context, task *AnalysisTask) (*crawler.CrawlResult, error) {\\n>>> log.Printf(\"Début crawling pour %s\", task.URL)\\n    \\n    // Configuration du crawler basée sur les options",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 485,
      "category": "error_messages",
      "value": "erreur crawling page: %w",
      "context": "    result, err := o.crawler.CrawlPage(ctx, task.URL)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur crawling page: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 488,
      "category": "log_messages",
      "value": "Crawling terminé - Page: %s, Status: %d",
      "context": "    }\\n    \\n>>> log.Printf(\"Crawling terminé - Page: %s, Status: %d\", task.URL, result.StatusCode)\\n    return result, nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 488,
      "category": "log_messages",
      "value": "Crawling terminé - Page: %s, Status: %d",
      "context": "    }\\n    \\n>>> log.Printf(\"Crawling terminé - Page: %s, Status: %d\", task.URL, result.StatusCode)\\n    return result, nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 494,
      "category": "log_messages",
      "value": "Début analyse sémantique pour %s",
      "context": "    // performSemanticAnalysis effectue l'analyse sémantique\\n    func (o *Orchestrator) performSemanticAnalysis(ctx context.Context, task *AnalysisTask) (*semantic.AnalysisResult, error) {\\n>>> log.Printf(\"Début analyse sémantique pour %s\", task.URL)\\n    \\n    // Pour l'intégration, on utilise du contenu HTML simulé",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 494,
      "category": "log_messages",
      "value": "Début analyse sémantique pour %s",
      "context": "    // performSemanticAnalysis effectue l'analyse sémantique\\n    func (o *Orchestrator) performSemanticAnalysis(ctx context.Context, task *AnalysisTask) (*semantic.AnalysisResult, error) {\\n>>> log.Printf(\"Début analyse sémantique pour %s\", task.URL)\\n    \\n    // Pour l'intégration, on utilise du contenu HTML simulé",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 500,
      "category": "error_messages",
      "value": "impossible de récupérer le contenu HTML",
      "context": "    htmlContent := o.fetchHTMLContent(ctx, task.URL)\\n    if htmlContent == \"\" {\\n>>> return nil, fmt.Errorf(\"impossible de récupérer le contenu HTML\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 505,
      "category": "error_messages",
      "value": "erreur analyse sémantique: %w",
      "context": "    result, err := o.semanticAnalyzer.AnalyzePage(ctx, task.URL, htmlContent)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur analyse sémantique: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 508,
      "category": "log_messages",
      "value": "Analyse sémantique terminée - Score: %.1f",
      "context": "    }\\n    \\n>>> log.Printf(\"Analyse sémantique terminée - Score: %.1f\", result.SEOScore.Overall)\\n    return result, nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 508,
      "category": "log_messages",
      "value": "Analyse sémantique terminée - Score: %.1f",
      "context": "    }\\n    \\n>>> log.Printf(\"Analyse sémantique terminée - Score: %.1f\", result.SEOScore.Overall)\\n    return result, nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 514,
      "category": "log_messages",
      "value": "Début analyse SEO pour %s",
      "context": "    // performSEOAnalysis effectue l'analyse SEO\\n    func (o *Orchestrator) performSEOAnalysis(ctx context.Context, task *AnalysisTask) (*seo.SEOAnalysisResult, error) {\\n>>> log.Printf(\"Début analyse SEO pour %s\", task.URL)\\n    \\n    result, err := o.seoAnalyzer.AnalyzePage(ctx, task.URL)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 514,
      "category": "log_messages",
      "value": "Début analyse SEO pour %s",
      "context": "    // performSEOAnalysis effectue l'analyse SEO\\n    func (o *Orchestrator) performSEOAnalysis(ctx context.Context, task *AnalysisTask) (*seo.SEOAnalysisResult, error) {\\n>>> log.Printf(\"Début analyse SEO pour %s\", task.URL)\\n    \\n    result, err := o.seoAnalyzer.AnalyzePage(ctx, task.URL)",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 518,
      "category": "error_messages",
      "value": "erreur analyse SEO: %w",
      "context": "    result, err := o.seoAnalyzer.AnalyzePage(ctx, task.URL)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur analyse SEO: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 521,
      "category": "log_messages",
      "value": "Analyse SEO terminée - Score: %.1f",
      "context": "    }\\n    \\n>>> log.Printf(\"Analyse SEO terminée - Score: %.1f\", result.OverallScore)\\n    return result, nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 521,
      "category": "log_messages",
      "value": "Analyse SEO terminée - Score: %.1f",
      "context": "    }\\n    \\n>>> log.Printf(\"Analyse SEO terminée - Score: %.1f\", result.OverallScore)\\n    return result, nil\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 646,
      "category": "log_messages",
      "value": "Performance: %.1f%%",
      "context": "    Title:       \"Décalage performance-contenu\",\\n    Description: \"Bon contenu mais performances techniques faibles\",\\n>>> Evidence:    []string{fmt.Sprintf(\"Performance: %.1f%%\", perfScore), fmt.Sprintf(\"Contenu: %.1f%%\", contentScore)},\\n    Modules:     []string{constants.OrchestratorAnalysisTypeSemantic, constants.OrchestratorAgentNameSEO},\\n    Impact:      constants.OrchestratorImpactNegative,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 646,
      "category": "log_messages",
      "value": "Contenu: %.1f%%",
      "context": "    Title:       \"Décalage performance-contenu\",\\n    Description: \"Bon contenu mais performances techniques faibles\",\\n>>> Evidence:    []string{fmt.Sprintf(\"Performance: %.1f%%\", perfScore), fmt.Sprintf(\"Contenu: %.1f%%\", contentScore)},\\n    Modules:     []string{constants.OrchestratorAnalysisTypeSemantic, constants.OrchestratorAgentNameSEO},\\n    Impact:      constants.OrchestratorImpactNegative,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 760,
      "category": "log_messages",
      "value": "Erreur sauvegarde analyse %s: %v",
      "context": "    err := o.storage.SaveAnalysis(result)\\n    if err != nil {\\n>>> log.Printf(\"Erreur sauvegarde analyse %s: %v\", result.TaskID, err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 760,
      "category": "log_messages",
      "value": "Erreur sauvegarde analyse %s: %v",
      "context": "    err := o.storage.SaveAnalysis(result)\\n    if err != nil {\\n>>> log.Printf(\"Erreur sauvegarde analyse %s: %v\", result.TaskID, err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 783,
      "category": "log_messages",
      "value": "Erreur récupération analyses récentes: %v",
      "context": "    analyses, err := o.storage.GetRecentAnalyses(20)\\n    if err != nil {\\n>>> log.Printf(\"Erreur récupération analyses récentes: %v\", err)\\n    return []map[string]interface{}{}\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 783,
      "category": "log_messages",
      "value": "Erreur récupération analyses récentes: %v",
      "context": "    analyses, err := o.storage.GetRecentAnalyses(20)\\n    if err != nil {\\n>>> log.Printf(\"Erreur récupération analyses récentes: %v\", err)\\n    return []map[string]interface{}{}\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 809,
      "category": "error_messages",
      "value": "storage non disponible",
      "context": "    func (o *Orchestrator) GetAnalysisDetails(analysisID int64) (interface{}, error) {\\n    if o.storage == nil {\\n>>> return nil, fmt.Errorf(\"storage non disponible\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/orchestrator.go",
      "line": 815,
      "category": "error_messages",
      "value": "analyse non trouvée: %w",
      "context": "    analysis, err := o.storage.GetAnalysisById(analysisID)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"analyse non trouvée: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 80,
      "category": "api_endpoints",
      "value": "/api/v1/analyze",
      "context": "    \\n    // Routes d'analyse\\n>>> api.mux.HandleFunc(\"/api/v1/analyze\", api.withMiddleware(api.handleAnalyze))\\n    api.mux.HandleFunc(\"/api/v1/analyze/semantic\", api.withMiddleware(api.handleSemanticAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/seo\", api.withMiddleware(api.handleSEOAnalysis))",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 80,
      "category": "api_endpoints",
      "value": "/api/v1/analyze",
      "context": "    \\n    // Routes d'analyse\\n>>> api.mux.HandleFunc(\"/api/v1/analyze\", api.withMiddleware(api.handleAnalyze))\\n    api.mux.HandleFunc(\"/api/v1/analyze/semantic\", api.withMiddleware(api.handleSemanticAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/seo\", api.withMiddleware(api.handleSEOAnalysis))",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 81,
      "category": "api_endpoints",
      "value": "/api/v1/analyze/semantic",
      "context": "    // Routes d'analyse\\n    api.mux.HandleFunc(\"/api/v1/analyze\", api.withMiddleware(api.handleAnalyze))\\n>>> api.mux.HandleFunc(\"/api/v1/analyze/semantic\", api.withMiddleware(api.handleSemanticAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/seo\", api.withMiddleware(api.handleSEOAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/quick\", api.withMiddleware(api.handleQuickAnalysis))",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 81,
      "category": "api_endpoints",
      "value": "/api/v1/analyze/semantic",
      "context": "    // Routes d'analyse\\n    api.mux.HandleFunc(\"/api/v1/analyze\", api.withMiddleware(api.handleAnalyze))\\n>>> api.mux.HandleFunc(\"/api/v1/analyze/semantic\", api.withMiddleware(api.handleSemanticAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/seo\", api.withMiddleware(api.handleSEOAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/quick\", api.withMiddleware(api.handleQuickAnalysis))",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 82,
      "category": "api_endpoints",
      "value": "/api/v1/analyze/seo",
      "context": "    api.mux.HandleFunc(\"/api/v1/analyze\", api.withMiddleware(api.handleAnalyze))\\n    api.mux.HandleFunc(\"/api/v1/analyze/semantic\", api.withMiddleware(api.handleSemanticAnalysis))\\n>>> api.mux.HandleFunc(\"/api/v1/analyze/seo\", api.withMiddleware(api.handleSEOAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/quick\", api.withMiddleware(api.handleQuickAnalysis))\\n    ",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 82,
      "category": "api_endpoints",
      "value": "/api/v1/analyze/seo",
      "context": "    api.mux.HandleFunc(\"/api/v1/analyze\", api.withMiddleware(api.handleAnalyze))\\n    api.mux.HandleFunc(\"/api/v1/analyze/semantic\", api.withMiddleware(api.handleSemanticAnalysis))\\n>>> api.mux.HandleFunc(\"/api/v1/analyze/seo\", api.withMiddleware(api.handleSEOAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/quick\", api.withMiddleware(api.handleQuickAnalysis))\\n    ",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 83,
      "category": "api_endpoints",
      "value": "/api/v1/analyze/quick",
      "context": "    api.mux.HandleFunc(\"/api/v1/analyze/semantic\", api.withMiddleware(api.handleSemanticAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/seo\", api.withMiddleware(api.handleSEOAnalysis))\\n>>> api.mux.HandleFunc(\"/api/v1/analyze/quick\", api.withMiddleware(api.handleQuickAnalysis))\\n    \\n    // Routes de monitoring",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 83,
      "category": "api_endpoints",
      "value": "/api/v1/analyze/quick",
      "context": "    api.mux.HandleFunc(\"/api/v1/analyze/semantic\", api.withMiddleware(api.handleSemanticAnalysis))\\n    api.mux.HandleFunc(\"/api/v1/analyze/seo\", api.withMiddleware(api.handleSEOAnalysis))\\n>>> api.mux.HandleFunc(\"/api/v1/analyze/quick\", api.withMiddleware(api.handleQuickAnalysis))\\n    \\n    // Routes de monitoring",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 86,
      "category": "api_endpoints",
      "value": "/api/v1/health",
      "context": "    \\n    // Routes de monitoring\\n>>> api.mux.HandleFunc(\"/api/v1/health\", api.withMiddleware(api.handleHealth))\\n    api.mux.HandleFunc(\"/api/v1/stats\", api.withMiddleware(api.handleStats))\\n    api.mux.HandleFunc(\"/api/v1/analyses\", api.withMiddleware(api.handleAnalyses))",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 86,
      "category": "api_endpoints",
      "value": "/api/v1/health",
      "context": "    \\n    // Routes de monitoring\\n>>> api.mux.HandleFunc(\"/api/v1/health\", api.withMiddleware(api.handleHealth))\\n    api.mux.HandleFunc(\"/api/v1/stats\", api.withMiddleware(api.handleStats))\\n    api.mux.HandleFunc(\"/api/v1/analyses\", api.withMiddleware(api.handleAnalyses))",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 87,
      "category": "api_endpoints",
      "value": "/api/v1/stats",
      "context": "    // Routes de monitoring\\n    api.mux.HandleFunc(\"/api/v1/health\", api.withMiddleware(api.handleHealth))\\n>>> api.mux.HandleFunc(\"/api/v1/stats\", api.withMiddleware(api.handleStats))\\n    api.mux.HandleFunc(\"/api/v1/analyses\", api.withMiddleware(api.handleAnalyses))\\n    api.mux.HandleFunc(\"/api/v1/analysis/\", api.withMiddleware(api.handleAnalysisDetails))",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 87,
      "category": "api_endpoints",
      "value": "/api/v1/stats",
      "context": "    // Routes de monitoring\\n    api.mux.HandleFunc(\"/api/v1/health\", api.withMiddleware(api.handleHealth))\\n>>> api.mux.HandleFunc(\"/api/v1/stats\", api.withMiddleware(api.handleStats))\\n    api.mux.HandleFunc(\"/api/v1/analyses\", api.withMiddleware(api.handleAnalyses))\\n    api.mux.HandleFunc(\"/api/v1/analysis/\", api.withMiddleware(api.handleAnalysisDetails))",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 88,
      "category": "api_endpoints",
      "value": "/api/v1/analyses",
      "context": "    api.mux.HandleFunc(\"/api/v1/health\", api.withMiddleware(api.handleHealth))\\n    api.mux.HandleFunc(\"/api/v1/stats\", api.withMiddleware(api.handleStats))\\n>>> api.mux.HandleFunc(\"/api/v1/analyses\", api.withMiddleware(api.handleAnalyses))\\n    api.mux.HandleFunc(\"/api/v1/analysis/\", api.withMiddleware(api.handleAnalysisDetails))\\n    ",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 88,
      "category": "api_endpoints",
      "value": "/api/v1/analyses",
      "context": "    api.mux.HandleFunc(\"/api/v1/health\", api.withMiddleware(api.handleHealth))\\n    api.mux.HandleFunc(\"/api/v1/stats\", api.withMiddleware(api.handleStats))\\n>>> api.mux.HandleFunc(\"/api/v1/analyses\", api.withMiddleware(api.handleAnalyses))\\n    api.mux.HandleFunc(\"/api/v1/analysis/\", api.withMiddleware(api.handleAnalysisDetails))\\n    ",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 89,
      "category": "api_endpoints",
      "value": "/api/v1/analysis/",
      "context": "    api.mux.HandleFunc(\"/api/v1/stats\", api.withMiddleware(api.handleStats))\\n    api.mux.HandleFunc(\"/api/v1/analyses\", api.withMiddleware(api.handleAnalyses))\\n>>> api.mux.HandleFunc(\"/api/v1/analysis/\", api.withMiddleware(api.handleAnalysisDetails))\\n    \\n    // Routes utilitaires",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 89,
      "category": "api_endpoints",
      "value": "/api/v1/analysis/",
      "context": "    api.mux.HandleFunc(\"/api/v1/stats\", api.withMiddleware(api.handleStats))\\n    api.mux.HandleFunc(\"/api/v1/analyses\", api.withMiddleware(api.handleAnalyses))\\n>>> api.mux.HandleFunc(\"/api/v1/analysis/\", api.withMiddleware(api.handleAnalysisDetails))\\n    \\n    // Routes utilitaires",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 92,
      "category": "api_endpoints",
      "value": "/api/v1/info",
      "context": "    \\n    // Routes utilitaires\\n>>> api.mux.HandleFunc(\"/api/v1/info\", api.withMiddleware(api.handleInfo))\\n    api.mux.HandleFunc(\"/api/v1/version\", api.withMiddleware(api.handleVersion))\\n    }",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 92,
      "category": "api_endpoints",
      "value": "/api/v1/info",
      "context": "    \\n    // Routes utilitaires\\n>>> api.mux.HandleFunc(\"/api/v1/info\", api.withMiddleware(api.handleInfo))\\n    api.mux.HandleFunc(\"/api/v1/version\", api.withMiddleware(api.handleVersion))\\n    }",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 93,
      "category": "api_endpoints",
      "value": "/api/v1/version",
      "context": "    // Routes utilitaires\\n    api.mux.HandleFunc(\"/api/v1/info\", api.withMiddleware(api.handleInfo))\\n>>> api.mux.HandleFunc(\"/api/v1/version\", api.withMiddleware(api.handleVersion))\\n    }\\n    ",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 93,
      "category": "api_endpoints",
      "value": "/api/v1/version",
      "context": "    // Routes utilitaires\\n    api.mux.HandleFunc(\"/api/v1/info\", api.withMiddleware(api.handleInfo))\\n>>> api.mux.HandleFunc(\"/api/v1/version\", api.withMiddleware(api.handleVersion))\\n    }\\n    ",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 100,
      "category": "http_methods",
      "value": "Set",
      "context": "    return func(w http.ResponseWriter, r *http.Request) {\\n    // CORS\\n>>> w.Header().Set(constants.APIHeaderAccessControlAllowOrigin, \"*\")\\n    w.Header().Set(constants.APIHeaderAccessControlAllowMethods, \"GET, POST, PUT, DELETE, OPTIONS\")\\n    w.Header().Set(constants.APIHeaderAccessControlAllowHeaders, \"Content-Type, Authorization, X-Requested-With\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 101,
      "category": "http_methods",
      "value": "Set",
      "context": "    // CORS\\n    w.Header().Set(constants.APIHeaderAccessControlAllowOrigin, \"*\")\\n>>> w.Header().Set(constants.APIHeaderAccessControlAllowMethods, \"GET, POST, PUT, DELETE, OPTIONS\")\\n    w.Header().Set(constants.APIHeaderAccessControlAllowHeaders, \"Content-Type, Authorization, X-Requested-With\")\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 102,
      "category": "http_methods",
      "value": "Set",
      "context": "    w.Header().Set(constants.APIHeaderAccessControlAllowOrigin, \"*\")\\n    w.Header().Set(constants.APIHeaderAccessControlAllowMethods, \"GET, POST, PUT, DELETE, OPTIONS\")\\n>>> w.Header().Set(constants.APIHeaderAccessControlAllowHeaders, \"Content-Type, Authorization, X-Requested-With\")\\n    \\n    // Content-Type",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 105,
      "category": "http_methods",
      "value": "Set",
      "context": "    \\n    // Content-Type\\n>>> w.Header().Set(constants.APIHeaderContentType, constants.APIContentTypeJSON)\\n    \\n    // Version header",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 108,
      "category": "http_headers",
      "value": "X-Fire-Salamander-Version",
      "context": "    \\n    // Version header\\n>>> w.Header().Set(\"X-Fire-Salamander-Version\", config.Version())\\n    \\n    // Logging des requêtes",
      "severity": "Medium",
      "description": "Headers HTTP hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 108,
      "category": "http_methods",
      "value": "Set",
      "context": "    \\n    // Version header\\n>>> w.Header().Set(\"X-Fire-Salamander-Version\", config.Version())\\n    \\n    // Logging des requêtes",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 112,
      "category": "log_messages",
      "value": "API Request: %s %s from %s",
      "context": "    // Logging des requêtes\\n    start := time.Now()\\n>>> log.Printf(\"API Request: %s %s from %s\", r.Method, r.URL.Path, r.RemoteAddr)\\n    \\n    // Gestion OPTIONS pour CORS",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 112,
      "category": "log_messages",
      "value": "API Request: %s %s from %s",
      "context": "    // Logging des requêtes\\n    start := time.Now()\\n>>> log.Printf(\"API Request: %s %s from %s\", r.Method, r.URL.Path, r.RemoteAddr)\\n    \\n    // Gestion OPTIONS pour CORS",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 125,
      "category": "log_messages",
      "value": "API Response: %s %s completed in %v",
      "context": "    // Log de fin de requête\\n    duration := time.Since(start)\\n>>> log.Printf(\"API Response: %s %s completed in %v\", r.Method, r.URL.Path, duration)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 125,
      "category": "log_messages",
      "value": "API Response: %s %s completed in %v",
      "context": "    // Log de fin de requête\\n    duration := time.Since(start)\\n>>> log.Printf(\"API Response: %s %s completed in %v\", r.Method, r.URL.Path, duration)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 131,
      "category": "log_messages",
      "value": "Démarrage du serveur API Fire Salamander sur le port %d",
      "context": "    // Start démarre le serveur API\\n    func (api *APIServer) Start() error {\\n>>> log.Printf(\"Démarrage du serveur API Fire Salamander sur le port %d\", api.config.Server.Port)\\n    \\n    // Démarrer le serveur dans une goroutine",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 131,
      "category": "log_messages",
      "value": "Démarrage du serveur API Fire Salamander sur le port %d",
      "context": "    // Start démarre le serveur API\\n    func (api *APIServer) Start() error {\\n>>> log.Printf(\"Démarrage du serveur API Fire Salamander sur le port %d\", api.config.Server.Port)\\n    \\n    // Démarrer le serveur dans une goroutine",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 136,
      "category": "log_messages",
      "value": "Erreur serveur API: %v",
      "context": "    go func() {\\n    if err := api.server.ListenAndServe(); err != nil && err != http.ErrServerClosed {\\n>>> log.Fatalf(\"Erreur serveur API: %v\", err)\\n    }\\n    }()",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 140,
      "category": "log_messages",
      "value": "Serveur API Fire Salamander démarré avec succès",
      "context": "    }()\\n    \\n>>> log.Printf(\"Serveur API Fire Salamander démarré avec succès\")\\n    log.Printf(constants.APIDocAvailableFormat, api.config.Server.Port)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 140,
      "category": "log_messages",
      "value": "Serveur API Fire Salamander démarré avec succès",
      "context": "    }()\\n    \\n>>> log.Printf(\"Serveur API Fire Salamander démarré avec succès\")\\n    log.Printf(constants.APIDocAvailableFormat, api.config.Server.Port)\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 148,
      "category": "log_messages",
      "value": "Arrêt du serveur API Fire Salamander",
      "context": "    // Stop arrête le serveur API\\n    func (api *APIServer) Stop(ctx context.Context) error {\\n>>> log.Printf(\"Arrêt du serveur API Fire Salamander\")\\n    return api.server.Shutdown(ctx)\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 148,
      "category": "log_messages",
      "value": "Arrêt du serveur API Fire Salamander",
      "context": "    // Stop arrête le serveur API\\n    func (api *APIServer) Stop(ctx context.Context) error {\\n>>> log.Printf(\"Arrêt du serveur API Fire Salamander\")\\n    return api.server.Shutdown(ctx)\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 161,
      "category": "http_methods",
      "value": "Set",
      "context": "    }\\n    \\n>>> w.Header().Set(constants.APIHeaderContentType, constants.APIContentTypeHTML)\\n    html := `\\n    <!DOCTYPE html>",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 242,
      "category": "http_methods",
      "value": "Decode",
      "context": "    \\n    var req AnalysisRequest\\n>>> if err := json.NewDecoder(r.Body).Decode(&req); err != nil {\\n    api.sendError(w, constants.APIErrorInvalidJSON + \": \"+err.Error(), http.StatusBadRequest)\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 289,
      "category": "http_methods",
      "value": "Decode",
      "context": "    \\n    var req AnalysisRequest\\n>>> if err := json.NewDecoder(r.Body).Decode(&req); err != nil {\\n    api.sendError(w, constants.APIErrorInvalidJSON + \": \"+err.Error(), http.StatusBadRequest)\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 321,
      "category": "http_methods",
      "value": "Decode",
      "context": "    \\n    var req AnalysisRequest\\n>>> if err := json.NewDecoder(r.Body).Decode(&req); err != nil {\\n    api.sendError(w, constants.APIErrorInvalidJSON + \": \"+err.Error(), http.StatusBadRequest)\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 353,
      "category": "http_methods",
      "value": "Decode",
      "context": "    \\n    var req AnalysisRequest\\n>>> if err := json.NewDecoder(r.Body).Decode(&req); err != nil {\\n    api.sendError(w, constants.APIErrorInvalidJSON + \": \"+err.Error(), http.StatusBadRequest)\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 384,
      "category": "http_methods",
      "value": "GetStats",
      "context": "    }\\n    \\n>>> stats := api.orchestrator.GetStats()\\n    \\n    health := HealthResponse{",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 414,
      "category": "http_methods",
      "value": "GetStats",
      "context": "    }\\n    \\n>>> stats := api.orchestrator.GetStats()\\n    api.sendSuccess(w, stats, \"Statistiques récupérées\")\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 439,
      "category": "api_endpoints",
      "value": "/api/v1/analysis/",
      "context": "    \\n    // Extraire l'ID de l'analyse depuis l'URL\\n>>> path := strings.TrimPrefix(r.URL.Path, \"/api/v1/analysis/\")\\n    if path == \"\" {\\n    api.sendError(w, \"ID d'analyse requis\", http.StatusBadRequest)",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 474,
      "category": "api_endpoints",
      "value": "/api/v1/analyze",
      "context": "    constants.APIJSONFieldDescription: \"API d'analyse SEO et sémantique avancée\",\\n    \"endpoints\": map[string]interface{}{\\n>>> \"analyze\":          \"/api/v1/analyze\",\\n    constants.APIAgentSemantic:         \"/api/v1/analyze/semantic\",\\n    constants.APIAgentSEO:              \"/api/v1/analyze/seo\",",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 474,
      "category": "json_fields",
      "value": "analyze",
      "context": "    constants.APIJSONFieldDescription: \"API d'analyse SEO et sémantique avancée\",\\n    \"endpoints\": map[string]interface{}{\\n>>> \"analyze\":          \"/api/v1/analyze\",\\n    constants.APIAgentSemantic:         \"/api/v1/analyze/semantic\",\\n    constants.APIAgentSEO:              \"/api/v1/analyze/seo\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 475,
      "category": "api_endpoints",
      "value": "/api/v1/analyze/semantic",
      "context": "    \"endpoints\": map[string]interface{}{\\n    \"analyze\":          \"/api/v1/analyze\",\\n>>> constants.APIAgentSemantic:         \"/api/v1/analyze/semantic\",\\n    constants.APIAgentSEO:              \"/api/v1/analyze/seo\",\\n    \"quick\":            \"/api/v1/analyze/quick\",",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 476,
      "category": "api_endpoints",
      "value": "/api/v1/analyze/seo",
      "context": "    \"analyze\":          \"/api/v1/analyze\",\\n    constants.APIAgentSemantic:         \"/api/v1/analyze/semantic\",\\n>>> constants.APIAgentSEO:              \"/api/v1/analyze/seo\",\\n    \"quick\":            \"/api/v1/analyze/quick\",\\n    \"health\":           \"/api/v1/health\",",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 477,
      "category": "api_endpoints",
      "value": "/api/v1/analyze/quick",
      "context": "    constants.APIAgentSemantic:         \"/api/v1/analyze/semantic\",\\n    constants.APIAgentSEO:              \"/api/v1/analyze/seo\",\\n>>> \"quick\":            \"/api/v1/analyze/quick\",\\n    \"health\":           \"/api/v1/health\",\\n    \"stats\":            \"/api/v1/stats\",",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 477,
      "category": "json_fields",
      "value": "quick",
      "context": "    constants.APIAgentSemantic:         \"/api/v1/analyze/semantic\",\\n    constants.APIAgentSEO:              \"/api/v1/analyze/seo\",\\n>>> \"quick\":            \"/api/v1/analyze/quick\",\\n    \"health\":           \"/api/v1/health\",\\n    \"stats\":            \"/api/v1/stats\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 478,
      "category": "api_endpoints",
      "value": "/api/v1/health",
      "context": "    constants.APIAgentSEO:              \"/api/v1/analyze/seo\",\\n    \"quick\":            \"/api/v1/analyze/quick\",\\n>>> \"health\":           \"/api/v1/health\",\\n    \"stats\":            \"/api/v1/stats\",\\n    },",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 478,
      "category": "json_fields",
      "value": "health",
      "context": "    constants.APIAgentSEO:              \"/api/v1/analyze/seo\",\\n    \"quick\":            \"/api/v1/analyze/quick\",\\n>>> \"health\":           \"/api/v1/health\",\\n    \"stats\":            \"/api/v1/stats\",\\n    },",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 479,
      "category": "api_endpoints",
      "value": "/api/v1/stats",
      "context": "    \"quick\":            \"/api/v1/analyze/quick\",\\n    \"health\":           \"/api/v1/health\",\\n>>> \"stats\":            \"/api/v1/stats\",\\n    },\\n    \"supported_analysis_types\": []string{",
      "severity": "Critical",
      "description": "Endpoints API ou URLs hardcodées"
    },
    {
      "file": "internal/integration/api.go",
      "line": 479,
      "category": "json_fields",
      "value": "stats",
      "context": "    \"quick\":            \"/api/v1/analyze/quick\",\\n    \"health\":           \"/api/v1/health\",\\n>>> \"stats\":            \"/api/v1/stats\",\\n    },\\n    \"supported_analysis_types\": []string{",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 529,
      "category": "log_messages",
      "value": "Erreur encodage JSON: %v",
      "context": "    w.WriteHeader(http.StatusOK)\\n    if err := json.NewEncoder(w).Encode(response); err != nil {\\n>>> log.Printf(\"Erreur encodage JSON: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 529,
      "category": "log_messages",
      "value": "Erreur encodage JSON: %v",
      "context": "    w.WriteHeader(http.StatusOK)\\n    if err := json.NewEncoder(w).Encode(response); err != nil {\\n>>> log.Printf(\"Erreur encodage JSON: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 543,
      "category": "log_messages",
      "value": "Erreur encodage JSON d",
      "context": "    w.WriteHeader(statusCode)\\n    if err := json.NewEncoder(w).Encode(response); err != nil {\\n>>> log.Printf(\"Erreur encodage JSON d'erreur: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/integration/api.go",
      "line": 543,
      "category": "log_messages",
      "value": "Erreur encodage JSON d",
      "context": "    w.WriteHeader(statusCode)\\n    if err := json.NewEncoder(w).Encode(response); err != nil {\\n>>> log.Printf(\"Erreur encodage JSON d'erreur: %v\", err)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 35,
      "category": "log_messages",
      "value": "Creating page cache",
      "context": "    // NewPageCache crée un nouveau cache de pages\\n    func NewPageCache(ttl time.Duration) *PageCache {\\n>>> cacheLog.Debug(\"Creating page cache\", map[string]interface{}{\\n    \"ttl\":      ttl,\\n    \"capacity\": 1000, // Capacité par défaut",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 88,
      "category": "http_methods",
      "value": "Add",
      "context": "    if item, exists := pc.cache[key]; exists {\\n    item.value = value\\n>>> item.expiresAt = time.Now().Add(pc.ttl)\\n    pc.evictList.MoveToFront(item.element)\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 102,
      "category": "http_methods",
      "value": "Add",
      "context": "    key:       key,\\n    value:     value,\\n>>> expiresAt: time.Now().Add(pc.ttl),\\n    }\\n    element := pc.evictList.PushFront(item)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 160,
      "category": "http_methods",
      "value": "Stop",
      "context": "    func (pc *PageCache) cleanup() {\\n    ticker := time.NewTicker(constants.CacheCleanupInterval)\\n>>> defer ticker.Stop()\\n    \\n    for range ticker.C {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 182,
      "category": "log_messages",
      "value": "Cleaned expired entries",
      "context": "    \\n    if len(toRemove) > 0 {\\n>>> cacheLog.Debug(\"Cleaned expired entries\", map[string]interface{}{\\n    \"removed\": len(toRemove),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 230,
      "category": "error_messages",
      "value": "invalid rate limit format: %s",
      "context": "    var unit string\\n    if _, err := fmt.Sscanf(rateLimit, \"%d/%s\", &rate, &unit); err != nil {\\n>>> return nil, fmt.Errorf(\"invalid rate limit format: %s\", rateLimit)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 242,
      "category": "error_messages",
      "value": "unknown time unit: %s",
      "context": "    duration = time.Hour\\n    default:\\n>>> return nil, fmt.Errorf(\"unknown time unit: %s\", unit)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 245,
      "category": "log_messages",
      "value": "Creating rate limiter",
      "context": "    }\\n    \\n>>> cacheLog.Debug(\"Creating rate limiter\", map[string]interface{}{\\n    \"rate\": rate,\\n    \"unit\": duration,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 277,
      "category": "error_messages",
      "value": "rate limiter stopped",
      "context": "    return ctx.Err()\\n    case <-rl.stopCh:\\n>>> return fmt.Errorf(\"rate limiter stopped\")\\n    }\\n    }",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/cache.go",
      "line": 301,
      "category": "http_methods",
      "value": "Stop",
      "context": "    func (rl *RateLimiter) Stop() {\\n    close(rl.stopCh)\\n>>> rl.ticker.Stop()\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 56,
      "category": "log_messages",
      "value": "Parsing sitemap",
      "context": "    // Parse parse un sitemap XML\\n    func (sp *SitemapParser) Parse(content string) (*Sitemap, error) {\\n>>> sitemapLog.Debug(\"Parsing sitemap\")\\n    \\n    // Nettoyer le contenu",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 69,
      "category": "log_messages",
      "value": "Failed to parse sitemap",
      "context": "    var sitemap Sitemap\\n    if err := xml.Unmarshal([]byte(content), &sitemap); err != nil {\\n>>> sitemapLog.Error(\"Failed to parse sitemap\", map[string]interface{}{\\n    \"error\": err.Error(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 72,
      "category": "error_messages",
      "value": "failed to parse sitemap: %w",
      "context": "    \"error\": err.Error(),\\n    })\\n>>> return nil, fmt.Errorf(\"failed to parse sitemap: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 98,
      "category": "log_messages",
      "value": "Sitemap URL limit reached",
      "context": "    // Limiter le nombre d'URLs\\n    if len(validURLs) >= sp.maxURLs {\\n>>> sitemapLog.Warn(\"Sitemap URL limit reached\", map[string]interface{}{\\n    \"limit\": sp.maxURLs,\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 108,
      "category": "log_messages",
      "value": "Sitemap parsed successfully",
      "context": "    sitemap.URLs = validURLs\\n    \\n>>> sitemapLog.Info(\"Sitemap parsed successfully\", map[string]interface{}{\\n    \"urls_count\": len(sitemap.URLs),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 117,
      "category": "log_messages",
      "value": "Parsing sitemap index",
      "context": "    // parseSitemapIndex parse un sitemap index\\n    func (sp *SitemapParser) parseSitemapIndex(content string) (*Sitemap, error) {\\n>>> sitemapLog.Debug(\"Parsing sitemap index\")\\n    \\n    var index SitemapIndex",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 121,
      "category": "error_messages",
      "value": "failed to parse sitemap index: %w",
      "context": "    var index SitemapIndex\\n    if err := xml.Unmarshal([]byte(content), &index); err != nil {\\n>>> return nil, fmt.Errorf(\"failed to parse sitemap index: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 138,
      "category": "log_messages",
      "value": "Sitemap index parsed",
      "context": "    }\\n    \\n>>> sitemapLog.Info(\"Sitemap index parsed\", map[string]interface{}{\\n    \"sitemaps_count\": len(sitemap.URLs),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 177,
      "category": "error_messages",
      "value": "no lastmod specified",
      "context": "    func (u *SitemapURL) GetLastModified() (time.Time, error) {\\n    if u.Lastmod == \"\" {\\n>>> return time.Time{}, fmt.Errorf(\"no lastmod specified\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 194,
      "category": "error_messages",
      "value": "unable to parse lastmod: %s",
      "context": "    }\\n    \\n>>> return time.Time{}, fmt.Errorf(\"unable to parse lastmod: %s\", u.Lastmod)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/sitemap.go",
      "line": 221,
      "category": "http_methods",
      "value": "Add",
      "context": "    func (s *Sitemap) FilterByAge(maxAge time.Duration) []SitemapURL {\\n    filtered := []SitemapURL{}\\n>>> cutoff := time.Now().Add(-maxAge)\\n    \\n    for _, url := range s.URLs {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 112,
      "category": "log_messages",
      "value": "Creating new crawler",
      "context": "    // New crée une nouvelle instance du crawler\\n    func New(config *Config) (*Crawler, error) {\\n>>> log.Debug(\"Creating new crawler\", map[string]interface{}{\\n    \"workers\":     config.Workers,\\n    \"rate_limit\":  config.RateLimit,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 125,
      "category": "error_messages",
      "value": "failed to create rate limiter: %w",
      "context": "    rateLimiter, err := NewRateLimiter(config.RateLimit)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"failed to create rate limiter: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 138,
      "category": "log_messages",
      "value": "Crawler created successfully",
      "context": "    }\\n    \\n>>> log.Info(\"Crawler created successfully\", map[string]interface{}{\\n    \"config\": config,\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 147,
      "category": "log_messages",
      "value": "Starting site crawl",
      "context": "    // CrawlSite effectue le crawl d'un site entier\\n    func (c *Crawler) CrawlSite(ctx context.Context, startURL string) (*CrawlReport, error) {\\n>>> log.Info(\"Starting site crawl\", map[string]interface{}{\\n    \"url\":         startURL,\\n    \"max_pages\":   c.config.MaxPages,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 170,
      "category": "log_messages",
      "value": "Checking robots.txt",
      "context": "    // Vérifier robots.txt si activé\\n    if c.config.RespectRobots {\\n>>> log.Debug(\"Checking robots.txt\", map[string]interface{}{\"domain\": parsedURL.Host})\\n    robots, err := c.fetchRobotsTxt(ctx, parsedURL)\\n    if err != nil {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 173,
      "category": "log_messages",
      "value": "Failed to fetch robots.txt",
      "context": "    robots, err := c.fetchRobotsTxt(ctx, parsedURL)\\n    if err != nil {\\n>>> log.Warn(\"Failed to fetch robots.txt\", map[string]interface{}{\\n    \"error\": err.Error(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 183,
      "category": "log_messages",
      "value": "Discovering sitemaps",
      "context": "    // Découvrir les sitemaps si activé\\n    if c.config.FollowSitemaps {\\n>>> log.Debug(\"Discovering sitemaps\")\\n    sitemaps, err := c.discoverSitemaps(ctx, parsedURL)\\n    if err != nil {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 186,
      "category": "log_messages",
      "value": "Failed to discover sitemaps",
      "context": "    sitemaps, err := c.discoverSitemaps(ctx, parsedURL)\\n    if err != nil {\\n>>> log.Warn(\"Failed to discover sitemaps\", map[string]interface{}{\\n    \"error\": err.Error(),\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 196,
      "category": "http_methods",
      "value": "Add",
      "context": "    // Créer la queue de crawl\\n    queue := NewCrawlQueue(c.config.MaxPages)\\n>>> queue.Add(startURL, 0)\\n    \\n    // Ajouter les URLs des sitemaps",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 201,
      "category": "http_methods",
      "value": "Add",
      "context": "    for _, sitemap := range report.Sitemaps {\\n    for _, url := range sitemap.URLs {\\n>>> queue.Add(url.Loc, 0)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 211,
      "category": "http_methods",
      "value": "Add",
      "context": "    // Worker pool\\n    for i := 0; i < c.config.Workers; i++ {\\n>>> wg.Add(1)\\n    go c.crawlWorker(ctx, &wg, queue, results, parsedURL, report.RobotsTxt)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 225,
      "category": "http_methods",
      "value": "updateStats",
      "context": "    c.mu.Lock()\\n    report.Pages[result.URL] = result\\n>>> c.updateStats(result)\\n    c.mu.Unlock()\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 232,
      "category": "http_methods",
      "value": "Add",
      "context": "    for _, link := range result.Links {\\n    if link.Type == \"internal\" && link.Follow {\\n>>> queue.Add(link.URL, 1) // TODO: calculer la profondeur réelle\\n    }\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 243,
      "category": "log_messages",
      "value": "Site crawl completed",
      "context": "    c.stats.EndTime = report.EndTime\\n    \\n>>> log.Info(\"Site crawl completed\", map[string]interface{}{\\n    \"duration\":     report.Duration,\\n    \"pages_crawled\": len(report.Pages),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 273,
      "category": "error_messages",
      "value": "rate limiter error: %w",
      "context": "    // Rate limiting\\n    if err := c.rateLimiter.Wait(ctx); err != nil {\\n>>> return nil, fmt.Errorf(\"rate limiter error: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 279,
      "category": "log_messages",
      "value": "Failed to fetch page",
      "context": "    result, err := c.fetcher.Fetch(ctx, pageURL)\\n    if err != nil {\\n>>> log.Error(\"Failed to fetch page\", map[string]interface{}{\\n    \"url\":   pageURL,\\n    \"error\": err.Error(),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 287,
      "category": "content_types",
      "value": "text/html",
      "context": "    \\n    // Parser le contenu HTML\\n>>> if result.ContentType == \"text/html\" {\\n    c.parseHTML(result)\\n    }",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 293,
      "category": "http_methods",
      "value": "Set",
      "context": "    // Mettre en cache si activé\\n    if c.config.EnableCache && result.Error == nil {\\n>>> c.cache.Set(pageURL, result)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 316,
      "category": "log_messages",
      "value": "Blocked by robots.txt",
      "context": "    if c.config.RespectRobots && robots != nil {\\n    if !robots.IsAllowed(c.config.UserAgent, item.URL) {\\n>>> log.Debug(\"Blocked by robots.txt\", map[string]interface{}{\"url\": item.URL})\\n    c.stats.mu.Lock()\\n    c.stats.RobotsBlocked++",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 322,
      "category": "error_messages",
      "value": "blocked by robots.txt",
      "context": "    results <- &CrawlResult{\\n    URL:   item.URL,\\n>>> Error: fmt.Errorf(\"blocked by robots.txt\"),\\n    }\\n    continue",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 354,
      "category": "log_messages",
      "value": "%s://%s/robots.txt",
      "context": "    // fetchRobotsTxt récupère et parse le fichier robots.txt\\n    func (c *Crawler) fetchRobotsTxt(ctx context.Context, baseURL *url.URL) (*RobotsTxt, error) {\\n>>> robotsURL := fmt.Sprintf(\"%s://%s/robots.txt\", baseURL.Scheme, baseURL.Host)\\n    \\n    // Vérifier le cache",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 374,
      "category": "http_methods",
      "value": "Set",
      "context": "    \\n    // Mettre en cache\\n>>> c.robotsCache.Set(baseURL.Host, robots)\\n    \\n    return robots, nil",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/crawler.go",
      "line": 384,
      "category": "log_messages",
      "value": "%s://%s/sitemap.xml",
      "context": "    \\n    // Vérifier sitemap.xml standard\\n>>> sitemapURL := fmt.Sprintf(\"%s://%s/sitemap.xml\", baseURL.Scheme, baseURL.Host)\\n    sitemap, err := c.fetchSitemap(ctx, sitemapURL)\\n    if err == nil {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 46,
      "category": "log_messages",
      "value": "Creating new fetcher",
      "context": "    // NewFetcher crée un nouveau fetcher HTTP optimisé\\n    func NewFetcher(config *Config) *Fetcher {\\n>>> fetcherLog.Debug(\"Creating new fetcher\", map[string]interface{}{\\n    \"timeout\":       config.Timeout,\\n    \"retry_attempts\": config.RetryAttempts,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 76,
      "category": "http_methods",
      "value": "Set",
      "context": "    }\\n    // Conserver le User-Agent lors des redirections\\n>>> req.Header.Set(\"User-Agent\", config.UserAgent)\\n    return nil\\n    },",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 106,
      "category": "log_messages",
      "value": "Fetch successful",
      "context": "    if err == nil {\\n    result.ResponseTime = time.Since(start)\\n>>> fetcherLog.Debug(\"Fetch successful\", map[string]interface{}{\\n    \"url\":          targetURL,\\n    \"status_code\":  result.StatusCode,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 120,
      "category": "log_messages",
      "value": "Client error, not retrying",
      "context": "    // Ne pas retry si c'est une erreur client (4xx)\\n    if result != nil && result.StatusCode >= 400 && result.StatusCode < 500 {\\n>>> fetcherLog.Debug(\"Client error, not retrying\", map[string]interface{}{\\n    \"url\":         targetURL,\\n    \"status_code\": result.StatusCode,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 130,
      "category": "log_messages",
      "value": "Fetch failed, retrying",
      "context": "    // Si ce n'est pas la dernière tentative, attendre avant de réessayer\\n    if attempt < f.retryStrategy.MaxAttempts {\\n>>> fetcherLog.Warn(\"Fetch failed, retrying\", map[string]interface{}{\\n    \"url\":     targetURL,\\n    \"attempt\": attempt,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 150,
      "category": "log_messages",
      "value": "All fetch attempts failed",
      "context": "    }\\n    \\n>>> fetcherLog.Error(\"All fetch attempts failed\", map[string]interface{}{\\n    \"url\":      targetURL,\\n    \"attempts\": f.retryStrategy.MaxAttempts,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 168,
      "category": "error_messages",
      "value": "failed to create request: %w",
      "context": "    req, err := http.NewRequestWithContext(ctx, \"GET\", targetURL, nil)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"failed to create request: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 172,
      "category": "http_methods",
      "value": "Set",
      "context": "    \\n    // Headers optimisés pour un crawler mobile-first\\n>>> req.Header.Set(\"User-Agent\", f.config.UserAgent)\\n    req.Header.Set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\\n    req.Header.Set(\"Accept-Language\", \"fr-FR,fr;q=0.9,en;q=0.8\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 173,
      "category": "content_types",
      "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
      "context": "    // Headers optimisés pour un crawler mobile-first\\n    req.Header.Set(\"User-Agent\", f.config.UserAgent)\\n>>> req.Header.Set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\\n    req.Header.Set(\"Accept-Language\", \"fr-FR,fr;q=0.9,en;q=0.8\")\\n    req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 173,
      "category": "http_methods",
      "value": "Set",
      "context": "    // Headers optimisés pour un crawler mobile-first\\n    req.Header.Set(\"User-Agent\", f.config.UserAgent)\\n>>> req.Header.Set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\\n    req.Header.Set(\"Accept-Language\", \"fr-FR,fr;q=0.9,en;q=0.8\")\\n    req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 174,
      "category": "http_methods",
      "value": "Set",
      "context": "    req.Header.Set(\"User-Agent\", f.config.UserAgent)\\n    req.Header.Set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\\n>>> req.Header.Set(\"Accept-Language\", \"fr-FR,fr;q=0.9,en;q=0.8\")\\n    req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")\\n    req.Header.Set(\"DNT\", \"1\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 175,
      "category": "http_methods",
      "value": "Set",
      "context": "    req.Header.Set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\\n    req.Header.Set(\"Accept-Language\", \"fr-FR,fr;q=0.9,en;q=0.8\")\\n>>> req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")\\n    req.Header.Set(\"DNT\", \"1\")\\n    req.Header.Set(\"Connection\", \"keep-alive\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 176,
      "category": "http_methods",
      "value": "Set",
      "context": "    req.Header.Set(\"Accept-Language\", \"fr-FR,fr;q=0.9,en;q=0.8\")\\n    req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")\\n>>> req.Header.Set(\"DNT\", \"1\")\\n    req.Header.Set(\"Connection\", \"keep-alive\")\\n    req.Header.Set(\"Upgrade-Insecure-Requests\", \"1\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 177,
      "category": "http_methods",
      "value": "Set",
      "context": "    req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")\\n    req.Header.Set(\"DNT\", \"1\")\\n>>> req.Header.Set(\"Connection\", \"keep-alive\")\\n    req.Header.Set(\"Upgrade-Insecure-Requests\", \"1\")\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 178,
      "category": "http_methods",
      "value": "Set",
      "context": "    req.Header.Set(\"DNT\", \"1\")\\n    req.Header.Set(\"Connection\", \"keep-alive\")\\n>>> req.Header.Set(\"Upgrade-Insecure-Requests\", \"1\")\\n    \\n    // Effectuer la requête",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 181,
      "category": "http_methods",
      "value": "Do",
      "context": "    \\n    // Effectuer la requête\\n>>> resp, err := f.client.Do(req)\\n    if err != nil {\\n    return nil, fmt.Errorf(\"request failed: %w\", err)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 185,
      "category": "http_methods",
      "value": "Close",
      "context": "    return nil, fmt.Errorf(\"request failed: %w\", err)\\n    }\\n>>> defer resp.Body.Close()\\n    \\n    // Créer le résultat",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 216,
      "category": "error_messages",
      "value": "failed to read body: %w",
      "context": "    body, err := f.readBody(resp)\\n    if err != nil {\\n>>> return result, fmt.Errorf(\"failed to read body: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 243,
      "category": "error_messages",
      "value": "failed to create gzip reader: %w",
      "context": "    gzReader, err := gzip.NewReader(resp.Body)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"failed to create gzip reader: %w\", err)\\n    }\\n    defer gzReader.Close()",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 245,
      "category": "http_methods",
      "value": "Close",
      "context": "    return nil, fmt.Errorf(\"failed to create gzip reader: %w\", err)\\n    }\\n>>> defer gzReader.Close()\\n    reader = gzReader\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 264,
      "category": "error_messages",
      "value": "failed to create request: %w",
      "context": "    req, err := http.NewRequestWithContext(ctx, method, targetURL, body)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"failed to create request: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 267,
      "category": "http_methods",
      "value": "Set",
      "context": "    }\\n    \\n>>> req.Header.Set(\"User-Agent\", f.config.UserAgent)\\n    \\n    resp, err := f.client.Do(req)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 269,
      "category": "http_methods",
      "value": "Do",
      "context": "    req.Header.Set(\"User-Agent\", f.config.UserAgent)\\n    \\n>>> resp, err := f.client.Do(req)\\n    if err != nil {\\n    return nil, err",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 273,
      "category": "http_methods",
      "value": "Close",
      "context": "    return nil, err\\n    }\\n>>> defer resp.Body.Close()\\n    \\n    result := &CrawlResult{",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 295,
      "category": "content_types",
      "value": "text/html",
      "context": "    func IsHTML(contentType string) bool {\\n    contentType = strings.ToLower(contentType)\\n>>> return strings.Contains(contentType, \"text/html\") ||\\n    strings.Contains(contentType, \"application/xhtml+xml\")\\n    }",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 296,
      "category": "content_types",
      "value": "application/xhtml+xml",
      "context": "    contentType = strings.ToLower(contentType)\\n    return strings.Contains(contentType, \"text/html\") ||\\n>>> strings.Contains(contentType, \"application/xhtml+xml\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 302,
      "category": "content_types",
      "value": "text/xml",
      "context": "    func IsXML(contentType string) bool {\\n    contentType = strings.ToLower(contentType)\\n>>> return strings.Contains(contentType, \"text/xml\") ||\\n    strings.Contains(contentType, \"application/xml\")\\n    }",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/crawler/fetcher.go",
      "line": 303,
      "category": "content_types",
      "value": "application/xml",
      "context": "    contentType = strings.ToLower(contentType)\\n    return strings.Contains(contentType, \"text/xml\") ||\\n>>> strings.Contains(contentType, \"application/xml\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 50,
      "category": "log_messages",
      "value": "Creating robots cache",
      "context": "    // NewRobotsCache crée un nouveau cache pour robots.txt\\n    func NewRobotsCache(ttl time.Duration) *RobotsCache {\\n>>> robotsLog.Debug(\"Creating robots cache\", map[string]interface{}{\\n    \"ttl\": ttl,\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 79,
      "category": "log_messages",
      "value": "Robots cache hit",
      "context": "    }\\n    \\n>>> robotsLog.Debug(\"Robots cache hit\", map[string]interface{}{\"domain\": domain})\\n    return entry.Robots, true\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 90,
      "category": "http_methods",
      "value": "Add",
      "context": "    rc.cache[domain] = &CacheEntry{\\n    Robots:    robots,\\n>>> ExpiresAt: time.Now().Add(rc.ttl),\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 95,
      "category": "http_methods",
      "value": "Add",
      "context": "    robotsLog.Debug(\"Robots cached\", map[string]interface{}{\\n    \"domain\":     domain,\\n>>> \"expires_at\": time.Now().Add(rc.ttl),\\n    })\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 102,
      "category": "http_methods",
      "value": "Stop",
      "context": "    func (rc *RobotsCache) cleanup() {\\n    ticker := time.NewTicker(constants.RobotsCleanupInterval)\\n>>> defer ticker.Stop()\\n    \\n    for range ticker.C {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 110,
      "category": "log_messages",
      "value": "Removed expired robots from cache",
      "context": "    if now.After(entry.ExpiresAt) {\\n    delete(rc.cache, domain)\\n>>> robotsLog.Debug(\"Removed expired robots from cache\", map[string]interface{}{\\n    \"domain\": domain,\\n    })",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 121,
      "category": "log_messages",
      "value": "Parsing robots.txt",
      "context": "    // ParseRobotsTxt parse le contenu d'un fichier robots.txt\\n    func ParseRobotsTxt(content string) (*RobotsTxt, error) {\\n>>> robotsLog.Debug(\"Parsing robots.txt\")\\n    \\n    robots := &RobotsTxt{",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 215,
      "category": "error_messages",
      "value": "error scanning robots.txt: %w",
      "context": "    \\n    if err := scanner.Err(); err != nil {\\n>>> return nil, fmt.Errorf(\"error scanning robots.txt: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 218,
      "category": "log_messages",
      "value": "Robots.txt parsed",
      "context": "    }\\n    \\n>>> robotsLog.Debug(\"Robots.txt parsed\", map[string]interface{}{\\n    \"user_agents\": len(robots.Rules),\\n    \"sitemaps\":    len(robots.Sitemaps),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 234,
      "category": "log_messages",
      "value": "Failed to parse URL",
      "context": "    u, err := url.Parse(targetURL)\\n    if err != nil {\\n>>> robotsLog.Error(\"Failed to parse URL\", map[string]interface{}{\\n    \"url\":   targetURL,\\n    \"error\": err.Error(),",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 258,
      "category": "log_messages",
      "value": "URL allowed by robots.txt",
      "context": "    for _, allowed := range rules.Allowed {\\n    if matchesPath(path, allowed) {\\n>>> robotsLog.Debug(\"URL allowed by robots.txt\", map[string]interface{}{\\n    \"url\":        targetURL,\\n    \"user_agent\": userAgent,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 270,
      "category": "log_messages",
      "value": "URL disallowed by robots.txt",
      "context": "    for _, disallowed := range rules.Disallowed {\\n    if matchesPath(path, disallowed) {\\n>>> robotsLog.Debug(\"URL disallowed by robots.txt\", map[string]interface{}{\\n    \"url\":        targetURL,\\n    \"user_agent\": userAgent,",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/crawler/robots.go",
      "line": 397,
      "category": "error_messages",
      "value": "invalid crawl-delay: %s",
      "context": "    }\\n    \\n>>> return 0, fmt.Errorf(\"invalid crawl-delay: %s\", value)\\n    }",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/content_extractor.go",
      "line": 100,
      "category": "log_messages",
      "value": "Début extraction contenu HTML - Size:%d",
      "context": "    // Extract extrait le contenu d'une page HTML\\n    func (ce *ContentExtractor) Extract(htmlContent string) (*ExtractedContent, error) {\\n>>> log.Printf(\"Début extraction contenu HTML - Size:%d\", len(htmlContent))\\n    \\n    // Parser le HTML",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/content_extractor.go",
      "line": 100,
      "category": "log_messages",
      "value": "Début extraction contenu HTML - Size:%d",
      "context": "    // Extract extrait le contenu d'une page HTML\\n    func (ce *ContentExtractor) Extract(htmlContent string) (*ExtractedContent, error) {\\n>>> log.Printf(\"Début extraction contenu HTML - Size:%d\", len(htmlContent))\\n    \\n    // Parser le HTML",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/content_extractor.go",
      "line": 105,
      "category": "error_messages",
      "value": "erreur parsing HTML: %w",
      "context": "    doc, err := html.Parse(strings.NewReader(htmlContent))\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur parsing HTML: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/content_extractor.go",
      "line": 131,
      "category": "log_messages",
      "value": "Extraction terminée - Words:%d Headings:%d Links:%d Images:%d",
      "context": "    ce.cleanAndFinalize(content)\\n    \\n>>> log.Printf(\"Extraction terminée - Words:%d Headings:%d Links:%d Images:%d\",\\n    content.WordCount, len(content.Headings), len(content.Links), len(content.Images))\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/content_extractor.go",
      "line": 131,
      "category": "log_messages",
      "value": "Extraction terminée - Words:%d Headings:%d Links:%d Images:%d",
      "context": "    ce.cleanAndFinalize(content)\\n    \\n>>> log.Printf(\"Extraction terminée - Words:%d Headings:%d Links:%d Images:%d\",\\n    content.WordCount, len(content.Headings), len(content.Links), len(content.Images))\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/ngram_analyzer.go",
      "line": 64,
      "category": "log_messages",
      "value": "Début analyse n-grammes - TextLength:%d MaxNGram:%d",
      "context": "    // Analyze effectue l'analyse complète des n-grammes\\n    func (nga *NGramAnalyzer) Analyze(text string) map[int][]NGram {\\n>>> log.Printf(\"Début analyse n-grammes - TextLength:%d MaxNGram:%d\", len(text), nga.maxNGramLength)\\n    \\n    // Prétraitement du texte",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/ngram_analyzer.go",
      "line": 64,
      "category": "log_messages",
      "value": "Début analyse n-grammes - TextLength:%d MaxNGram:%d",
      "context": "    // Analyze effectue l'analyse complète des n-grammes\\n    func (nga *NGramAnalyzer) Analyze(text string) map[int][]NGram {\\n>>> log.Printf(\"Début analyse n-grammes - TextLength:%d MaxNGram:%d\", len(text), nga.maxNGramLength)\\n    \\n    // Prétraitement du texte",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/ngram_analyzer.go",
      "line": 70,
      "category": "log_messages",
      "value": "Tokenisation terminée - TokensCount:%d UniqueTokens:%d",
      "context": "    tokens := nga.tokenize(cleanText)\\n    \\n>>> log.Printf(\"Tokenisation terminée - TokensCount:%d UniqueTokens:%d\", len(tokens), nga.countUniqueTokens(tokens))\\n    \\n    // Génération des n-grammes",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/ngram_analyzer.go",
      "line": 70,
      "category": "log_messages",
      "value": "Tokenisation terminée - TokensCount:%d UniqueTokens:%d",
      "context": "    tokens := nga.tokenize(cleanText)\\n    \\n>>> log.Printf(\"Tokenisation terminée - TokensCount:%d UniqueTokens:%d\", len(tokens), nga.countUniqueTokens(tokens))\\n    \\n    // Génération des n-grammes",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/ngram_analyzer.go",
      "line": 80,
      "category": "log_messages",
      "value": "N-grammes générés - N:%d Count:%d",
      "context": "    results[n] = nga.filterAndSortNGrams(scoredNGrams)\\n    \\n>>> log.Printf(\"N-grammes générés - N:%d Count:%d\", n, len(results[n]))\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/ngram_analyzer.go",
      "line": 80,
      "category": "log_messages",
      "value": "N-grammes générés - N:%d Count:%d",
      "context": "    results[n] = nga.filterAndSortNGrams(scoredNGrams)\\n    \\n>>> log.Printf(\"N-grammes générés - N:%d Count:%d\", n, len(results[n]))\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/ngram_analyzer.go",
      "line": 250,
      "category": "http_methods",
      "value": "Log",
      "context": "    if freq > 0 {\\n    // Score inversement proportionnel à la fréquence\\n>>> totalScore += 1.0 / math.Log(float64(freq)+1)\\n    }\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 39,
      "category": "log_messages",
      "value": "🧠 Starting semantic analysis for URL: %s",
      "context": "    startTime := time.Now()\\n    \\n>>> log.Printf(\"🧠 Starting semantic analysis for URL: %s\", url)\\n    \\n    // 1. Extraction du contenu",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 39,
      "category": "log_messages",
      "value": "🧠 Starting semantic analysis for URL: %s",
      "context": "    startTime := time.Now()\\n    \\n>>> log.Printf(\"🧠 Starting semantic analysis for URL: %s\", url)\\n    \\n    // 1. Extraction du contenu",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 44,
      "category": "error_messages",
      "value": "erreur extraction contenu: %w",
      "context": "    content, err := sa.contentExtractor.Extract(htmlContent)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur extraction contenu: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 59,
      "category": "log_messages",
      "value": "⚠️ AI enrichment failed: %v",
      "context": "    enrichmentResult, err := sa.aiEnricher.EnrichKeywords(ctx, keywords, content.CleanText)\\n    if err != nil {\\n>>> log.Printf(\"⚠️ AI enrichment failed: %v\", err)\\n    useAI = false\\n    } else {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 59,
      "category": "log_messages",
      "value": "⚠️ AI enrichment failed: %v",
      "context": "    enrichmentResult, err := sa.aiEnricher.EnrichKeywords(ctx, keywords, content.CleanText)\\n    if err != nil {\\n>>> log.Printf(\"⚠️ AI enrichment failed: %v\", err)\\n    useAI = false\\n    } else {",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 86,
      "category": "log_messages",
      "value": "✅ Semantic analysis completed - Score: %.1f (AI: %v)",
      "context": "    result.SEOScore = sa.seoScorer.Score(content, localAnalysis, aiEnrichment)\\n    \\n>>> log.Printf(\"✅ Semantic analysis completed - Score: %.1f (AI: %v)\", result.SEOScore.Overall, useAI)\\n    \\n    return result, nil",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 86,
      "category": "log_messages",
      "value": "✅ Semantic analysis completed - Score: %.1f (AI: %v)",
      "context": "    result.SEOScore = sa.seoScorer.Score(content, localAnalysis, aiEnrichment)\\n    \\n>>> log.Printf(\"✅ Semantic analysis completed - Score: %.1f (AI: %v)\", result.SEOScore.Overall, useAI)\\n    \\n    return result, nil",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 384,
      "category": "json_fields",
      "value": "analyzer_type",
      "context": "    func (sa *SemanticAnalyzer) GetStats() map[string]interface{} {\\n    stats := map[string]interface{}{\\n>>> \"analyzer_type\": \"semantic\",\\n    \"ai_enabled\":    sa.aiEnabled,\\n    \"ai_model\":      sa.aiModel,",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 391,
      "category": "http_methods",
      "value": "GetCacheStats",
      "context": "    // Ajouter les stats du cache IA\\n    if sa.aiEnricher != nil {\\n>>> aiStats := sa.aiEnricher.GetCacheStats()\\n    stats[\"ai_cache\"] = aiStats\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/semantic/analyzer.go",
      "line": 420,
      "category": "log_messages",
      "value": "Competitiveness Score: %d/100",
      "context": "    ContentGaps:     enrichment.ContentQuestions,\\n    Recommendations: recommendations,\\n>>> CompetitiveEdge: []string{fmt.Sprintf(\"Competitiveness Score: %d/100\", enrichment.CompetitivenessScore)},\\n    ProcessingCost:  0.001, // Estimation ~1/1000 dollar par requête\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 118,
      "category": "error_messages",
      "value": "OpenAI enrichment failed, using mock: %w",
      "context": "    if err != nil {\\n    // En cas d'erreur, retourner un mock\\n>>> return ai.mockEnrichment(keywords), fmt.Errorf(\"OpenAI enrichment failed, using mock: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 131,
      "category": "error_messages",
      "value": "OpenAI API key not configured",
      "context": "    func (ai *AIEnricher) callOpenAI(ctx context.Context, keywords []string, content string) (*EnrichmentResult, error) {\\n    if ai.apiKey == \"\" {\\n>>> return nil, fmt.Errorf(\"OpenAI API key not configured\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 154,
      "category": "error_messages",
      "value": "error marshaling request: %w",
      "context": "    jsonData, err := json.Marshal(request)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"error marshaling request: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 159,
      "category": "error_messages",
      "value": "error creating request: %w",
      "context": "    req, err := http.NewRequestWithContext(ctx, \"POST\", constants.OpenAIAPIURL, bytes.NewBuffer(jsonData))\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"error creating request: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 162,
      "category": "content_types",
      "value": "application/json",
      "context": "    }\\n    \\n>>> req.Header.Set(\"Content-Type\", \"application/json\")\\n    req.Header.Set(\"Authorization\", \"Bearer \"+ai.apiKey)\\n    ",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 162,
      "category": "http_methods",
      "value": "Set",
      "context": "    }\\n    \\n>>> req.Header.Set(\"Content-Type\", \"application/json\")\\n    req.Header.Set(\"Authorization\", \"Bearer \"+ai.apiKey)\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 163,
      "category": "http_methods",
      "value": "Set",
      "context": "    \\n    req.Header.Set(\"Content-Type\", \"application/json\")\\n>>> req.Header.Set(\"Authorization\", \"Bearer \"+ai.apiKey)\\n    \\n    resp, err := ai.httpClient.Do(req)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 165,
      "category": "http_methods",
      "value": "Do",
      "context": "    req.Header.Set(\"Authorization\", \"Bearer \"+ai.apiKey)\\n    \\n>>> resp, err := ai.httpClient.Do(req)\\n    if err != nil {\\n    return nil, fmt.Errorf(\"error making request: %w\", err)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 167,
      "category": "error_messages",
      "value": "error making request: %w",
      "context": "    resp, err := ai.httpClient.Do(req)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"error making request: %w\", err)\\n    }\\n    defer resp.Body.Close()",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 169,
      "category": "http_methods",
      "value": "Close",
      "context": "    return nil, fmt.Errorf(\"error making request: %w\", err)\\n    }\\n>>> defer resp.Body.Close()\\n    \\n    if resp.StatusCode != http.StatusOK {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 172,
      "category": "error_messages",
      "value": "OpenAI API returned status %d",
      "context": "    \\n    if resp.StatusCode != http.StatusOK {\\n>>> return nil, fmt.Errorf(\"OpenAI API returned status %d\", resp.StatusCode)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 176,
      "category": "http_methods",
      "value": "Decode",
      "context": "    \\n    var openAIResp OpenAIResponse\\n>>> if err := json.NewDecoder(resp.Body).Decode(&openAIResp); err != nil {\\n    return nil, fmt.Errorf(\"error decoding response: %w\", err)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 177,
      "category": "error_messages",
      "value": "error decoding response: %w",
      "context": "    var openAIResp OpenAIResponse\\n    if err := json.NewDecoder(resp.Body).Decode(&openAIResp); err != nil {\\n>>> return nil, fmt.Errorf(\"error decoding response: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 181,
      "category": "error_messages",
      "value": "no response from OpenAI",
      "context": "    \\n    if len(openAIResp.Choices) == 0 {\\n>>> return nil, fmt.Errorf(\"no response from OpenAI\")\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 187,
      "category": "error_messages",
      "value": "error parsing OpenAI response: %w",
      "context": "    var result EnrichmentResult\\n    if err := json.Unmarshal([]byte(openAIResp.Choices[0].Message.Content), &result); err != nil {\\n>>> return nil, fmt.Errorf(\"error parsing OpenAI response: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 211,
      "category": "json_fields",
      "value": "text",
      "context": "    \"keywords\": [\\n    {\\n>>> \"text\": \"mot-clé\",\\n    \"intent\": \"informational|navigational|transactional|commercial\",\\n    \"difficulty\": 1-100,",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 212,
      "category": "json_fields",
      "value": "intent",
      "context": "    {\\n    \"text\": \"mot-clé\",\\n>>> \"intent\": \"informational|navigational|transactional|commercial\",\\n    \"difficulty\": 1-100,\\n    \"search_volume\": \"low|medium|high|very_high\",",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 214,
      "category": "json_fields",
      "value": "search_volume",
      "context": "    \"intent\": \"informational|navigational|transactional|commercial\",\\n    \"difficulty\": 1-100,\\n>>> \"search_volume\": \"low|medium|high|very_high\",\\n    \"related_keywords\": [\"mot1\", \"mot2\", \"mot3\"],\\n    \"content_suggestions\": [\"suggestion1\", \"suggestion2\"]",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/semantic/ai_enricher.go",
      "line": 227,
      "category": "json_fields",
      "value": "search_intent",
      "context": "    \"Action d'optimisation\"\\n    ],\\n>>> \"search_intent\": \"intent principal du contenu\",\\n    \"competitiveness_score\": 1-100\\n    }",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 18,
      "category": "http_headers",
      "value": "Content-Type",
      "context": "    // sendJSONError - Helper pour envoyer des erreurs JSON\\n    func sendJSONError(w http.ResponseWriter, message string, statusCode int) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    errorJSON := fmt.Sprintf(`{\"error\":\"%s\"}`, message)\\n    http.Error(w, errorJSON, statusCode)",
      "severity": "Medium",
      "description": "Headers HTTP hardcodés"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 18,
      "category": "content_types",
      "value": "application/json",
      "context": "    // sendJSONError - Helper pour envoyer des erreurs JSON\\n    func sendJSONError(w http.ResponseWriter, message string, statusCode int) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    errorJSON := fmt.Sprintf(`{\"error\":\"%s\"}`, message)\\n    http.Error(w, errorJSON, statusCode)",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 18,
      "category": "http_methods",
      "value": "Set",
      "context": "    // sendJSONError - Helper pour envoyer des erreurs JSON\\n    func sendJSONError(w http.ResponseWriter, message string, statusCode int) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    errorJSON := fmt.Sprintf(`{\"error\":\"%s\"}`, message)\\n    http.Error(w, errorJSON, statusCode)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 25,
      "category": "http_headers",
      "value": "Content-Type",
      "context": "    // AnalyzeHandler - POST /api/analyze\\n    func AnalyzeHandler(w http.ResponseWriter, r *http.Request) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    \\n    if r.Method != http.MethodPost {",
      "severity": "Medium",
      "description": "Headers HTTP hardcodés"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 25,
      "category": "content_types",
      "value": "application/json",
      "context": "    // AnalyzeHandler - POST /api/analyze\\n    func AnalyzeHandler(w http.ResponseWriter, r *http.Request) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    \\n    if r.Method != http.MethodPost {",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 25,
      "category": "http_methods",
      "value": "Set",
      "context": "    // AnalyzeHandler - POST /api/analyze\\n    func AnalyzeHandler(w http.ResponseWriter, r *http.Request) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    \\n    if r.Method != http.MethodPost {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 34,
      "category": "http_methods",
      "value": "Decode",
      "context": "    // Parser la requête JSON\\n    var req AnalyzeRequest\\n>>> if err := json.NewDecoder(r.Body).Decode(&req); err != nil {\\n    sendJSONError(w, messages.ErrInvalidJSON, http.StatusBadRequest)\\n    return",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 68,
      "category": "http_methods",
      "value": "Set",
      "context": "    \\n    // Stocker l'analyse\\n>>> Store.Set(analysisID, analysis)\\n    \\n    // Démarrer la simulation en arrière-plan",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 84,
      "category": "http_headers",
      "value": "Content-Type",
      "context": "    // StatusHandler - GET /api/status/{id}\\n    func StatusHandler(w http.ResponseWriter, r *http.Request) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    \\n    if r.Method != http.MethodGet {",
      "severity": "Medium",
      "description": "Headers HTTP hardcodés"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 84,
      "category": "content_types",
      "value": "application/json",
      "context": "    // StatusHandler - GET /api/status/{id}\\n    func StatusHandler(w http.ResponseWriter, r *http.Request) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    \\n    if r.Method != http.MethodGet {",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 84,
      "category": "http_methods",
      "value": "Set",
      "context": "    // StatusHandler - GET /api/status/{id}\\n    func StatusHandler(w http.ResponseWriter, r *http.Request) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    \\n    if r.Method != http.MethodGet {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 122,
      "category": "http_headers",
      "value": "Content-Type",
      "context": "    // ResultsHandler - GET /api/results/{id}\\n    func ResultsHandler(w http.ResponseWriter, r *http.Request) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    \\n    if r.Method != http.MethodGet {",
      "severity": "Medium",
      "description": "Headers HTTP hardcodés"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 122,
      "category": "content_types",
      "value": "application/json",
      "context": "    // ResultsHandler - GET /api/results/{id}\\n    func ResultsHandler(w http.ResponseWriter, r *http.Request) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    \\n    if r.Method != http.MethodGet {",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 122,
      "category": "http_methods",
      "value": "Set",
      "context": "    // ResultsHandler - GET /api/results/{id}\\n    func ResultsHandler(w http.ResponseWriter, r *http.Request) {\\n>>> w.Header().Set(\"Content-Type\", \"application/json\")\\n    \\n    if r.Method != http.MethodGet {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 238,
      "category": "http_methods",
      "value": "Set",
      "context": "    StartTime:      time.Now(),\\n    }\\n>>> Store.Set(id, analysis)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/handlers.go",
      "line": 243,
      "category": "http_methods",
      "value": "Update",
      "context": "    // CompleteTestAnalysis - Marquer une analyse comme terminée\\n    func CompleteTestAnalysis(id string) {\\n>>> Store.Update(id, func(analysis *AnalysisState) {\\n    analysis.Status = \"complete\"\\n    analysis.Progress = 100",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/simulator.go",
      "line": 21,
      "category": "http_methods",
      "value": "Update",
      "context": "    // Phase 1: Découverte des pages\\n    simulatePhase(analysisID, messages.PhaseDiscoveryMsg, constants.DefaultProgressStart, 30, constants.DefaultSimulationSpeed, func(progress int) {\\n>>> Store.Update(analysisID, func(a *AnalysisState) {\\n    a.Progress = progress\\n    a.Status = constants.StatusProcessing",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/simulator.go",
      "line": 31,
      "category": "http_methods",
      "value": "Update",
      "context": "    // Phase 2: Analyse SEO\\n    simulatePhase(analysisID, messages.PhaseSEOAnalysisMsg, constants.PhaseSEOStart, constants.PhaseSEOEnd, constants.PhaseSEOSpeed, func(progress int) {\\n>>> Store.Update(analysisID, func(a *AnalysisState) {\\n    a.Progress = progress\\n    a.PagesAnalyzed = int(float64(a.PagesFound) * float64(progress-constants.PhaseSEOStart) / constants.AnalysisProgressRatio) // Ratio d'analyse",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/simulator.go",
      "line": 41,
      "category": "http_methods",
      "value": "Update",
      "context": "    // Phase 3: Analyse IA\\n    simulatePhase(analysisID, messages.PhaseAIAnalysisMsg, constants.PhaseAIStart, constants.PhaseAIEnd, constants.PhaseAISpeed, func(progress int) {\\n>>> Store.Update(analysisID, func(a *AnalysisState) {\\n    a.Progress = progress\\n    a.EstimatedTime = calculateRemainingTime(progress)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/simulator.go",
      "line": 49,
      "category": "http_methods",
      "value": "Update",
      "context": "    // Phase 4: Génération rapport\\n    simulatePhase(analysisID, messages.PhaseReportGenMsg, constants.PhaseReportStart, constants.PhaseReportEnd, constants.PhaseReportSpeed, func(progress int) {\\n>>> Store.Update(analysisID, func(a *AnalysisState) {\\n    a.Progress = progress\\n    if progress == constants.DefaultProgressEnd {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/api/simulator.go",
      "line": 74,
      "category": "http_methods",
      "value": "Sleep",
      "context": "    // Variation aléatoire du timing pour rendre plus réaliste\\n    sleepTime := interval + time.Duration(rand.Intn(int(constants.TimingVariation/time.Millisecond)))*time.Millisecond\\n>>> time.Sleep(sleepTime)\\n    \\n    // Vérifier que l'analyse existe toujours",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/technical_auditor.go",
      "line": 109,
      "category": "error_messages",
      "value": "stopped after 5 redirects",
      "context": "    CheckRedirect: func(req *http.Request, via []*http.Request) error {\\n    if len(via) >= 5 {\\n>>> return fmt.Errorf(\"stopped after 5 redirects\")\\n    }\\n    return nil",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/seo/technical_auditor.go",
      "line": 235,
      "category": "log_messages",
      "value": "%s://%s/sitemap.xml",
      "context": "    \\n    // Vérifier sitemap.xml\\n>>> sitemapURL := fmt.Sprintf(\"%s://%s/sitemap.xml\", parsedURL.Scheme, parsedURL.Host)\\n    if ta.urlExists(ctx, sitemapURL) {\\n    audit.HasSitemap = true",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/technical_auditor.go",
      "line": 242,
      "category": "log_messages",
      "value": "%s://%s/robots.txt",
      "context": "    \\n    // Vérifier robots.txt\\n>>> robotsURL := fmt.Sprintf(\"%s://%s/robots.txt\", parsedURL.Scheme, parsedURL.Host)\\n    if content := ta.fetchTextContent(ctx, robotsURL); content != \"\" {\\n    audit.HasRobotsTxt = true",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/technical_auditor.go",
      "line": 438,
      "category": "http_methods",
      "value": "Do",
      "context": "    \\n    client := &http.Client{Timeout: constants.FastRequestTimeout}\\n>>> _, err = client.Do(req)\\n    return err == nil\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/technical_auditor.go",
      "line": 447,
      "category": "http_methods",
      "value": "Do",
      "context": "    return nil, err\\n    }\\n>>> return ta.client.Do(req)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/technical_auditor.go",
      "line": 456,
      "category": "http_methods",
      "value": "Do",
      "context": "    }\\n    \\n>>> resp, err := ta.client.Do(req)\\n    if err != nil {\\n    return false",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/technical_auditor.go",
      "line": 460,
      "category": "http_methods",
      "value": "Close",
      "context": "    return false\\n    }\\n>>> defer resp.Body.Close()\\n    \\n    return resp.StatusCode < 400",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/technical_auditor.go",
      "line": 471,
      "category": "http_methods",
      "value": "Do",
      "context": "    }\\n    \\n>>> resp, err := ta.client.Do(req)\\n    if err != nil {\\n    return \"\"",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/technical_auditor.go",
      "line": 475,
      "category": "http_methods",
      "value": "Close",
      "context": "    return \"\"\\n    }\\n>>> defer resp.Body.Close()\\n    \\n    if resp.StatusCode != 200 {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 177,
      "category": "http_methods",
      "value": "Set",
      "context": "    \\n    // Headers pour optimiser la requête\\n>>> req.Header.Set(\"User-Agent\", \"Fire Salamander Performance Bot/1.0\")\\n    req.Header.Set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\\n    req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 178,
      "category": "content_types",
      "value": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
      "context": "    // Headers pour optimiser la requête\\n    req.Header.Set(\"User-Agent\", \"Fire Salamander Performance Bot/1.0\")\\n>>> req.Header.Set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\\n    req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")\\n    ",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 178,
      "category": "http_methods",
      "value": "Set",
      "context": "    // Headers pour optimiser la requête\\n    req.Header.Set(\"User-Agent\", \"Fire Salamander Performance Bot/1.0\")\\n>>> req.Header.Set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\\n    req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 179,
      "category": "http_methods",
      "value": "Set",
      "context": "    req.Header.Set(\"User-Agent\", \"Fire Salamander Performance Bot/1.0\")\\n    req.Header.Set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\")\\n>>> req.Header.Set(\"Accept-Encoding\", \"gzip, deflate, br\")\\n    \\n    start := time.Now()",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 182,
      "category": "http_methods",
      "value": "Do",
      "context": "    \\n    start := time.Now()\\n>>> resp, err := pa.client.Do(req)\\n    if err != nil {\\n    return err",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 186,
      "category": "http_methods",
      "value": "Close",
      "context": "    return err\\n    }\\n>>> defer resp.Body.Close()\\n    \\n    result.LoadTime = time.Since(start)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 268,
      "category": "file_extensions",
      "value": ".woff",
      "context": "    result.ResourceCounts.Scripts = strings.Count(htmlContent, \"<script\")\\n    result.ResourceCounts.Stylesheets = strings.Count(htmlContent, `<link rel=\"stylesheet\"`)\\n>>> result.ResourceCounts.Fonts = strings.Count(htmlContent, \".woff\") + strings.Count(htmlContent, \".ttf\")\\n    \\n    // Vérifier l'optimisation des images",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 268,
      "category": "file_extensions",
      "value": ".ttf",
      "context": "    result.ResourceCounts.Scripts = strings.Count(htmlContent, \"<script\")\\n    result.ResourceCounts.Stylesheets = strings.Count(htmlContent, `<link rel=\"stylesheet\"`)\\n>>> result.ResourceCounts.Fonts = strings.Count(htmlContent, \".woff\") + strings.Count(htmlContent, \".ttf\")\\n    \\n    // Vérifier l'optimisation des images",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 271,
      "category": "file_extensions",
      "value": ".webp",
      "context": "    \\n    // Vérifier l'optimisation des images\\n>>> webpCount := strings.Count(strings.ToLower(htmlContent), \".webp\")\\n    avifCount := strings.Count(strings.ToLower(htmlContent), \".avif\")\\n    ",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "internal/seo/performance_analyzer.go",
      "line": 272,
      "category": "file_extensions",
      "value": ".avif",
      "context": "    // Vérifier l'optimisation des images\\n    webpCount := strings.Count(strings.ToLower(htmlContent), \".webp\")\\n>>> avifCount := strings.Count(strings.ToLower(htmlContent), \".avif\")\\n    \\n    if result.ResourceCounts.Images > 0 {",
      "severity": "Low",
      "description": "Extensions de fichiers hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 63,
      "category": "error_messages",
      "value": "stopped after %d redirects",
      "context": "    CheckRedirect: func(req *http.Request, via []*http.Request) error {\\n    if len(via) >= constants.MaxRedirects {\\n>>> return fmt.Errorf(\"stopped after %d redirects\", constants.MaxRedirects)\\n    }\\n    return nil",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 89,
      "category": "log_messages",
      "value": "Début analyse SEO pour: %s",
      "context": "    startTime := time.Now()\\n    \\n>>> log.Printf(\"Début analyse SEO pour: %s\", targetURL)\\n    \\n    // Validation de l'URL",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 89,
      "category": "log_messages",
      "value": "Début analyse SEO pour: %s",
      "context": "    startTime := time.Now()\\n    \\n>>> log.Printf(\"Début analyse SEO pour: %s\", targetURL)\\n    \\n    // Validation de l'URL",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 107,
      "category": "error_messages",
      "value": "erreur analyse HTTP: %w",
      "context": "    // 1. Récupération et analyse HTTP de base\\n    if err := seo.analyzeHTTPResponse(ctx, targetURL, result); err != nil {\\n>>> return nil, fmt.Errorf(\"erreur analyse HTTP: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 113,
      "category": "error_messages",
      "value": "erreur récupération HTML: %w",
      "context": "    htmlContent, err := seo.fetchHTML(ctx, targetURL)\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur récupération HTML: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 119,
      "category": "error_messages",
      "value": "erreur parsing HTML: %w",
      "context": "    doc, err := html.Parse(strings.NewReader(htmlContent))\\n    if err != nil {\\n>>> return nil, fmt.Errorf(\"erreur parsing HTML: %w\", err)\\n    }\\n    ",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 128,
      "category": "http_methods",
      "value": "Add",
      "context": "    \\n    // Analyse des balises SEO\\n>>> wg.Add(1)\\n    go func() {\\n    defer wg.Done()",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 134,
      "category": "error_messages",
      "value": "erreur analyse balises: %w",
      "context": "    if err != nil {\\n    mu.Lock()\\n>>> analysisErrors = append(analysisErrors, fmt.Errorf(\"erreur analyse balises: %w\", err))\\n    mu.Unlock()\\n    return",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 144,
      "category": "http_methods",
      "value": "Add",
      "context": "    \\n    // Analyse des performances\\n>>> wg.Add(1)\\n    go func() {\\n    defer wg.Done()",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 150,
      "category": "error_messages",
      "value": "erreur analyse performance: %w",
      "context": "    if err != nil {\\n    mu.Lock()\\n>>> analysisErrors = append(analysisErrors, fmt.Errorf(\"erreur analyse performance: %w\", err))\\n    mu.Unlock()\\n    return",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 160,
      "category": "http_methods",
      "value": "Add",
      "context": "    \\n    // Audit technique\\n>>> wg.Add(1)\\n    go func() {\\n    defer wg.Done()",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 166,
      "category": "error_messages",
      "value": "erreur audit technique: %w",
      "context": "    if err != nil {\\n    mu.Lock()\\n>>> analysisErrors = append(analysisErrors, fmt.Errorf(\"erreur audit technique: %w\", err))\\n    mu.Unlock()\\n    return",
      "severity": "Medium",
      "description": "Messages d'erreur hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 180,
      "category": "log_messages",
      "value": "Erreurs partielles lors de l",
      "context": "    // Vérifier les erreurs d'analyse\\n    if len(analysisErrors) > 0 {\\n>>> log.Printf(\"Erreurs partielles lors de l'analyse: %v\", analysisErrors)\\n    // Continuer avec les analyses réussies\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 180,
      "category": "log_messages",
      "value": "Erreurs partielles lors de l",
      "context": "    // Vérifier les erreurs d'analyse\\n    if len(analysisErrors) > 0 {\\n>>> log.Printf(\"Erreurs partielles lors de l'analyse: %v\", analysisErrors)\\n    // Continuer avec les analyses réussies\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 196,
      "category": "log_messages",
      "value": "Analyse SEO terminée - Score: %.1f, Durée: %v, Recommandations: %d",
      "context": "    result.AnalysisDuration = time.Since(startTime)\\n    \\n>>> log.Printf(\"Analyse SEO terminée - Score: %.1f, Durée: %v, Recommandations: %d\",\\n    result.OverallScore, result.AnalysisDuration, len(result.Recommendations))\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 196,
      "category": "log_messages",
      "value": "Analyse SEO terminée - Score: %.1f, Durée: %v, Recommandations: %d",
      "context": "    result.AnalysisDuration = time.Since(startTime)\\n    \\n>>> log.Printf(\"Analyse SEO terminée - Score: %.1f, Durée: %v, Recommandations: %d\",\\n    result.OverallScore, result.AnalysisDuration, len(result.Recommendations))\\n    ",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 208,
      "category": "http_methods",
      "value": "Set",
      "context": "    return err\\n    }\\n>>> req.Header.Set(\"User-Agent\", seo.userAgent)\\n    \\n    start := time.Now()",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 211,
      "category": "http_methods",
      "value": "Do",
      "context": "    \\n    start := time.Now()\\n>>> resp, err := seo.client.Do(req)\\n    responseTime := time.Since(start)\\n    ",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 217,
      "category": "http_methods",
      "value": "Close",
      "context": "    return err\\n    }\\n>>> defer resp.Body.Close()\\n    \\n    result.StatusCode = resp.StatusCode",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 231,
      "category": "http_methods",
      "value": "Set",
      "context": "    return \"\", err\\n    }\\n>>> req.Header.Set(\"User-Agent\", seo.userAgent)\\n    \\n    resp, err := seo.client.Do(req)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 233,
      "category": "http_methods",
      "value": "Do",
      "context": "    req.Header.Set(\"User-Agent\", seo.userAgent)\\n    \\n>>> resp, err := seo.client.Do(req)\\n    if err != nil {\\n    return \"\", err",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 237,
      "category": "http_methods",
      "value": "Close",
      "context": "    return \"\", err\\n    }\\n>>> defer resp.Body.Close()\\n    \\n    if resp.StatusCode != http.StatusOK {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/seo/analyzer.go",
      "line": 449,
      "category": "server_config",
      "value": "localhost",
      "context": "    \\n    // Domain validity (10%)\\n>>> if result.Domain != \"\" && !strings.Contains(result.Domain, \"localhost\") {\\n    score += 0.1\\n    }",
      "severity": "High",
      "description": "Configuration serveur hardcodée"
    },
    {
      "file": "internal/seo/recommendation_engine.go",
      "line": 301,
      "category": "json_fields",
      "value": "target",
      "context": "    recs = append(recs, re.createRecommendation(constants.RecommendationTemplateIDImproveAccessibility, map[string]interface{}{\\n    \"current_score\": fmt.Sprintf(\"%.1f%%\", techAudit.Accessibility.Score*100),\\n>>> \"target\":        \"≥ \" + strconv.Itoa(constants.RecommendationRuleMissingMetaDesc) + \"%\",\\n    }))\\n    }",
      "severity": "Low",
      "description": "Champs JSON hardcodés"
    },
    {
      "file": "internal/seo/recommendation_engine.go",
      "line": 406,
      "category": "log_messages",
      "value": "constants.RecommendationPlaceholderPattern",
      "context": "    result := template\\n    for key, value := range params {\\n>>> placeholder := fmt.Sprintf(\"constants.RecommendationPlaceholderPattern\", key)\\n    result = strings.ReplaceAll(result, placeholder, fmt.Sprintf(\"%v\", value))\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/tag_analyzer.go",
      "line": 433,
      "category": "log_messages",
      "value": "%d images sans texte alternatif",
      "context": "    // Recommandations\\n    if analysis.AltTextCoverage < 1.0 {\\n>>> analysis.Issues = append(analysis.Issues, fmt.Sprintf(\"%d images sans texte alternatif\", len(analysis.MissingAltImages)))\\n    analysis.Recommendations = append(analysis.Recommendations, \"Ajouter des textes alternatifs à toutes les images\")\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/seo/tag_analyzer.go",
      "line": 523,
      "category": "content_types",
      "value": "application/ld+json",
      "context": "    for _, script := range scripts {\\n    scriptType := ta.getAttr(script, \"type\")\\n>>> if scriptType == \"application/ld+json\" {\\n    analysis.HasJSONLD = true\\n    // Ici on pourrait parser le JSON pour extraire les types",
      "severity": "Medium",
      "description": "Content-Types hardcodés"
    },
    {
      "file": "internal/debug/phase_tests.go",
      "line": 183,
      "category": "http_methods",
      "value": "Stat",
      "context": "    // Check files\\n    for _, file := range requiredFiles {\\n>>> if _, err := os.Stat(file); os.IsNotExist(err) {\\n    missingFiles = append(missingFiles, file)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/phase_tests.go",
      "line": 190,
      "category": "http_methods",
      "value": "Stat",
      "context": "    // Check directories\\n    for _, dir := range requiredDirs {\\n>>> if _, err := os.Stat(dir); os.IsNotExist(err) {\\n    missingDirs = append(missingDirs, dir)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/phase_tests.go",
      "line": 232,
      "category": "http_methods",
      "value": "Stat",
      "context": "    \\n    // Check .git directory\\n>>> if _, err := os.Stat(constants.GitDirectory); os.IsNotExist(err) {\\n    issues = append(issues, constants.MsgGitDirectoryMissing)\\n    } else {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/phase_tests.go",
      "line": 239,
      "category": "http_methods",
      "value": "Stat",
      "context": "    \\n    // Check .gitignore\\n>>> if _, err := os.Stat(constants.RequiredFileGitignore); os.IsNotExist(err) {\\n    issues = append(issues, constants.MsgGitignoreMissing)\\n    } else {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/phase_tests.go",
      "line": 279,
      "category": "server_config",
      "value": "localhost:%d",
      "context": "    }\\n    \\n>>> baseURL := fmt.Sprintf(constants.HTTPPrefix+\"localhost:%d\", cfg.Server.Port)\\n    test.Details[constants.DetailBaseURL] = baseURL\\n    ",
      "severity": "High",
      "description": "Configuration serveur hardcodée"
    },
    {
      "file": "internal/debug/phase_tests.go",
      "line": 321,
      "category": "log_messages",
      "value": "Test %s is accessible",
      "context": "    test := PhaseTest{\\n    Name:        name,\\n>>> Description: fmt.Sprintf(\"Test %s is accessible\", url),\\n    Details:     make(map[string]interface{}),\\n    }",
      "severity": "Medium",
      "description": "Messages de log hardcodés"
    },
    {
      "file": "internal/debug/phase_tests.go",
      "line": 336,
      "category": "http_methods",
      "value": "Close",
      "context": "    test.Details[constants.DetailAccessible] = false\\n    } else {\\n>>> defer resp.Body.Close()\\n    \\n    test.Details[constants.DetailAccessible] = true",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/phase_tests.go",
      "line": 424,
      "category": "http_methods",
      "value": "Stat",
      "context": "    testLog.Debug(constants.LogDockerTest)\\n    \\n>>> if _, err := os.Stat(constants.RequiredFileDockerCompose); os.IsNotExist(err) {\\n    test.Status = constants.StatusFailed\\n    test.Message = constants.MsgDockerComposeFileMissing",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/phase_tests.go",
      "line": 479,
      "category": "http_methods",
      "value": "Stat",
      "context": "    \\n    for _, script := range scripts {\\n>>> if stat, err := os.Stat(script); os.IsNotExist(err) {\\n    missingScripts = append(missingScripts, script)\\n    } else {",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/checker.go",
      "line": 188,
      "category": "http_methods",
      "value": "Stat",
      "context": "    // Vérifier si le répertoire parent existe\\n    dir := cfg.DBPath[:len(cfg.DBPath)-len(constants.DefaultDatabaseFile)]\\n>>> if _, err := os.Stat(dir); os.IsNotExist(err) {\\n    return CheckResult{\\n    Status:  constants.CheckStatusWarning,",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/checker.go",
      "line": 237,
      "category": "http_methods",
      "value": "Stat",
      "context": "    \\n    for _, dir := range dirs {\\n>>> if _, err := os.Stat(dir); os.IsNotExist(err) {\\n    missing = append(missing, constants.DebugDirPrefix+dir)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/checker.go",
      "line": 243,
      "category": "http_methods",
      "value": "Stat",
      "context": "    \\n    for _, file := range files {\\n>>> if _, err := os.Stat(file); os.IsNotExist(err) {\\n    missing = append(missing, constants.DebugFilePrefix+file)\\n    }",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/checker.go",
      "line": 336,
      "category": "http_methods",
      "value": "Set",
      "context": "    phaseTests := &PhaseTestSuite{Status: constants.StatusPassed}\\n    \\n>>> w.Header().Set(constants.HeaderContentType, constants.ContentTypeJSON)\\n    if phaseTests.Status == constants.TestStatusPassed {\\n    w.WriteHeader(http.StatusOK)",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    },
    {
      "file": "internal/debug/checker.go",
      "line": 355,
      "category": "http_methods",
      "value": "Set",
      "context": "    checker := NewChecker(cfg)\\n    \\n>>> w.Header().Set(constants.HeaderContentType, constants.ContentTypeJSON)\\n    \\n    // Status code basé sur l'état",
      "severity": "Medium",
      "description": "Méthodes HTTP hardcodées"
    }
  ],
  "recommendations": {
    "next_steps": [
      "Corriger immédiatement les violations CRITICAL",
      "Créer des constantes pour les violations HIGH",
      "Planifier la refactorisation des violations MEDIUM",
      "Documenter les violations LOW acceptables"
    ],
    "tools_needed": [
      "Scripts d'automatisation pour les remplacements",
      "Linters configurés pour éviter les régressions",
      "Tests pour valider les corrections"
    ]
  }
}