{
  "file_path": "tests/agents/frontend/playwright_agent.go",
  "total_violations": 38,
  "violations": [
    {
      "id": "PLW-001",
      "severity": "MEDIUM",
      "category": "Browser Automation",
      "title": "Browser Pool Not Implemented",
      "description": "Browser instances created without pooling mechanism",
      "line_number": 95,
      "code_snippet": "func NewPlaywrightAgent() *PlaywrightAgent {",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Implement browser instance pooling for resource efficiency",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-002",
      "severity": "MEDIUM",
      "category": "Browser Automation",
      "title": "Static Browser Configuration",
      "description": "Browser list is statically defined without runtime flexibility",
      "line_number": 98,
      "code_snippet": "Browsers:    []string{\"chromium\", \"firefox\", \"webkit\"},",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Implement dynamic browser configuration based on environment",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-003",
      "severity": "HIGH",
      "category": "Browser Automation",
      "title": "Hardcoded MCP Endpoint",
      "description": "MCP Playwright endpoint is hardcoded in implementation",
      "line_number": 109,
      "code_snippet": "mcpClient: &MCPPlaywrightClient{endpoint: \"mcp://playwright\"},",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Use configuration-driven endpoint management",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-004",
      "severity": "MEDIUM",
      "category": "Selector Strategy",
      "title": "Generic Element Reference",
      "description": "Accessibility violations reference elements generically",
      "line_number": 68,
      "code_snippet": "Element     string `json:\"element\"`",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Implement specific element identification strategy",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-005",
      "severity": "MEDIUM",
      "category": "Selector Strategy",
      "title": "Hardcoded Screenshot Paths",
      "description": "Screenshot paths are hardcoded without configuration",
      "line_number": 177,
      "code_snippet": "Path:     fmt.Sprintf(\"tests/screenshots/%s_%s_home.png\", viewport, browser),",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Use configurable screenshot naming strategy",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-006",
      "severity": "HIGH",
      "category": "Assertion Framework",
      "title": "Manual Test Counter Management",
      "description": "Test counters manually managed without framework integration",
      "line_number": 183,
      "code_snippet": "pa.results.TotalTests++",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Use testing framework's built-in assertion counting",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-007",
      "severity": "HIGH",
      "category": "Assertion Framework",
      "title": "Manual Test Counter Management",
      "description": "Test counters manually managed without framework integration",
      "line_number": 217,
      "code_snippet": "pa.results.TotalTests++",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Use testing framework's built-in assertion counting",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-008",
      "severity": "HIGH",
      "category": "Assertion Framework",
      "title": "Manual Test Counter Management",
      "description": "Test counters manually managed without framework integration",
      "line_number": 241,
      "code_snippet": "pa.results.TotalTests++",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Use testing framework's built-in assertion counting",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-009",
      "severity": "HIGH",
      "category": "Assertion Framework",
      "title": "Manual Test Counter Management",
      "description": "Test counters manually managed without framework integration",
      "line_number": 259,
      "code_snippet": "pa.results.TotalTests++",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Use testing framework's built-in assertion counting",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-010",
      "severity": "HIGH",
      "category": "Assertion Framework",
      "title": "Manual Test Counter Management",
      "description": "Test counters manually managed without framework integration",
      "line_number": 279,
      "code_snippet": "pa.results.TotalTests++",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Use testing framework's built-in assertion counting",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-011",
      "severity": "HIGH",
      "category": "Assertion Framework",
      "title": "Performance Threshold Without Context",
      "description": "Performance score threshold lacks contextual validation",
      "line_number": 296,
      "code_snippet": "pa.results.Performance.Score >= 90.0 {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement dynamic performance baselines based on page types",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-012",
      "severity": "HIGH",
      "category": "Assertion Framework",
      "title": "Manual Test Counter Management",
      "description": "Test counters manually managed without framework integration",
      "line_number": 327,
      "code_snippet": "pa.results.TotalTests++",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Use testing framework's built-in assertion counting",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-013",
      "severity": "MEDIUM",
      "category": "Screenshot Management",
      "title": "Boolean Screenshot Control",
      "description": "Screenshot management uses simple boolean without granular control",
      "line_number": 29,
      "code_snippet": "Screenshots bool     `json:\"screenshots\"`",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Implement screenshot strategy configuration (always/failure/none)",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-014",
      "severity": "HIGH",
      "category": "Screenshot Management",
      "title": "Hardcoded Screenshot Storage",
      "description": "Screenshot storage path hardcoded without environment awareness",
      "line_number": 177,
      "code_snippet": "Path:     fmt.Sprintf(\"tests/screenshots/%s_%s_home.png\", viewport, browser),",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Use environment-specific screenshot storage strategies",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-015",
      "severity": "MEDIUM",
      "category": "Performance Testing",
      "title": "Static Performance Scoring",
      "description": "Performance scoring is static without dynamic baseline",
      "line_number": 237,
      "code_snippet": "Score:  92.0, // Overall performance score",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Implement performance budget validation against baselines",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-016",
      "severity": "HIGH",
      "category": "Performance Testing",
      "title": "Universal Performance Threshold",
      "description": "Single performance threshold applied across all page types",
      "line_number": 296,
      "code_snippet": "pa.results.Performance.Score >= 90.0 {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement page-type-specific performance budgets",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-017",
      "severity": "MEDIUM",
      "category": "Cross-Browser Compatibility",
      "title": "Limited Browser Coverage",
      "description": "Browser testing limited to engine types without version coverage",
      "line_number": 98,
      "code_snippet": "Browsers:    []string{\"chromium\", \"firefox\", \"webkit\"},",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Include specific browser versions and mobile browsers in test matrix",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-018",
      "severity": "HIGH",
      "category": "Cross-Browser Compatibility",
      "title": "Uniform Browser Treatment",
      "description": "All browsers treated uniformly without browser-specific optimizations",
      "line_number": 173,
      "code_snippet": "for _, browser := range pa.config.Browsers {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement browser-specific test strategies and timeouts",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-019",
      "severity": "HIGH",
      "category": "Cross-Browser Compatibility",
      "title": "Uniform Browser Treatment",
      "description": "All browsers treated uniformly without browser-specific optimizations",
      "line_number": 277,
      "code_snippet": "for _, browser := range pa.config.Browsers {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement browser-specific test strategies and timeouts",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-020",
      "severity": "MEDIUM",
      "category": "Test Data Management",
      "title": "Static Report Path",
      "description": "Report output path is static without environment consideration",
      "line_number": 103,
      "code_snippet": "ReportPath:  \"tests/reports/frontend\",",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Use dynamic report paths based on execution context",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-021",
      "severity": "HIGH",
      "category": "Test Data Management",
      "title": "Shared Test Results Object",
      "description": "Test results shared across test methods without isolation",
      "line_number": 108,
      "code_snippet": "results:   &PlaywrightResults{Timestamp: time.Now()},",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement test result isolation per test case",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-022",
      "severity": "HIGH",
      "category": "Page Object Model",
      "title": "String-Based Element References",
      "description": "Elements referenced as strings without type safety",
      "line_number": 68,
      "code_snippet": "Element     string `json:\"element\"`",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement strongly-typed element reference system",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-023",
      "severity": "MEDIUM",
      "category": "Page Object Model",
      "title": "String Interpolation for Dynamic Content",
      "description": "Dynamic content generation using string formatting",
      "line_number": 176,
      "code_snippet": "Name:     fmt.Sprintf(\"%s_%s_home\", viewport, browser),",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Use template-based content generation with validation",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-024",
      "severity": "MEDIUM",
      "category": "Page Object Model",
      "title": "String Interpolation for Dynamic Content",
      "description": "Dynamic content generation using string formatting",
      "line_number": 177,
      "code_snippet": "Path:     fmt.Sprintf(\"tests/screenshots/%s_%s_home.png\", viewport, browser),",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Use template-based content generation with validation",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-025",
      "severity": "HIGH",
      "category": "Wait Strategies",
      "title": "Context Without Timeout Handling",
      "description": "Context passed but timeout handling not properly implemented",
      "line_number": 114,
      "code_snippet": "func (pa *PlaywrightAgent) RunFullTest(ctx context.Context) (*PlaywrightResults, error) {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement proper context timeout and cancellation handling",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-026",
      "severity": "HIGH",
      "category": "Wait Strategies",
      "title": "Context Without Timeout Handling",
      "description": "Context passed but timeout handling not properly implemented",
      "line_number": 163,
      "code_snippet": "func (pa *PlaywrightAgent) testResponsiveDesign(ctx context.Context) error {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement proper context timeout and cancellation handling",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-027",
      "severity": "HIGH",
      "category": "Wait Strategies",
      "title": "Context Without Timeout Handling",
      "description": "Context passed but timeout handling not properly implemented",
      "line_number": 198,
      "code_snippet": "func (pa *PlaywrightAgent) testAccessibility(ctx context.Context) error {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement proper context timeout and cancellation handling",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-028",
      "severity": "HIGH",
      "category": "Wait Strategies",
      "title": "Context Without Timeout Handling",
      "description": "Context passed but timeout handling not properly implemented",
      "line_number": 228,
      "code_snippet": "func (pa *PlaywrightAgent) testPerformance(ctx context.Context) error {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement proper context timeout and cancellation handling",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-029",
      "severity": "HIGH",
      "category": "Wait Strategies",
      "title": "Context Without Timeout Handling",
      "description": "Context passed but timeout handling not properly implemented",
      "line_number": 248,
      "code_snippet": "func (pa *PlaywrightAgent) testVisualRegression(ctx context.Context) error {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement proper context timeout and cancellation handling",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-030",
      "severity": "HIGH",
      "category": "Wait Strategies",
      "title": "Context Without Timeout Handling",
      "description": "Context passed but timeout handling not properly implemented",
      "line_number": 266,
      "code_snippet": "func (pa *PlaywrightAgent) testCrossBrowser(ctx context.Context) error {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement proper context timeout and cancellation handling",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-031",
      "severity": "HIGH",
      "category": "Wait Strategies",
      "title": "Context Without Timeout Handling",
      "description": "Context passed but timeout handling not properly implemented",
      "line_number": 319,
      "code_snippet": "func (pa *PlaywrightAgent) ValidateSEPTEODesign(ctx context.Context) error {",
      "impact": "Major impact on test quality and maintenance overhead",
      "recommendation": "Implement proper context timeout and cancellation handling",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-032",
      "severity": "MEDIUM",
      "category": "Error Handling",
      "title": "Generic Error Messages",
      "description": "Error messages lack context about test operation that failed",
      "line_number": 119,
      "code_snippet": "log.Error(\"Responsive design test failed\", map[string]interface{}{\"error\": err.Error()})",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Include test context and operation details in error messages",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-033",
      "severity": "MEDIUM",
      "category": "Error Handling",
      "title": "Generic Error Messages",
      "description": "Error messages lack context about test operation that failed",
      "line_number": 124,
      "code_snippet": "log.Error(\"Accessibility test failed\", map[string]interface{}{\"error\": err.Error()})",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Include test context and operation details in error messages",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-034",
      "severity": "MEDIUM",
      "category": "Error Handling",
      "title": "Generic Error Messages",
      "description": "Error messages lack context about test operation that failed",
      "line_number": 129,
      "code_snippet": "log.Error(\"Performance test failed\", map[string]interface{}{\"error\": err.Error()})",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Include test context and operation details in error messages",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-035",
      "severity": "MEDIUM",
      "category": "Error Handling",
      "title": "Generic Error Messages",
      "description": "Error messages lack context about test operation that failed",
      "line_number": 134,
      "code_snippet": "log.Error(\"Visual regression test failed\", map[string]interface{}{\"error\": err.Error()})",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Include test context and operation details in error messages",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-036",
      "severity": "MEDIUM",
      "category": "Error Handling",
      "title": "Generic Error Messages",
      "description": "Error messages lack context about test operation that failed",
      "line_number": 139,
      "code_snippet": "log.Error(\"Cross-browser test failed\", map[string]interface{}{\"error\": err.Error()})",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Include test context and operation details in error messages",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-037",
      "severity": "MEDIUM",
      "category": "Error Handling",
      "title": "Generic Error Messages",
      "description": "Error messages lack context about test operation that failed",
      "line_number": 147,
      "code_snippet": "log.Error(\"Failed to generate report\", map[string]interface{}{\"error\": err.Error()})",
      "impact": "Moderate impact on test effectiveness and code quality",
      "recommendation": "Include test context and operation details in error messages",
      "pattern_type": "regex"
    },
    {
      "id": "PLW-038",
      "severity": "LOW",
      "category": "Test Maintainability",
      "title": "Global Logger Instance",
      "description": "Logger instantiated globally without test-specific context",
      "line_number": 15,
      "code_snippet": "var log = logger.New(\"FRONTEND-AGENT\")",
      "impact": "Minor impact on test maintainability",
      "recommendation": "Implement test-scoped logging for better traceability",
      "pattern_type": "regex"
    }
  ],
  "analysis_timestamp": "2025-08-08T00:27:57.143930",
  "categories": {
    "Browser Automation": {
      "total": 3,
      "severities": {
        "MEDIUM": 2,
        "HIGH": 1
      }
    },
    "Selector Strategy": {
      "total": 2,
      "severities": {
        "MEDIUM": 2
      }
    },
    "Assertion Framework": {
      "total": 7,
      "severities": {
        "HIGH": 7
      }
    },
    "Screenshot Management": {
      "total": 2,
      "severities": {
        "MEDIUM": 1,
        "HIGH": 1
      }
    },
    "Performance Testing": {
      "total": 2,
      "severities": {
        "MEDIUM": 1,
        "HIGH": 1
      }
    },
    "Cross-Browser Compatibility": {
      "total": 3,
      "severities": {
        "MEDIUM": 1,
        "HIGH": 2
      }
    },
    "Test Data Management": {
      "total": 2,
      "severities": {
        "MEDIUM": 1,
        "HIGH": 1
      }
    },
    "Page Object Model": {
      "total": 3,
      "severities": {
        "HIGH": 1,
        "MEDIUM": 2
      }
    },
    "Wait Strategies": {
      "total": 7,
      "severities": {
        "HIGH": 7
      }
    },
    "Error Handling": {
      "total": 6,
      "severities": {
        "MEDIUM": 6
      }
    },
    "Test Maintainability": {
      "total": 1,
      "severities": {
        "LOW": 1
      }
    }
  }
}

🎭 DELTA-15 Playwright Analysis Complete
📊 Total Violations: 38
📁 File: tests/agents/frontend/playwright_agent.go

📋 Categories:
  • Browser Automation: 3 violations
  • Selector Strategy: 2 violations
  • Assertion Framework: 7 violations
  • Screenshot Management: 2 violations
  • Performance Testing: 2 violations
  • Cross-Browser Compatibility: 3 violations
  • Test Data Management: 2 violations
  • Page Object Model: 3 violations
  • Wait Strategies: 7 violations
  • Error Handling: 6 violations
  • Test Maintainability: 1 violations
