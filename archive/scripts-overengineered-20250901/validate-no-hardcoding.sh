#!/bin/bash

# ========================================
# FIRE SALAMANDER - VALIDATION ANTI-HARDCODING
# Script de contr√¥le automatique pour conformit√© SEPTEO
# ========================================

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Couleurs pour output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Compteurs
VIOLATIONS_FOUND=0
FILES_CHECKED=0

echo -e "${BLUE}üî• FIRE SALAMANDER - VALIDATION ANTI-HARDCODING${NC}"
echo -e "${BLUE}=================================================${NC}"
echo ""

# Fonction pour afficher une violation
report_violation() {
    local file="$1"
    local line="$2"
    local content="$3"
    local reason="$4"
    
    echo -e "${RED}‚ùå VIOLATION D√âTECT√âE${NC}"
    echo -e "   üìÑ Fichier: ${file}"
    echo -e "   üìç Ligne: ${line}"
    echo -e "   üí¨ Contenu: ${content}"
    echo -e "   üîç Raison: ${reason}"
    echo ""
    
    VIOLATIONS_FOUND=$((VIOLATIONS_FOUND + 1))
}

# Fonction pour v√©rifier un fichier
check_file() {
    local file="$1"
    FILES_CHECKED=$((FILES_CHECKED + 1))
    
    echo -e "${BLUE}üîç V√©rification: ${file}${NC}"
    
    # Patterns de hardcoding √† d√©tecter
    local patterns=(
        # Timeouts hardcod√©s
        ":[[:space:]]*[0-9]+[[:space:]]*\\*[[:space:]]*time\\.Second"
        ":[[:space:]]*[0-9]+[[:space:]]*\\*[[:space:]]*time\\.Millisecond"
        ":[[:space:]]*[0-9]+[[:space:]]*\\*[[:space:]]*time\\.Minute"
        
        # Tailles hardcod√©es
        "[[:space:]][0-9]+[[:space:]]*\\*[[:space:]]*1024[[:space:]]*\\*[[:space:]]*1024"
        "maxBodySize[[:space:]]*:=[[:space:]]*[0-9]+"
        "maxURLs[[:space:]]*:[[:space:]]*[0-9]+"
        
        # Ports hardcod√©s
        "localhost:[0-9]+"
        ":[0-9]{4,5}[^0-9]"
        
        # Limites hardcod√©es
        "len\\([^)]+\\)[[:space:]]*>=[[:space:]]*[0-9]+"
        "len\\([^)]+\\)[[:space:]]*<[[:space:]]*[0-9]+"
        
        # User agents hardcod√©s
        "User-Agent.*[^constants\\.]"
        
        # Seuils de performance hardcod√©s
        "[0-9]+ms"
        "threshold.*[0-9]+"
    )
    
    local descriptions=(
        "Timeout hardcod√© avec time.Second"
        "Timeout hardcod√© avec time.Millisecond"  
        "Timeout hardcod√© avec time.Minute"
        "Taille m√©moire hardcod√©e (MB)"
        "Taille body hardcod√©e"
        "Limite URLs hardcod√©e"
        "Port localhost hardcod√©"
        "Port r√©seau hardcod√©"
        "Limite de longueur hardcod√©e (>=)"
        "Limite de longueur hardcod√©e (<)"
        "User-Agent hardcod√©"
        "Seuil en millisecondes hardcod√©"
        "Seuil/threshold hardcod√©"
    )
    
    # V√©rifier chaque pattern
    for i in "${!patterns[@]}"; do
        local pattern="${patterns[$i]}"
        local description="${descriptions[$i]}"
        
        # Rechercher le pattern dans le fichier
        while IFS= read -r line_content; do
            local line_number=$(echo "$line_content" | cut -d: -f1)
            local line_text=$(echo "$line_content" | cut -d: -f2-)
            
            # V√©rifier si c'est dans un commentaire (ignorer)
            if [[ "$line_text" =~ ^[[:space:]]*// ]]; then
                continue
            fi
            
            # Exclure les lignes avec constants.
            if [[ "$line_text" =~ constants\. ]]; then
                continue
            fi
            
            # Exclure les d√©finitions de constantes elles-m√™mes
            if [[ "$line_text" =~ ^[[:space:]]*const[[:space:]] ]] || [[ "$line_text" =~ ^[[:space:]]*[A-Z][A-Za-z0-9_]*[[:space:]]*= ]]; then
                continue
            fi
            
            report_violation "$file" "$line_number" "$(echo "$line_text" | xargs)" "$description"
            
        done < <(grep -n -E "$pattern" "$file" 2>/dev/null || true)
    done
    
    # V√©rifications sp√©cifiques par type de fichier
    if [[ "$file" == *_test.go ]]; then
        check_test_file_hardcoding "$file"
    fi
    
    if [[ "$file" == *crawler*.go ]]; then
        check_crawler_specific_hardcoding "$file"
    fi
}

# V√©rifications sp√©cifiques aux fichiers de test
check_test_file_hardcoding() {
    local file="$1"
    
    # V√©rifier les timeouts de test hardcod√©s
    while IFS= read -r line_content; do
        local line_number=$(echo "$line_content" | cut -d: -f1)
        local line_text=$(echo "$line_content" | cut -d: -f2-)
        
        if [[ ! "$line_text" =~ constants\. ]]; then
            report_violation "$file" "$line_number" "$(echo "$line_text" | xargs)" "Timeout de test hardcod√©"
        fi
    done < <(grep -n -E "[0-9]+[[:space:]]*\\*[[:space:]]*time\\.(Second|Millisecond)" "$file" 2>/dev/null || true)
}

# V√©rifications sp√©cifiques aux crawlers
check_crawler_specific_hardcoding() {
    local file="$1"
    
    # V√©rifier les URLs de test hardcod√©es
    while IFS= read -r line_content; do
        local line_number=$(echo "$line_content" | cut -d: -f1)
        local line_text=$(echo "$line_content" | cut -d: -f2-)
        
        if [[ "$line_text" =~ \"https?://[^\"]+\" ]] && [[ ! "$line_text" =~ constants\. ]]; then
            report_violation "$file" "$line_number" "$(echo "$line_text" | xargs)" "URL hardcod√©e dans le code"
        fi
    done < <(grep -n -E "\"https?://[^\"]+\"" "$file" 2>/dev/null || true)
    
    # V√©rifier les retry attempts hardcod√©s
    while IFS= read -r line_content; do
        local line_number=$(echo "$line_content" | cut -d: -f1)
        local line_text=$(echo "$line_content" | cut -d: -f2-)
        
        if [[ "$line_text" =~ [Rr]etry.*[0-9]+ ]] && [[ ! "$line_text" =~ constants\. ]]; then
            report_violation "$file" "$line_number" "$(echo "$line_text" | xargs)" "Nombre de retry hardcod√©"
        fi
    done < <(grep -n -E "[Rr]etry.*[0-9]+" "$file" 2>/dev/null || true)
}

# Fonction pour v√©rifier l'utilisation correcte des constantes
check_constants_usage() {
    echo -e "${BLUE}üîß V√©rification de l'utilisation des constantes...${NC}"
    
    # V√©rifier que les fichiers importent bien le package constants
    local crawler_files=($(find "$PROJECT_ROOT/internal/crawler" -name "*.go" -not -name "*_test.go"))
    
    for file in "${crawler_files[@]}"; do
        if ! grep -q "firesalamander/internal/constants" "$file"; then
            echo -e "${YELLOW}‚ö†Ô∏è Warning: ${file} n'importe pas le package constants${NC}"
        fi
    done
}

# Fonction principale
main() {
    echo -e "${BLUE}D√©marrage de la validation anti-hardcoding...${NC}"
    echo ""
    
    # V√©rifier que nous sommes dans le bon r√©pertoire
    if [[ ! -d "$PROJECT_ROOT/internal/crawler" ]]; then
        echo -e "${RED}‚ùå Erreur: R√©pertoire internal/crawler non trouv√©${NC}"
        exit 1
    fi
    
    # Trouver tous les fichiers Go dans le crawler
    local files=($(find "$PROJECT_ROOT/internal/crawler" -name "*.go"))
    
    if [[ ${#files[@]} -eq 0 ]]; then
        echo -e "${RED}‚ùå Erreur: Aucun fichier Go trouv√© dans internal/crawler${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üìÅ ${#files[@]} fichiers Go trouv√©s √† v√©rifier${NC}"
    echo ""
    
    # V√©rifier chaque fichier
    for file in "${files[@]}"; do
        check_file "$file"
    done
    
    # V√©rifications suppl√©mentaires
    check_constants_usage
    
    echo ""
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}R√âSULTATS DE LA VALIDATION${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo -e "üìä Fichiers v√©rifi√©s: ${FILES_CHECKED}"
    
    if [[ $VIOLATIONS_FOUND -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ SUCC√àS: Aucune violation de hardcoding d√©tect√©e!${NC}"
        echo -e "${GREEN}üî• Le code respecte les standards SEPTEO${NC}"
        exit 0
    else
        echo -e "${RED}‚ùå √âCHEC: ${VIOLATIONS_FOUND} violation(s) de hardcoding d√©tect√©e(s)${NC}"
        echo -e "${RED}üö® Le code ne respecte pas les standards SEPTEO${NC}"
        echo ""
        echo -e "${YELLOW}üìã Actions recommand√©es:${NC}"
        echo -e "${YELLOW}1. D√©placer les valeurs hardcod√©es vers internal/constants/crawler_constants.go${NC}"
        echo -e "${YELLOW}2. Utiliser les constantes dans le code: constants.NomConstante${NC}"
        echo -e "${YELLOW}3. Externaliser la configuration via environment variables${NC}"
        echo -e "${YELLOW}4. Re-ex√©cuter ce script pour validation${NC}"
        exit 1
    fi
}

# V√©rifier les param√®tres de ligne de commande
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  -h, --help     Afficher cette aide"
            echo "  -v, --verbose  Mode verbose"
            echo ""
            echo "Ce script v√©rifie l'absence de hardcoding dans le module crawler."
            echo "Conformit√© aux standards SEPTEO - Z√©ro tol√©rance hardcoding."
            exit 0
            ;;
        -v|--verbose)
            set -x
            shift
            ;;
        *)
            echo "Option inconnue: $1"
            exit 1
            ;;
    esac
done

# Ex√©cution
main "$@"