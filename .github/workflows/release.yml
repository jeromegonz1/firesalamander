name: 🚀 Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  GO_VERSION: '1.22.5'

jobs:
  # Version validation job
  validate-version:
    name: 🔍 Validate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          # Remove 'v' prefix if present
          VERSION_CLEAN=$(echo "$VERSION" | sed 's/^v//')
          
          # Validate semantic version format
          if ! echo "$VERSION_CLEAN" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$'; then
            echo "❌ Invalid version format: $VERSION_CLEAN"
            echo "Expected format: MAJOR.MINOR.PATCH[-prerelease]"
            exit 1
          fi
          
          # Check if it's a prerelease
          IS_PRERELEASE="false"
          if echo "$VERSION_CLEAN" | grep -q '-'; then
            IS_PRERELEASE="true"
          fi
          
          echo "version=$VERSION_CLEAN" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          echo "✅ Version validated: $VERSION_CLEAN"
          echo "📦 Prerelease: $IS_PRERELEASE"

  # Quality gate - all agents must pass
  quality-gate:
    name: 🛡️ Quality Gate
    runs-on: ubuntu-latest
    needs: validate-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      - name: Install dependencies
        run: |
          go mod download
          
      - name: 🔬 QA Agent
        run: make qa-test
        
      - name: 🔒 Security Agent  
        run: make security-test
        continue-on-error: true # Allow security warnings but log them
        
      - name: ⚡ Performance Agent
        run: make performance-test
        continue-on-error: true # Performance tests may need running service
        
      - name: 🎨 Frontend Agent
        run: make frontend-test
        continue-on-error: true # May require additional setup
        
      - name: 📊 API Agent
        run: make api-test
        continue-on-error: true # May require running service

  # Build artifacts
  build:
    name: 🏗️ Build Artifacts
    runs-on: ubuntu-latest
    needs: [validate-version, quality-gate]
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          VERSION: ${{ needs.validate-version.outputs.version }}
        run: |
          BUILD_TIME=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          GIT_COMMIT=${{ github.sha }}
          
          BINARY_NAME="fire-salamander-${{ matrix.suffix }}"
          
          go build \
            -ldflags="-X 'main.BuildTime=$BUILD_TIME' -X 'main.GitCommit=$GIT_COMMIT'" \
            -o "$BINARY_NAME" \
            ./cmd/firesalamander
            
          # Create archive
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip "fire-salamander-v$VERSION-${{ matrix.suffix }}.zip" "$BINARY_NAME" README.md CHANGELOG.md config.example.yaml
          else
            tar -czf "fire-salamander-v$VERSION-${{ matrix.suffix }}.tar.gz" "$BINARY_NAME" README.md CHANGELOG.md config.example.yaml
          fi
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: fire-salamander-${{ matrix.suffix }}
          path: fire-salamander-v${{ needs.validate-version.outputs.version }}-${{ matrix.suffix }}.*

  # Create GitHub release
  release:
    name: 🎉 Create Release
    runs-on: ubuntu-latest
    needs: [validate-version, quality-gate, build]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
          
      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release-assets/
          ls -la release-assets/
          
      - name: Extract changelog for this version
        id: changelog
        run: |
          VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Extract changelog section for this version
          CHANGELOG_SECTION=$(awk "/^## \[$VERSION\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)
          
          if [ -z "$CHANGELOG_SECTION" ]; then
            CHANGELOG_SECTION="Release version $VERSION"
          fi
          
          # Save to file for GitHub release
          echo "$CHANGELOG_SECTION" > release-notes.md
          
          echo "Release notes prepared for version $VERSION"
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-version.outputs.version }}
          name: 🔥 Fire Salamander v${{ needs.validate-version.outputs.version }}
          body_path: release-notes.md
          prerelease: ${{ needs.validate-version.outputs.is_prerelease == 'true' }}
          files: release-assets/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Version bump for next development
  version-bump:
    name: 🔄 Version Bump
    runs-on: ubuntu-latest
    needs: [validate-version, release]
    if: needs.validate-version.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Bump version for next development
        run: |
          CURRENT_VERSION="${{ needs.validate-version.outputs.version }}"
          
          # Parse version components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment patch version for next development
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"
          
          echo "Current version: $CURRENT_VERSION"
          echo "Next version: $NEXT_VERSION"
          
          # Update version.go
          sed -i "s/VersionPatch = $PATCH/VersionPatch = $NEXT_PATCH/" internal/config/version.go
          
          # Create commit
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add internal/config/version.go
          git commit -m "🔖 Bump version to v$NEXT_VERSION for next development cycle

          🚀 Generated with [Claude Code](https://claude.ai/code)
          
          Co-Authored-By: Claude <noreply@anthropic.com>"
          git push