name: Fire Salamander CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.23'
  PYTHON_VERSION: '3.9'

jobs:
  test-go:
    name: Test Go Agents
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run Go tests
      run: |
        go test -v -race -coverprofile=coverage.out ./internal/crawler
        go test -v -race -coverprofile=coverage-audit.out ./internal/audit  
        go test -v -race -coverprofile=coverage-orchestrator.out ./internal/orchestrator
        go test -v -race -coverprofile=coverage-report.out ./internal/report
        
    - name: Upload Go coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.out,./coverage-audit.out,./coverage-orchestrator.out,./coverage-report.out
        flags: golang

  test-python:
    name: Test Python Semantic Agent
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache Python packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install Python dependencies
      run: |
        cd internal/semantic/python
        pip install -r requirements.txt
        python -m spacy download fr_core_news_sm
        
    - name: Run Python tests
      run: |
        cd internal/semantic/python
        python -m pytest test_semantic_analyzer.py -v --cov=semantic_analyzer --cov-report=xml
        
    - name: Upload Python coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./internal/semantic/python/coverage.xml
        flags: python

  validate-setup:
    name: Validate Phase 0 Setup
    runs-on: ubuntu-latest
    needs: [test-go, test-python]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run validation script
      run: |
        chmod +x scripts/validate-prep.sh
        ./scripts/validate-prep.sh
        
    - name: Check build
      run: |
        go build -o fire-salamander ./cmd/server/main.go
        ./fire-salamander --version || echo "Build successful"

  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python linting tools
      run: |
        pip install black flake8 mypy
        
    - name: Lint Python code
      run: |
        cd internal/semantic/python
        black --check .
        flake8 . --max-line-length=88
        mypy semantic_analyzer.py --ignore-missing-imports