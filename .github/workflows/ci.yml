name: 🔥 Fire Salamander CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.22.5'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Job 1: QA Agent - Tests Go + Coverage
  qa-tests:
    name: 🔍 QA Agent (Go Tests + Coverage)
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
      
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.55.0
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
    
    - name: Install gosec
      run: |
        curl -sfL https://raw.githubusercontent.com/securecodewarrior/gosec/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.18.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        
    - name: Install gocyclo
      run: go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
    
    - name: Run QA Agent
      run: |
        cd tests/agents/qa
        go test -v
        
    - name: Run unit tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below 80% threshold"
          exit 1
        fi
        echo "✅ Coverage $COVERAGE% meets 80% threshold"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage.html

  # Job 2: API Tests
  api-tests:
    name: 🚀 API Test Agent
    runs-on: ubuntu-latest
    needs: qa-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install API test dependencies
      run: |
        cd tests/agents/api
        npm install
        
    - name: Start Fire Salamander server
      run: |
        go mod download
        go run main.go &
        sleep 10
        
    - name: Run API tests
      run: |
        cd tests/agents/api
        chmod +x test_runner.js
        node test_runner.js --url=http://localhost:3000
        
    - name: Upload API test report
      uses: actions/upload-artifact@v3
      with:
        name: api-test-report
        path: tests/reports/api/

  # Job 3: Frontend E2E Tests
  frontend-tests:
    name: 🎭 Frontend Test Agent (Playwright)
    runs-on: ubuntu-latest
    needs: qa-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Playwright dependencies
      run: |
        cd tests/agents/frontend
        npm install
        npx playwright install --with-deps
        
    - name: Start Fire Salamander server
      run: |
        go mod download 
        go run main.go &
        sleep 10
        
    - name: Run Playwright tests
      run: |
        cd tests/agents/frontend
        BASE_URL=http://localhost:3000 npx playwright test
        
    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: tests/reports/frontend/

  # Job 4: Security Tests
  security-tests:
    name: 🔒 Security Test Agent
    runs-on: ubuntu-latest
    needs: qa-tests
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Python dependencies
      run: |
        pip install requests pyyaml
        
    - name: Start Fire Salamander server
      run: |
        go mod download
        go run main.go &
        sleep 10
        
    - name: Run security tests
      run: |
        cd tests/agents/security
        python security_agent.py --url=http://localhost:3000
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: tests/reports/security/

  # Job 5: Performance Tests
  performance-tests:
    name: ⚡ Performance Test Agent (k6)
    runs-on: ubuntu-latest
    needs: [api-tests, frontend-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install k6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
        
    - name: Start Fire Salamander server
      run: |
        go mod download
        go run main.go &
        sleep 10
        
    - name: Run k6 performance tests
      run: |
        cd tests/agents/performance
        BASE_URL=http://localhost:3000 k6 run --out json=results.json k6-load-test.js
        
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: tests/agents/performance/results.json

  # Job 6: Build & Deploy (si main branch)
  build-deploy:
    name: 🚀 Build & Deploy
    runs-on: ubuntu-latest
    needs: [qa-tests, api-tests, frontend-tests, security-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run Phase 1 tests
      run: |
        chmod +x test-phase1.sh
        ./test-phase1.sh
        
    - name: Run Phase 2 tests
      run: |
        chmod +x test-phase2.sh
        ./test-phase2.sh
        
    - name: Build application
      run: |
        CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o firesalamander .
        
    - name: Create deployment package
      run: |
        mkdir -p deploy-package
        cp firesalamander deploy-package/
        cp -r config deploy-package/
        cp -r deploy deploy-package/
        tar -czf firesalamander-${{ github.sha }}.tar.gz -C deploy-package .
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: firesalamander-build
        path: firesalamander-${{ github.sha }}.tar.gz

  # Job 7: Generate Final Report
  generate-report:
    name: 📊 Generate Test Report
    runs-on: ubuntu-latest
    needs: [qa-tests, api-tests, frontend-tests, security-tests]
    if: always()
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate consolidated report
      run: |
        mkdir -p final-report
        echo "# 🔥 Fire Salamander - CI/CD Test Report" > final-report/README.md
        echo "Generated: $(date)" >> final-report/README.md
        echo "" >> final-report/README.md
        echo "## Test Results Summary" >> final-report/README.md
        echo "- ✅ QA Tests: ${{ needs.qa-tests.result }}" >> final-report/README.md
        echo "- ✅ API Tests: ${{ needs.api-tests.result }}" >> final-report/README.md  
        echo "- ✅ Frontend Tests: ${{ needs.frontend-tests.result }}" >> final-report/README.md
        echo "- ✅ Security Tests: ${{ needs.security-tests.result }}" >> final-report/README.md
        echo "" >> final-report/README.md
        echo "## Artifacts" >> final-report/README.md
        echo "- Coverage Report: coverage-report/" >> final-report/README.md
        echo "- API Test Report: api-test-report/" >> final-report/README.md
        echo "- Playwright Report: playwright-report/" >> final-report/README.md
        echo "- Security Report: security-report/" >> final-report/README.md
        
    - name: Upload final report
      uses: actions/upload-artifact@v3
      with:
        name: final-test-report
        path: final-report/