package web

import (
	"context"
	"embed"
	"fmt"
	"io/fs"
	"log"
	"net/http"
	"path/filepath"
	"strings"
	"time"

	"firesalamander/internal/config"
	"firesalamander/internal/constants"
	"firesalamander/internal/integration"
)

//go:embed static/*
var staticFiles embed.FS

// WebServer serveur web pour l'interface Fire Salamander
type WebServer struct {
	orchestrator *integration.Orchestrator
	apiServer    *integration.APIServer
	config       *config.Config
	server       *http.Server
	mux          *http.ServeMux
}

// NewWebServer cr√©e un nouveau serveur web
func NewWebServer(orchestrator *integration.Orchestrator, cfg *config.Config) *WebServer {
	mux := http.NewServeMux()
	
	webServer := &WebServer{
		orchestrator: orchestrator,
		config:       cfg,
		mux:          mux,
		server: &http.Server{
			Addr:         fmt.Sprintf(":%d", cfg.Port),
			Handler:      mux,
			ReadTimeout:  constants.ServerReadTimeout,
			WriteTimeout: constants.ServerWriteTimeout,
			IdleTimeout:  constants.ServerIdleTimeout,
		},
	}

	// Cr√©er le serveur API int√©gr√©
	webServer.apiServer = integration.NewAPIServer(orchestrator, cfg)

	// Enregistrer les routes
	webServer.registerRoutes()

	return webServer
}

// registerRoutes enregistre toutes les routes
func (ws *WebServer) registerRoutes() {
	// Servir les fichiers statiques embarqu√©s
	staticFS, err := fs.Sub(staticFiles, constants.StaticDirectory)
	if err != nil {
		log.Fatalf(constants.MsgErrorStaticFiles, err)
	}
	
	fileServer := http.FileServer(http.FS(staticFS))
	
	// Route pour les assets statiques
	ws.mux.Handle(constants.StaticRoute, http.StripPrefix(constants.StaticRoute, fileServer))
	
	// Route racine - servir l'interface web
	ws.mux.HandleFunc(constants.WebRouteRoot, ws.handleWebInterface)
	
	// Routes API - proxy vers le serveur API
	ws.mux.HandleFunc("/api/", ws.handleAPI)
	
	// Route de sant√© sp√©cifique au serveur web
	ws.mux.HandleFunc(constants.WebRouteHealth, ws.handleWebHealth)
	
	// Route pour t√©l√©charger des rapports
	ws.mux.HandleFunc(constants.WebRouteDownload, ws.handleDownload)
	
	log.Printf(constants.MsgRoutesRegistered)
	log.Printf(constants.MsgRouteWebInterface)
	log.Printf(constants.MsgRouteStaticFiles)
	log.Printf(constants.MsgRouteAPIProxy)
	log.Printf(constants.MsgRouteWebHealth)
	log.Printf(constants.MsgRouteWebDownload)
}

// handleWebInterface sert l'interface web principale
func (ws *WebServer) handleWebInterface(w http.ResponseWriter, r *http.Request) {
	// Si ce n'est pas la racine, v√©rifier si c'est un fichier statique
	if r.URL.Path != constants.WebRouteRoot {
		// Essayer de servir comme fichier statique
		staticFS, _ := fs.Sub(staticFiles, constants.StaticDirectory)
		if _, err := fs.Stat(staticFS, r.URL.Path[1:]); err == nil {
			http.FileServer(http.FS(staticFS)).ServeHTTP(w, r)
			return
		}
		
		// Si pas trouv√©, rediriger vers la page d'accueil (SPA routing)
		if r.URL.Path != constants.WebRouteRoot {
			http.Redirect(w, r, constants.WebRouteRoot, http.StatusFound)
			return
		}
	}

	// Servir index.html pour toutes les routes SPA
	staticFS, _ := fs.Sub(staticFiles, constants.StaticDirectory)
	indexContent, err := fs.ReadFile(staticFS, constants.StaticIndexHTML)
	if err != nil {
		http.Error(w, constants.MsgWebInterfaceUnavailable, http.StatusInternalServerError)
		log.Printf(constants.MsgErrorIndexHTML, err)
		return
	}

	// D√©finir les headers appropri√©s
	w.Header().Set(constants.HeaderContentType, constants.ContentTypeHTMLCharset)
	w.Header().Set(constants.HeaderCacheControl, constants.HeaderValueNoCache)
	w.Header().Set(constants.HeaderXFrameOptions, constants.HeaderValueDeny)
	w.Header().Set(constants.HeaderXContentType, constants.HeaderValueNoSniff)
	w.Header().Set(constants.HeaderContentLength, fmt.Sprintf("%d", len(indexContent)))
	
	// √âcrire le contenu
	w.WriteHeader(http.StatusOK)
	w.Write(indexContent)
	
	log.Printf(constants.MsgWebInterfaceServed, r.Method, r.URL.Path)
}

// handleAPI proxy les requ√™tes API vers le serveur API int√©gr√©
func (ws *WebServer) handleAPI(w http.ResponseWriter, r *http.Request) {
	// Ajouter les headers CORS
	w.Header().Set(constants.HeaderCORSOrigin, constants.HeaderValueCORSAll)
	w.Header().Set(constants.HeaderCORSMethods, constants.HeaderValueCORSMethods)
	w.Header().Set(constants.HeaderCORSHeaders, constants.HeaderValueCORSHeaders)
	
	// G√©rer les requ√™tes OPTIONS pour CORS
	if r.Method == constants.HTTPMethodOPTIONS {
		w.WriteHeader(http.StatusOK)
		return
	}

	// Log de la requ√™te API
	log.Printf(constants.MsgAPIRequest, r.Method, r.URL.Path)
	
	// Proxy vers les handlers de l'API server
	switch {
	case r.URL.Path == constants.APIRouteAnalyze:
		ws.apiServer.HandleAnalyze(w, r)
	case r.URL.Path == constants.APIRouteAnalyzeSemantic:
		ws.apiServer.HandleSemanticAnalysis(w, r)
	case r.URL.Path == constants.APIRouteAnalyzeSEO:
		ws.apiServer.HandleSEOAnalysis(w, r)
	case r.URL.Path == constants.APIRouteAnalyzeQuick:
		ws.apiServer.HandleQuickAnalysis(w, r)
	case r.URL.Path == constants.APIRouteHealth:
		ws.apiServer.HandleHealth(w, r)
	case r.URL.Path == constants.APIRouteStats:
		ws.apiServer.HandleStats(w, r)
	case r.URL.Path == constants.APIRouteAnalyses:
		ws.apiServer.HandleAnalyses(w, r)
	case strings.HasPrefix(r.URL.Path, constants.APIRouteAnalysisDetails):
		ws.apiServer.HandleAnalysisDetails(w, r)
	case r.URL.Path == constants.APIRouteInfo:
		ws.apiServer.HandleInfo(w, r)
	case r.URL.Path == constants.APIRouteVersion:
		ws.apiServer.HandleVersion(w, r)
	default:
		// Route API non trouv√©e
		http.Error(w, constants.MsgAPIEndpointNotFound, http.StatusNotFound)
	}
}

// handleWebHealth retourne l'√©tat de sant√© du serveur web
func (ws *WebServer) handleWebHealth(w http.ResponseWriter, r *http.Request) {
	if r.Method != constants.HTTPMethodGET {
		http.Error(w, constants.MsgMethodNotAllowed, http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	
	health := map[string]interface{}{
		"status":     "healthy",
		"service":    "Fire Salamander Web Server",
		"version":    constants.AppVersion,
		"timestamp":  time.Now().Format(time.RFC3339),
		"uptime":     time.Since(time.Now()), // Placeholder - devrait √™tre le vrai uptime
		"components": map[string]string{
			"web_server":    "healthy",
			"static_files":  "healthy",
			"api_proxy":     "healthy",
			"orchestrator":  "healthy",
		},
	}

	// V√©rifier la sant√© de l'orchestrateur
	if ws.orchestrator != nil {
		stats := ws.orchestrator.GetStats()
		if stats != nil {
			health["orchestrator_stats"] = stats
		}
	} else {
		health["components"].(map[string]string)["orchestrator"] = "unavailable"
		health["status"] = "degraded"
	}

	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, `{
		"status": "%s",
		"service": "%s",
		"version": "%s",
		"timestamp": "%s",
		"components": %v
	}`,
		health["status"],
		health["service"],
		health["version"],
		health["timestamp"],
		`{"web_server":"healthy","static_files":"healthy","api_proxy":"healthy","orchestrator":"healthy"}`,
	)
}

// handleDownload g√®re le t√©l√©chargement de rapports
func (ws *WebServer) handleDownload(w http.ResponseWriter, r *http.Request) {
	if r.Method != constants.HTTPMethodGET {
		http.Error(w, constants.MsgMethodNotAllowed, http.StatusMethodNotAllowed)
		return
	}

	// Extraire le nom du fichier de l'URL
	filename := filepath.Base(r.URL.Path)
	if filename == "." || filename == "/" {
		http.Error(w, constants.MsgFilenameRequired, http.StatusBadRequest)
		return
	}

	log.Printf(constants.MsgDownloadRequested, filename)

	// Pour l'instant, retourner un rapport d'exemple
	// Dans une vraie impl√©mentation, r√©cup√©rer le rapport depuis le stockage
	sampleReport := ws.generateSampleReport(filename)
	
	// D√©finir les headers de t√©l√©chargement
	w.Header().Set("Content-Disposition", fmt.Sprintf("attachment; filename=%s", filename))
	
	// D√©terminer le type de contenu bas√© sur l'extension
	ext := filepath.Ext(filename)
	switch ext {
	case ".html":
		w.Header().Set("Content-Type", "text/html")
	case ".pdf":
		w.Header().Set("Content-Type", "application/pdf")
	case ".json":
		w.Header().Set("Content-Type", "application/json")
	case ".csv":
		w.Header().Set("Content-Type", "text/csv")
	default:
		w.Header().Set("Content-Type", "application/octet-stream")
	}

	w.WriteHeader(http.StatusOK)
	w.Write([]byte(sampleReport))
}

// generateSampleReport g√©n√®re un rapport d'exemple
func (ws *WebServer) generateSampleReport(filename string) string {
	ext := filepath.Ext(filename)
	
	switch ext {
	case ".html":
		return ws.generateHTMLReport()
	case ".json":
		return ws.generateJSONReport()
	case ".csv":
		return ws.generateCSVReport()
	default:
		return "Rapport Fire Salamander - " + filename
	}
}

// generateHTMLReport g√©n√®re un rapport HTML
func (ws *WebServer) generateHTMLReport() string {
	return `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport Fire Salamander</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .header { text-align: center; border-bottom: 2px solid #ff6b35; padding-bottom: 20px; margin-bottom: 30px; }
        .logo { font-size: 2rem; margin-bottom: 10px; }
        .score { font-size: 3rem; font-weight: bold; color: #ff6b35; text-align: center; margin: 20px 0; }
        .section { margin: 30px 0; padding: 20px; background: #f8f9fa; border-radius: 8px; }
        .metric { display: flex; justify-content: space-between; margin: 10px 0; }
        .recommendation { background: white; padding: 15px; margin: 10px 0; border-left: 4px solid #ff6b35; }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">üî• Fire Salamander</div>
        <h1>Rapport d'Analyse SEO</h1>
        <p>G√©n√©r√© le ` + time.Now().Format("02/01/2006 √† 15:04") + `</p>
    </div>
    
    <div class="section">
        <h2>R√©sum√© Ex√©cutif</h2>
        <div class="score">87/100</div>
        <p>Votre site pr√©sente de bonnes performances SEO avec quelques axes d'am√©lioration identifi√©s.</p>
    </div>
    
    <div class="section">
        <h2>M√©triques D√©taill√©es</h2>
        <div class="metric"><span>SEO Technique:</span><span>85/100</span></div>
        <div class="metric"><span>Performance:</span><span>72/100</span></div>
        <div class="metric"><span>Contenu:</span><span>90/100</span></div>
        <div class="metric"><span>Mobile:</span><span>88/100</span></div>
    </div>
    
    <div class="section">
        <h2>Recommandations Prioritaires</h2>
        <div class="recommendation">
            <h3>Optimiser les images</h3>
            <p>Compresser les images pour am√©liorer les temps de chargement.</p>
        </div>
        <div class="recommendation">
            <h3>Am√©liorer les m√©ta-descriptions</h3>
            <p>Ajouter des m√©ta-descriptions optimis√©es sur les pages manquantes.</p>
        </div>
    </div>
    
    <footer style="text-align: center; margin-top: 50px; color: #666;">
        <p>Rapport g√©n√©r√© par Fire Salamander v` + ws.config.App.Version + `</p>
    </footer>
</body>
</html>`
}

// generateJSONReport g√©n√®re un rapport JSON
func (ws *WebServer) generateJSONReport() string {
	return `{
  "report": {
    "title": "Rapport Fire Salamander",
    "generated_at": "` + time.Now().Format(time.RFC3339) + `",
    "version": "` + ws.config.App.Version + `",
    "overall_score": ` + fmt.Sprintf("%d", constants.SampleOverallScore) + `,
    "url": "` + constants.TestExampleURL + `",
    "categories": {
      "technical": ` + fmt.Sprintf("%d", constants.SampleTechnicalScore) + `,
      "performance": ` + fmt.Sprintf("%d", constants.SamplePerformanceScore) + `,
      "content": ` + fmt.Sprintf("%d", constants.SampleContentScore) + `,
      "mobile": ` + fmt.Sprintf("%d", constants.SampleMobileScore) + `
    },
    "recommendations": [
      {
        "id": "optimize_images",
        "title": "Optimiser les images",
        "description": "Compresser les images pour am√©liorer les temps de chargement",
        "priority": "high",
        "impact": "high",
        "effort": "medium"
      },
      {
        "id": "meta_descriptions",
        "title": "Am√©liorer les m√©ta-descriptions",
        "description": "Ajouter des m√©ta-descriptions optimis√©es sur les pages manquantes",
        "priority": "medium",
        "impact": "medium",
        "effort": "low"
      }
    ],
    "insights": [
      {
        "type": "content_seo_alignment",
        "severity": "info",
        "title": "Alignement contenu-SEO d√©tect√©",
        "description": "Le titre de la page est coh√©rent avec les mots-cl√©s identifi√©s"
      }
    ],
    "metadata": {
      "analysis_duration": "15.2s",
      "pages_analyzed": 1,
      "issues_found": 3,
      "score_trend": "stable"
    }
  }
}`
}

// generateCSVReport g√©n√®re un rapport CSV
func (ws *WebServer) generateCSVReport() string {
	return `URL,Score Global,SEO Technique,Performance,Contenu,Mobile,Statut,Date
` + constants.TestExampleURL + `,87,85,72,90,88,Succ√®s,` + time.Now().Format("02/01/2006") + `
` + constants.TestDemoURL + `,72,78,65,85,70,Succ√®s,` + time.Now().AddDate(0, 0, -1).Format("02/01/2006") + `
` + constants.TestDemoFrURL + `,91,92,88,95,89,Succ√®s,` + time.Now().AddDate(0, 0, -2).Format("02/01/2006") + `

R√©sum√©:
Score moyen,83.3
Analyses r√©ussies,3
Analyses √©chou√©es,0
Derni√®re mise √† jour,` + time.Now().Format("02/01/2006 15:04") + `

Recommandations principales:
1. Optimiser les images pour am√©liorer les performances
2. Am√©liorer les m√©ta-descriptions
3. Optimiser la structure des URLs`
}

// Start d√©marre le serveur web
func (ws *WebServer) Start() error {
	log.Printf(constants.WebServerStarting)
	log.Printf(constants.WebInterfaceAvailableFormat, ws.config.Port)
	log.Printf(constants.APIRestAvailableFormat, ws.config.Port)
	
	// D√©marrer le serveur dans une goroutine
	go func() {
		if err := ws.server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf(constants.MsgWebServerError, err)
		}
	}()
	
	log.Printf(constants.MsgWebServerStarted)
	
	return nil
}

// Stop arr√™te le serveur web
func (ws *WebServer) Stop(ctx context.Context) error {
	log.Printf(constants.MsgWebServerStopping)
	return ws.server.Shutdown(ctx)
}

// GetStats retourne les statistiques du serveur web
func (ws *WebServer) GetStats() map[string]interface{} {
	stats := map[string]interface{}{
		"service":    "web_server",
		"status":     "running",
		"port":       ws.config.Port,
		"version":    constants.AppVersion,
		"started_at": time.Now().Format(time.RFC3339),
	}
	
	// Ajouter les stats de l'orchestrateur si disponible
	if ws.orchestrator != nil {
		if orchestratorStats := ws.orchestrator.GetStats(); orchestratorStats != nil {
			stats["orchestrator"] = orchestratorStats
		}
	}
	
	return stats
}